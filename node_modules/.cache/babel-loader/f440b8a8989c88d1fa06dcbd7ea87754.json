{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\WOW\\\\Documents\\\\GitHub\\\\react\\\\react-test\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"C:\\\\Users\\\\WOW\\\\Documents\\\\GitHub\\\\react\\\\react-test\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"C:\\\\Users\\\\WOW\\\\Documents\\\\GitHub\\\\react\\\\react-test\\\\src\\\\components\\\\Messages-container\\\\Messages\\\\Messages.jsx\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport styles from './Messages.module.css';\nimport DialogWithUser from '../DialogsList/DialogWithUser';\nimport Dialog from './Dialog';\n\nconst Messages = (_ref) => {\n  let dialogItemsData = _ref.dialogItemsData,\n      currentDialogId = _ref.currentDialogId,\n      search = _ref.search,\n      dialogsFromSearch = _ref.dialogsFromSearch,\n      props = _objectWithoutProperties(_ref, [\"dialogItemsData\", \"currentDialogId\", \"search\", \"dialogsFromSearch\"]);\n\n  const _useState = useState(null),\n        _useState2 = _slicedToArray(_useState, 2),\n        searchWord = _useState2[0],\n        setSearchWord = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        isSearchMode = _useState4[0],\n        setSearchMode = _useState4[1];\n\n  const searchInput = useEffect();\n  const dialogList = useEffect();\n\n  const handleSearch = e => {\n    const word = e.currentTarget.value;\n    setSearchWord(word);\n\n    if (word && word.trim() !== '') {\n      search(word);\n      setSearchMode(true);\n      document.addEventListener('click', outSearh);\n    }\n  };\n\n  const outSearh = e => {\n    if (e.target !== dialogList.current && e.target !== searchInput.current) {\n      setSearchMode(false);\n      setSearchWord('');\n    }\n\n    document.removeEventListener('click', outSearh);\n  };\n\n  const dialogItems = dialogItemsData.map((item, index) => React.createElement(DialogWithUser, {\n    currentDialogId: currentDialogId,\n    avatar: item.avatar,\n    lastMessage: item.messages[item.messages.length - 1].message,\n    setDialogID: props.setDialogID,\n    key: index + 1,\n    name: item.name,\n    id: item.userId,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }));\n  const dialogItemsSearch = isSearchMode && dialogsFromSearch.map((item, index) => React.createElement(DialogWithUser, {\n    isSearchMode: isSearchMode,\n    currentDialogId: currentDialogId,\n    avatar: item.avatar,\n    outSearh: outSearh,\n    lastMessage: item.messages[item.messages.length - 1].message,\n    setDialogID: props.setDialogID,\n    key: index + 1,\n    name: item.name,\n    id: item.userId,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }));\n  const dialog = useRef();\n  const currentDialog = dialogItemsData[dialogItemsData.findIndex(i => {\n    return i.userId === currentDialogId;\n  })];\n  return React.createElement(\"div\", {\n    className: styles.messages,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, currentDialogId === 0 ? React.createElement(\"div\", {\n    className: styles.emptyMessages,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: styles.iconMessage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: styles.selectDialog,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, \"Please select a dialog\")) : React.createElement(Dialog, {\n    isSearchMode: isSearchMode,\n    userId: currentDialog.userId,\n    sendMessage: props.sendMessage,\n    name: currentDialog.name,\n    avatar: currentDialog.avatar,\n    messages: currentDialog.messages,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: styles.dialogItems,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: styles.dialogSearch,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    placeholder: \"Search\",\n    ref: searchInput,\n    className: styles.searchInput,\n    onBlur: outSearh,\n    value: searchWord,\n    onChange: e => handleSearch(e),\n    type: \"text\",\n    name: \"\",\n    id: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: styles.dialogsList,\n    ref: dialogList,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, isSearchMode ? dialogItemsSearch : dialogItems)));\n};\n\nexport default Messages;","map":{"version":3,"sources":["C:\\Users\\WOW\\Documents\\GitHub\\react\\react-test\\src\\components\\Messages-container\\Messages\\Messages.jsx"],"names":["React","useEffect","useRef","useState","styles","DialogWithUser","Dialog","Messages","dialogItemsData","currentDialogId","search","dialogsFromSearch","props","searchWord","setSearchWord","isSearchMode","setSearchMode","searchInput","dialogList","handleSearch","e","word","currentTarget","value","trim","document","addEventListener","outSearh","target","current","removeEventListener","dialogItems","map","item","index","avatar","messages","length","message","setDialogID","name","userId","dialogItemsSearch","dialog","currentDialog","findIndex","i","emptyMessages","iconMessage","selectDialog","sendMessage","dialogSearch","dialogsList"],"mappings":"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","sourcesContent":["import React, {useEffect, useRef, useState} from 'react'\r\n\r\nimport styles from './Messages.module.css'\r\nimport DialogWithUser from '../DialogsList/DialogWithUser'\r\nimport Dialog from './Dialog'\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst Messages = ({dialogItemsData, currentDialogId, search, dialogsFromSearch,...props}) => {\r\n    const [searchWord, setSearchWord] = useState(null);\r\n    const [isSearchMode, setSearchMode] = useState(false);\r\n    const searchInput = useEffect();\r\n    const dialogList = useEffect();\r\n\r\n    const handleSearch = (e)=>{\r\n        const word = e.currentTarget.value;\r\n        setSearchWord(word);\r\n        if(word && word.trim() !== ''){\r\n            search(word);\r\n            setSearchMode(true);\r\n            document.addEventListener('click', outSearh)\r\n        }   \r\n    }\r\n    const outSearh = (e) =>{\r\n        if(e.target !== dialogList.current && e.target !== searchInput.current){\r\n            setSearchMode(false);\r\n            setSearchWord('');\r\n        }\r\n        document.removeEventListener('click', outSearh)\r\n           \r\n    }\r\n\r\n    \r\n    const dialogItems = dialogItemsData.map((item, index) => <DialogWithUser currentDialogId={currentDialogId} avatar={item.avatar}\r\n    lastMessage={ item.messages[item.messages.length-1].message} setDialogID={props.setDialogID}   key={index+1} name={item.name} id={item.userId} />)\r\n    const dialogItemsSearch = isSearchMode && dialogsFromSearch.map((item, index) => <DialogWithUser isSearchMode={isSearchMode} \r\n     currentDialogId={currentDialogId} avatar={item.avatar} outSearh={outSearh}\r\n    lastMessage={ item.messages[item.messages.length-1].message} setDialogID={props.setDialogID}   key={index+1} name={item.name} id={item.userId} />)\r\n    const dialog = useRef();\r\n    const currentDialog = dialogItemsData[dialogItemsData.findIndex((i)=>{return i.userId === currentDialogId})];\r\n   \r\n\r\n    return <div className={styles.messages} >\r\n        \r\n        {currentDialogId === 0\r\n            ? <div className={styles.emptyMessages}>\r\n                <div className={styles.iconMessage}></div>\r\n                <div className={styles.selectDialog}>\r\n                    Please select a dialog\r\n                </div>\r\n             </div>\r\n            : <Dialog isSearchMode={isSearchMode}  userId={currentDialog.userId} sendMessage={props.sendMessage} name={currentDialog.name} \r\n            avatar={currentDialog.avatar}  messages={currentDialog.messages} />}\r\n\r\n        <div className={styles.dialogItems}>\r\n            <div className={styles.dialogSearch}><input placeholder='Search' ref={searchInput} \r\n                className={styles.searchInput} onBlur={outSearh} value={searchWord}  onChange={e=>handleSearch(e)} type=\"text\" name=\"\" id=\"\"/></div>\r\n            <div className={styles.dialogsList} ref={dialogList}>\r\n                {isSearchMode ? dialogItemsSearch : dialogItems }\r\n        \r\n            </div>\r\n        </div>\r\n        \r\n    </div>\r\n}\r\n\r\n\r\nexport default Messages;"]},"metadata":{},"sourceType":"module"}