{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\WOW\\\\Documents\\\\GitHub\\\\react\\\\react-test\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\WOW\\\\Documents\\\\GitHub\\\\react\\\\react-test\\\\src\\\\components\\\\Messages-container\\\\Messages\\\\Dialog.jsx\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport MessageItem from '../../MessageItem/MessageItem';\nimport styles from './Messages.module.css';\nimport { reduxForm, reset, change, formValues } from 'redux-form';\nimport { createField } from '../../common/FormControls/FormControls';\nimport { required, voidValue } from '../../../utils/validators/validator';\nimport ScrollbarHOC from '../../common/HOCScrollBar/HOCScrollbarCusctom';\nimport { NavLink } from 'react-router-dom';\nimport 'emoji-mart/css/emoji-mart.css';\nimport { Picker } from 'emoji-mart';\nimport { connect } from 'react-redux';\n\nconst AddMessageForm = props => {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        emojiPickerMode = _useState2[0],\n        setEPMode = _useState2[1];\n\n  const addEmoji = e => {\n    debugger;\n    const sym = e.unified.split('-');\n    const codesArray = [];\n    sym.map(el => codesArray.push('0x' + el));\n    const emoji = String.fromCodePoint(...codesArray);\n    debugger;\n    props.dispatch(change('addMessageForm', \"message\".concat(props.userId), props.addMessageForm.values ? props.addMessageForm.values[\"message\".concat(props.userId)] + emoji : emoji));\n  };\n\n  const onKeyHandler = e => {\n    if (e.keyCode == 13 && e.shiftKey == false) {\n      if (e.target.name == \"message\".concat(props.userId)) {\n        e.preventDefault();\n        props.handleSubmit();\n      }\n    }\n  };\n\n  return React.createElement(\"form\", {\n    onKeyDown: onKeyHandler,\n    onSubmit: props.handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, createField(\"write message to \".concat(props.name), \"message\".concat(props.userId), [required], 'textarea', null, null, {\n    autoFocus: true\n  }), props.dirty && React.createElement(\"button\", {\n    className: styles.buttonForm,\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }), React.createElement(\"span\", {\n    role: \"button\",\n    className: styles.buttomEmoji,\n    onClick: () => {\n      setEPMode(!emojiPickerMode);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, \"\\uD83D\\uDE42\"), emojiPickerMode && React.createElement(Picker, {\n    style: {\n      position: \"absolute\"\n    },\n    set: \"emojione\",\n    onSelect: addEmoji,\n    native: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }));\n};\n\nconst afterSumbit = (result, dispatch) => {\n  dispatch(reset('addMessageForm'));\n};\n\nconst AddMessageFormRedux = reduxForm({\n  form: 'addMessageForm',\n  onSubmitSuccess: afterSumbit\n})(AddMessageForm);\n\nconst Dialog = props => {\n  let messageItems = props.messages.map((item, index) => React.createElement(MessageItem, {\n    key: index,\n    right: item.right,\n    message: item.message,\n    id: item.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }));\n  const scrollBar = useRef();\n  useEffect(() => {\n    !props.isSearchMode && document.querySelector(\"textarea[name=message\".concat(props.userId, \"]\")).focus();\n  });\n  useEffect(() => {\n    scrollBar.current.scrollToBottom();\n  }, [messageItems]);\n  return React.createElement(\"div\", {\n    className: styles.dialog,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: styles.dialogHead,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: styles.avatarContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, React.createElement(NavLink, {\n    to: \"/profile/\".concat(props.userId),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    className: styles.avatar,\n    src: props.avatar,\n    alt: \"avatar\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }))), React.createElement(\"span\", {\n    className: styles.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(NavLink, {\n    to: \"/profile/\".concat(props.userId),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, props.name))), React.createElement(ScrollbarHOC, {\n    children: React.createElement(\"div\", {\n      className: styles.messagesFill,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, messageItems),\n    autoHide: true,\n    ref: scrollBar,\n    removeTrackYWhenNotUsed: true,\n    style: {\n      width: \"100%\",\n      height: \"75%\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: styles.formContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, React.createElement(AddMessageFormWithConnect, {\n    valueMessage: props.valueMessage,\n    userId: props.userId,\n    name: props.name,\n    onSubmit: data => {\n      debugger;\n      props.sendMessage(data[\"message\".concat(props.userId)], props.userId);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  })));\n};\n\nconst mapStateToPropse = state => ({\n  addMessageForm: state.form.addMessageForm\n});\n\nconst AddMessageFormWithConnect = connect(mapStateToPropse)(AddMessageFormRedux);\nexport default Dialog;","map":{"version":3,"sources":["C:\\Users\\WOW\\Documents\\GitHub\\react\\react-test\\src\\components\\Messages-container\\Messages\\Dialog.jsx"],"names":["React","useEffect","useRef","useState","MessageItem","styles","reduxForm","reset","change","formValues","createField","required","voidValue","ScrollbarHOC","NavLink","Picker","connect","AddMessageForm","props","emojiPickerMode","setEPMode","addEmoji","e","sym","unified","split","codesArray","map","el","push","emoji","String","fromCodePoint","dispatch","userId","addMessageForm","values","onKeyHandler","keyCode","shiftKey","target","name","preventDefault","handleSubmit","autoFocus","dirty","buttonForm","buttomEmoji","position","afterSumbit","result","AddMessageFormRedux","form","onSubmitSuccess","Dialog","messageItems","messages","item","index","right","message","id","scrollBar","isSearchMode","document","querySelector","focus","current","scrollToBottom","dialog","dialogHead","avatarContainer","avatar","messagesFill","width","height","formContainer","valueMessage","data","sendMessage","mapStateToPropse","state","AddMessageFormWithConnect"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\r\n\r\nimport MessageItem from '../../MessageItem/MessageItem'\r\nimport styles from './Messages.module.css'\r\nimport { reduxForm, reset, change, formValues } from 'redux-form';\r\nimport { createField } from '../../common/FormControls/FormControls';\r\nimport { required, voidValue } from '../../../utils/validators/validator';\r\nimport ScrollbarHOC from '../../common/HOCScrollBar/HOCScrollbarCusctom';\r\nimport { NavLink } from 'react-router-dom';\r\nimport 'emoji-mart/css/emoji-mart.css'\r\nimport { Picker } from 'emoji-mart'\r\nimport { connect } from 'react-redux'\r\n\r\nconst AddMessageForm = (props) => {\r\n    const [emojiPickerMode,setEPMode] = useState(false);\r\n\r\n    const addEmoji = (e) => {\r\n        debugger;\r\n        const sym = e.unified.split('-')\r\n        const codesArray = []\r\n        sym.map(el => codesArray.push('0x' + el))\r\n        const emoji = String.fromCodePoint(...codesArray)\r\n        debugger;\r\n        props.dispatch(change('addMessageForm', `message${props.userId}`, props.addMessageForm.values ? props.addMessageForm.values[`message${props.userId}`] + emoji : emoji));\r\n    }\r\n    const onKeyHandler = (e) => {\r\n        if (e.keyCode == 13 && e.shiftKey == false) {\r\n            if (e.target.name == `message${props.userId}`) {\r\n                e.preventDefault();\r\n                props.handleSubmit();\r\n\r\n            }\r\n        }\r\n    }\r\n    return <form onKeyDown={onKeyHandler} onSubmit={props.handleSubmit}>\r\n        {createField(`write message to ${props.name}`, `message${props.userId}`, [required], 'textarea', null, null, { autoFocus: true })}\r\n\r\n        {props.dirty && <button className={styles.buttonForm} type=\"submit\"></button>}\r\n        <span role='button' className={styles.buttomEmoji} onClick={()=>{setEPMode(!emojiPickerMode)}}>🙂</span>\r\n        {emojiPickerMode && <Picker style={{position:\"absolute\"}} set='emojione' onSelect={addEmoji} native={true} />}\r\n     \r\n        \r\n    </form>\r\n}\r\n\r\nconst afterSumbit = (result, dispatch) => {\r\n    dispatch(reset('addMessageForm'))\r\n}\r\nconst AddMessageFormRedux = reduxForm({\r\n    form: 'addMessageForm',\r\n    onSubmitSuccess: afterSumbit\r\n})(AddMessageForm);\r\n\r\nconst Dialog = (props) => {\r\n    let messageItems = props.messages.map((item, index) => <MessageItem key={index} right={item.right} message={item.message} id={item.id} />)\r\n\r\n    const scrollBar = useRef()\r\n\r\n    useEffect(() => {\r\n        !props.isSearchMode && document.querySelector(`textarea[name=message${props.userId}]`).focus()\r\n    })\r\n\r\n    useEffect(() => {\r\n        scrollBar.current.scrollToBottom();\r\n    }, [messageItems])\r\n    return <div className={styles.dialog}>\r\n        <div className={styles.dialogHead}>\r\n            <div className={styles.avatarContainer}>\r\n                <NavLink to={`/profile/${props.userId}`}>\r\n                    <img className={styles.avatar} src={props.avatar} alt=\"avatar\" />\r\n                </NavLink>\r\n            </div>\r\n            <span className={styles.name}>\r\n                <NavLink to={`/profile/${props.userId}`}>\r\n                    {props.name}\r\n                </NavLink>\r\n            </span>\r\n        </div>\r\n        <ScrollbarHOC children={<div className={styles.messagesFill}>{messageItems}</div>} autoHide ref={scrollBar} removeTrackYWhenNotUsed={true} style={{ width: \"100%\", height: \"75%\" }} />\r\n\r\n        <div className={styles.formContainer}>\r\n            <AddMessageFormWithConnect valueMessage={props.valueMessage} userId={props.userId} name={props.name} onSubmit={(data) => { debugger; props.sendMessage(data[`message${props.userId}`], props.userId) }} />\r\n        </div>\r\n    </div>\r\n}\r\nconst mapStateToPropse = (state) => ({\r\n    addMessageForm: state.form.addMessageForm\r\n})\r\nconst AddMessageFormWithConnect = connect(mapStateToPropse)(AddMessageFormRedux)\r\n\r\nexport default Dialog;"]},"metadata":{},"sourceType":"module"}