{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\WOW\\\\Documents\\\\GitHub\\\\react\\\\react-test\\\\src\\\\components\\\\Messages-container\\\\Messages\\\\Dialog.jsx\";\nimport React, { useEffect, useRef } from 'react';\nimport MessageItem from '../../MessageItem/MessageItem';\nimport styles from './Messages.module.css';\nimport { reduxForm, reset, change, formValues } from 'redux-form';\nimport { createField } from '../../common/FormControls/FormControls';\nimport { required, voidValue } from '../../../utils/validators/validator';\nimport ScrollbarHOC from '../../common/HOCScrollBar/HOCScrollbarCusctom';\nimport { NavLink } from 'react-router-dom';\nimport 'emoji-mart/css/emoji-mart.css';\nimport { Picker } from 'emoji-mart';\nimport { connect } from 'react-redux';\n\nconst addMessageForm = props => {\n  console.log(props.valueMessage);\n\n  const addEmoji = emoji => {\n    debugger;\n    props.dispatch(change('addMessageForm', \"message\".concat(props.userId), emoji.native));\n  };\n\n  const onKeyHandler = e => {\n    if (e.keyCode == 13 && e.shiftKey == false) {\n      if (e.target.name == \"message\".concat(props.userId)) {\n        e.preventDefault();\n        props.handleSubmit();\n      }\n    }\n  };\n\n  return React.createElement(\"form\", {\n    onKeyDown: onKeyHandler,\n    onSubmit: props.handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, createField(\"write message to \".concat(props.name), \"message\".concat(props.userId), [required], 'textarea', null, null, {\n    autoFocus: true\n  }), props.dirty && React.createElement(\"button\", {\n    className: styles.buttonForm,\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }), React.createElement(Picker, {\n    set: \"emojione\",\n    onSelect: addEmoji,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }));\n};\n\nconst afterSumbit = (result, dispatch) => {\n  dispatch(reset('addMessageForm'));\n};\n\nconst AddMessageFormRedux = reduxForm({\n  form: 'addMessageForm',\n  onSubmitSuccess: afterSumbit\n})(addMessageForm);\n\nconst Dialog = props => {\n  let messageItems = props.messages.map((item, index) => React.createElement(MessageItem, {\n    key: index,\n    right: item.right,\n    message: item.message,\n    id: item.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }));\n  const scrollBar = useRef();\n  useEffect(() => {\n    !props.isSearchMode && document.querySelector(\"textarea[name=message\".concat(props.userId, \"]\")).focus();\n  });\n  useEffect(() => {\n    scrollBar.current.scrollToBottom();\n  }, [messageItems]);\n  return React.createElement(\"div\", {\n    className: styles.dialog,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: styles.dialogHead,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: styles.avatarContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, React.createElement(NavLink, {\n    to: \"/profile/\".concat(props.userId),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    className: styles.avatar,\n    src: props.avatar,\n    alt: \"avatar\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }))), React.createElement(\"span\", {\n    className: styles.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, React.createElement(NavLink, {\n    to: \"/profile/\".concat(props.userId),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, props.name))), React.createElement(ScrollbarHOC, {\n    children: React.createElement(\"div\", {\n      className: styles.messagesFill,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, messageItems),\n    autoHide: true,\n    ref: scrollBar,\n    removeTrackYWhenNotUsed: true,\n    style: {\n      width: \"100%\",\n      height: \"75%\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: styles.formContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, React.createElement(AddMessageFormRedux, {\n    valueMessage: props.valueMessage,\n    userId: props.userId,\n    name: props.name,\n    onSubmit: data => {\n      debugger;\n      props.sendMessage(data[\"message\".concat(props.userId)], props.userId);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  })));\n};\n\nconst mapStateToPropse = state => ({\n  valuesForm: state.form.addMessageForm.values\n});\n\nconst AddMessageFormWithConnect = connect(mapStateToPropse)(AddMessageFormRedux);\nexport default Dialog;","map":{"version":3,"sources":["C:\\Users\\WOW\\Documents\\GitHub\\react\\react-test\\src\\components\\Messages-container\\Messages\\Dialog.jsx"],"names":["React","useEffect","useRef","MessageItem","styles","reduxForm","reset","change","formValues","createField","required","voidValue","ScrollbarHOC","NavLink","Picker","connect","addMessageForm","props","console","log","valueMessage","addEmoji","emoji","dispatch","userId","native","onKeyHandler","e","keyCode","shiftKey","target","name","preventDefault","handleSubmit","autoFocus","dirty","buttonForm","afterSumbit","result","AddMessageFormRedux","form","onSubmitSuccess","Dialog","messageItems","messages","map","item","index","right","message","id","scrollBar","isSearchMode","document","querySelector","focus","current","scrollToBottom","dialog","dialogHead","avatarContainer","avatar","messagesFill","width","height","formContainer","data","sendMessage","mapStateToPropse","state","valuesForm","values","AddMessageFormWithConnect"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef } from 'react'\r\n\r\nimport MessageItem from '../../MessageItem/MessageItem'\r\nimport styles from './Messages.module.css'\r\nimport { reduxForm, reset, change, formValues  } from 'redux-form';\r\nimport { createField } from '../../common/FormControls/FormControls';\r\nimport { required, voidValue } from '../../../utils/validators/validator';\r\nimport ScrollbarHOC from '../../common/HOCScrollBar/HOCScrollbarCusctom';\r\nimport { NavLink } from 'react-router-dom';\r\nimport 'emoji-mart/css/emoji-mart.css'\r\nimport { Picker } from 'emoji-mart'\r\nimport {connect} from 'react-redux'\r\n\r\nconst addMessageForm = (props) => {\r\n   \r\n    console.log(props.valueMessage)\r\n    const addEmoji = (emoji)=>{\r\n        debugger;\r\n        props.dispatch(change('addMessageForm', `message${props.userId}`, emoji.native));\r\n    }\r\n    const onKeyHandler = (e) => {\r\n        if (e.keyCode == 13 && e.shiftKey == false) {\r\n            if (e.target.name == `message${props.userId}`) {\r\n                e.preventDefault();\r\n                props.handleSubmit();\r\n\r\n            }\r\n        }\r\n    }\r\n    return <form onKeyDown={onKeyHandler} onSubmit={props.handleSubmit}>\r\n        {createField(`write message to ${props.name}`, `message${props.userId}`, [required], 'textarea', null, null, { autoFocus: true })}\r\n\r\n       {props.dirty && <button className={styles.buttonForm} type=\"submit\"></button> }\r\n       <Picker set='emojione' onSelect={addEmoji} />\r\n\r\n\r\n    </form>\r\n}\r\n\r\nconst afterSumbit = (result, dispatch) => {\r\n    dispatch(reset('addMessageForm'))\r\n}\r\nconst AddMessageFormRedux = reduxForm({\r\n    form: 'addMessageForm',\r\n    onSubmitSuccess: afterSumbit\r\n})(addMessageForm);\r\n\r\nconst Dialog = (props) => {\r\n    let messageItems = props.messages.map((item, index) => <MessageItem key={index} right={item.right} message={item.message} id={item.id} />)\r\n\r\n    const scrollBar = useRef()\r\n\r\n    useEffect(() => {\r\n        !props.isSearchMode && document.querySelector(`textarea[name=message${props.userId}]`).focus()\r\n    })\r\n\r\n    useEffect(() => {\r\n        scrollBar.current.scrollToBottom();\r\n    }, [messageItems])\r\n    return <div className={styles.dialog}>\r\n        <div className={styles.dialogHead}>\r\n            <div className={styles.avatarContainer}>\r\n                <NavLink to={`/profile/${props.userId}`}>\r\n                    <img className={styles.avatar} src={props.avatar} alt=\"avatar\" />\r\n                </NavLink>\r\n            </div>\r\n            <span className={styles.name}>\r\n                <NavLink to={`/profile/${props.userId}`}>\r\n                    {props.name}\r\n                </NavLink>\r\n            </span>\r\n        </div>\r\n        <ScrollbarHOC children={<div className={styles.messagesFill}>{messageItems}</div>} autoHide ref={scrollBar} removeTrackYWhenNotUsed={true} style={{ width: \"100%\", height: \"75%\" }} />\r\n\r\n        <div className={styles.formContainer}>\r\n            <AddMessageFormRedux valueMessage={props.valueMessage} userId={props.userId} name={props.name} onSubmit={(data) => { debugger; props.sendMessage(data[`message${props.userId}`], props.userId) }} />\r\n        </div>\r\n    </div>\r\n}\r\nconst mapStateToPropse = (state)=> ({\r\n    valuesForm: state.form.addMessageForm.values\r\n})\r\nconst AddMessageFormWithConnect = connect(mapStateToPropse)(AddMessageFormRedux)\r\n\r\nexport default Dialog;"]},"metadata":{},"sourceType":"module"}