{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\WOW\\\\Documents\\\\GitHub\\\\react\\\\react-test\\\\src\\\\components\\\\Profile\\\\Posts\\\\AddPostFormWithConnect.jsx\";\nimport React from 'react';\nimport { reduxForm, reset } from 'redux-form';\nimport { required, maxLengthCreator, voidValue } from '../../../utils/validators/validator';\nimport { Textarea, createField } from '../../common/FormControls/FormControls';\nimport EmojiPicker from './../../common/EmojiPicker/EmojiPicker';\nimport { connect } from 'react-redux';\nconst maxLength500 = maxLengthCreator(500);\n\nconst FormPost = props => {\n  return React.createElement(\"form\", {\n    className: styles.formPost,\n    onSubmit: props.handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }, createField('Share your great thoughts here', 'postBody', [required, maxLength500, voidValue], Textarea), React.createElement(EmojiPicker, {\n    formName: \"formPost\",\n    fieldName: \"postBody\",\n    Form: props.addPostForm,\n    styles: styles,\n    dispatch: props.dispatch,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    className: styles.button,\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, \"Post\"));\n};\n\nconst afterSumbit = (result, dispatch) => {\n  dispatch(reset('formPost'));\n};\n\nconst FormPostRedux = reduxForm({\n  form: 'formPost',\n  onSubmitSuccess: afterSumbit\n})(FormPost);\n\nconst mapStateToPropse = state => ({\n  addPostForm: state.form.formPost\n});\n\nconst AddPostFormWithConnect = connect(mapStateToPropse)(FormPostRedux);\nexport default AddPostFormWithConnect;","map":{"version":3,"sources":["C:\\Users\\WOW\\Documents\\GitHub\\react\\react-test\\src\\components\\Profile\\Posts\\AddPostFormWithConnect.jsx"],"names":["React","reduxForm","reset","required","maxLengthCreator","voidValue","Textarea","createField","EmojiPicker","connect","maxLength500","FormPost","props","styles","formPost","handleSubmit","addPostForm","dispatch","button","afterSumbit","result","FormPostRedux","form","onSubmitSuccess","mapStateToPropse","state","AddPostFormWithConnect"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,KAApB,QAAiC,YAAjC;AACA,SAASC,QAAT,EAAmBC,gBAAnB,EAAqCC,SAArC,QAAsD,qCAAtD;AACA,SAASC,QAAT,EAAmBC,WAAnB,QAAsC,wCAAtC;AACA,OAAOC,WAAP,MAAwB,wCAAxB;AACA,SAASC,OAAT,QAAwB,aAAxB;AAGA,MAAMC,YAAY,GAAGN,gBAAgB,CAAC,GAAD,CAArC;;AAEA,MAAMO,QAAQ,GAAIC,KAAD,IAAW;AACxB,SAAO;AAAM,IAAA,SAAS,EAAEC,MAAM,CAACC,QAAxB;AAAkC,IAAA,QAAQ,EAAEF,KAAK,CAACG,YAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEFR,WAAW,CAAC,gCAAD,EAAmC,UAAnC,EAA+C,CAACJ,QAAD,EAAWO,YAAX,EAAyBL,SAAzB,CAA/C,EAAoFC,QAApF,CAFT,EAGH,oBAAC,WAAD;AAAa,IAAA,QAAQ,EAAC,UAAtB;AAAiC,IAAA,SAAS,EAAC,UAA3C;AAAsD,IAAA,IAAI,EAAEM,KAAK,CAACI,WAAlE;AAA+E,IAAA,MAAM,EAAEH,MAAvF;AAA+F,IAAA,QAAQ,EAAED,KAAK,CAACK,QAA/G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHG,EAIH;AAAQ,IAAA,SAAS,EAAEJ,MAAM,CAACK,MAA1B;AAAkC,IAAA,IAAI,EAAC,QAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJG,CAAP;AAMC,CAPL;;AAQI,MAAMC,WAAW,GAAG,CAACC,MAAD,EAASH,QAAT,KAAsB;AACtCA,EAAAA,QAAQ,CAACf,KAAK,CAAC,UAAD,CAAN,CAAR;AACH,CAFD;;AAGA,MAAMmB,aAAa,GAAGpB,SAAS,CAAC;AAC5BqB,EAAAA,IAAI,EAAE,UADsB;AAE5BC,EAAAA,eAAe,EAAEJ;AAFW,CAAD,CAAT,CAGnBR,QAHmB,CAAtB;;AAKA,MAAMa,gBAAgB,GAAIC,KAAD,KAAY;AACjCT,EAAAA,WAAW,EAAES,KAAK,CAACH,IAAN,CAAWR;AADS,CAAZ,CAAzB;;AAGA,MAAMY,sBAAsB,GAAGjB,OAAO,CAACe,gBAAD,CAAP,CAA0BH,aAA1B,CAA/B;AAEA,eAAeK,sBAAf","sourcesContent":["import React from 'react'\r\nimport { reduxForm, reset } from 'redux-form'\r\nimport { required, maxLengthCreator, voidValue } from '../../../utils/validators/validator'\r\nimport { Textarea, createField } from '../../common/FormControls/FormControls'\r\nimport EmojiPicker from './../../common/EmojiPicker/EmojiPicker'\r\nimport { connect } from 'react-redux'\r\n\r\n\r\nconst maxLength500 = maxLengthCreator(500);\r\n\r\nconst FormPost = (props) => {\r\n    return <form className={styles.formPost} onSubmit={props.handleSubmit}>\r\n\r\n        {createField('Share your great thoughts here', 'postBody', [required, maxLength500, voidValue], Textarea)}\r\n        <EmojiPicker formName='formPost' fieldName='postBody' Form={props.addPostForm} styles={styles} dispatch={props.dispatch} />\r\n        <button className={styles.button} type='submit' >Post</button>\r\n    </form>\r\n    }\r\n    const afterSumbit = (result, dispatch) => {\r\n        dispatch(reset('formPost'))\r\n    }\r\n    const FormPostRedux = reduxForm({\r\n        form: 'formPost',\r\n        onSubmitSuccess: afterSumbit\r\n    })(FormPost);\r\n\r\n    const mapStateToPropse = (state) => ({\r\n        addPostForm: state.form.formPost\r\n    })\r\n    const AddPostFormWithConnect = connect(mapStateToPropse)(FormPostRedux)\r\n\r\n    export default AddPostFormWithConnect;"]},"metadata":{},"sourceType":"module"}