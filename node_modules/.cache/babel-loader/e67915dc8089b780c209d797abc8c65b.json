{"ast":null,"code":"var today={hour:'numeric',minute:'numeric'};var month={day:'numeric',month:'short',hour:'numeric',minute:'numeric'};var year={day:'numeric',month:'short',hour:'numeric',minute:'numeric'};var other={month:'long',year:'numeric'};var formatTime=function formatTime(date){if(isToday(date))return date.toLocaleString(\"en-US\",today);else if(isMonth(date))return date.toLocaleString(\"en-US\",month);else if(isYear(date))return date.toLocaleString('en-US',year);return date.toLocaleString('en-US',other);};var isToday=function isToday(date){var today=new Date();return date.getDate()===today.getDate()&&date.getMonth()===today.getMonth()&&date.getFullYear()===today.getFullYear();};var isMonth=function isMonth(date){var today=new Date();return date.getMonth()===today.getMonth()&&date.getFullYear()===today.getFullYear();};var isYear=function isYear(date){var today=new Date();return date.getFullYear()===today.getFullYear();};export var formatTimeToLastMessage=function formatTimeToLastMessage(date){if(isToday(date))return date.toLocaleString(\"en-US\",today);else if(isMonth(date))return date.toLocaleString(\"en-US\",{month:'short',day:'numeric'});else if(isYear(date))return date.toLocaleString('en-US',{month:'short',day:'numeric'});return date.toLocaleString('en-US',other);};export default formatTime;","map":{"version":3,"sources":["C:/Users/WOW/Documents/GitHub/react/react-test/src/utils/timeFormat.js"],"names":["today","hour","minute","month","day","year","other","formatTime","date","isToday","toLocaleString","isMonth","isYear","Date","getDate","getMonth","getFullYear","formatTimeToLastMessage"],"mappings":"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","sourcesContent":["\r\nconst today = {\r\n    hour: 'numeric',\r\n    minute: 'numeric'\r\n}\r\nconst month = {\r\n    day: 'numeric',\r\n    month: 'short',\r\n    hour: 'numeric',\r\n    minute: 'numeric'\r\n    \r\n}\r\nconst year = {\r\n    day: 'numeric',\r\n    month: 'short',\r\n    hour: 'numeric',\r\n    minute: 'numeric'\r\n   \r\n}\r\nconst other = {\r\n    month: 'long',\r\n    year: 'numeric'\r\n}\r\n\r\n const formatTime = (date) =>{\r\n\r\n    if(isToday(date)) return date.toLocaleString(\"en-US\", today)\r\n    else if(isMonth(date)) return date.toLocaleString(\"en-US\", month)\r\n    else if(isYear(date)) return date.toLocaleString('en-US', year)\r\n    return date.toLocaleString('en-US', other)\r\n}\r\n\r\nconst isToday = (date) => {\r\n    const today = new Date()\r\n    return date.getDate() === today.getDate() &&\r\n    date.getMonth() === today.getMonth() &&\r\n    date.getFullYear() === today.getFullYear()\r\n  }\r\n  const isMonth = (date) => {\r\n    const today = new Date()\r\n    return date.getMonth() === today.getMonth() &&\r\n    date.getFullYear() === today.getFullYear()\r\n  }\r\n  const isYear = (date) => {\r\n    const today = new Date()\r\n    return date.getFullYear() === today.getFullYear()\r\n  }\r\n  export const formatTimeToLastMessage = (date) =>{\r\n    if(isToday(date)) return date.toLocaleString(\"en-US\", today)\r\n    else if(isMonth(date)) return date.toLocaleString(\"en-US\", {month: 'short', day: 'numeric'})\r\n    else if(isYear(date)) return date.toLocaleString('en-US', {month: 'short', day: 'numeric'})\r\n    return date.toLocaleString('en-US', other)\r\n}\r\n  export default formatTime"]},"metadata":{},"sourceType":"module"}