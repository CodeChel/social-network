{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\WOW\\\\Documents\\\\GitHub\\\\react\\\\react-test\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport { authAPI, securityAPI, profileAPI } from '../API/api';\nimport { stopSubmit } from 'redux-form';\nexport const SET_USER = 'auth-reducer/SET_USER';\nexport const RESET_USER = 'auth-reducer/RESET_USER';\nexport const GET_CAPTHCA_SUCCESS = 'auth-reducer/GET_CAPTHCA_SUCCESS';\nexport const SET_AVATAR = 'auth-reducer/SET_AVATAR';\nconst initialState = {\n  id: null,\n  email: null,\n  login: null,\n  isAuth: false,\n  captchaURL: null,\n  avatar: null\n};\nexport const authReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_USER:\n      return _objectSpread({}, state, {}, action.payload, {\n        isAuth: true\n      });\n\n    case GET_CAPTHCA_SUCCESS:\n      return _objectSpread({}, state, {\n        captchaURL: action.payload\n      });\n\n    case RESET_USER:\n      return _objectSpread({}, initialState);\n\n    case SET_AVATAR:\n      return _objectSpread({}, state, {}, action.payload);\n\n    default:\n      return state;\n  }\n};\nexport const setUserAuth = data => ({\n  type: SET_USER,\n  payload: _objectSpread({}, data)\n});\nexport const resetUserAuth = () => ({\n  type: RESET_USER\n});\nexport const setCaptcha = captchaURL => ({\n  type: GET_CAPTHCA_SUCCESS,\n  payload: captchaURL\n});\nexport const setAvatar = avatar => ({\n  type: SET_AVATAR,\n  payload: {\n    avatar\n  }\n});\nexport const getAuthThunk = () => async dispatch => {\n  const data = await authAPI.getAuth();\n\n  if (data.resultCode === 0) {\n    dispatch(setUserAuth(data.data));\n    const response = await profileAPI.getProfile(data.data.id);\n    dispatch(setAvatar(response.data.photos.small));\n  }\n};\nexport const logInThunk = dataForm => async dispatch => {\n  const data = await authAPI.logIn(dataForm);\n\n  if (data.resultCode === 0) {\n    dispatch(getAuthThunk(data.data));\n  } else {\n    if (data.resultCode === 10) {\n      dispatch(getCaptcha());\n    }\n\n    let messages = data.messages.length ? data.messages[0] : 'Some error';\n    dispatch(stopSubmit('login', {\n      _error: messages\n    }));\n  }\n};\nexport const getCaptcha = () => async dispatch => {\n  const response = await securityAPI.getCaptcha();\n  const captcha = response.url;\n  dispatch(setCaptcha(captcha));\n};\nexport const logOutThunk = () => async dispatch => {\n  const data = await authAPI.logOut();\n\n  if (data.resultCode === 0) {\n    dispatch(resetUserAuth());\n  }\n};\nexport default authReducer;","map":{"version":3,"sources":["C:/Users/WOW/Documents/GitHub/react/react-test/src/redux/auth-reducer.js"],"names":["authAPI","securityAPI","profileAPI","stopSubmit","SET_USER","RESET_USER","GET_CAPTHCA_SUCCESS","SET_AVATAR","initialState","id","email","login","isAuth","captchaURL","avatar","authReducer","state","action","type","payload","setUserAuth","data","resetUserAuth","setCaptcha","setAvatar","getAuthThunk","dispatch","getAuth","resultCode","response","getProfile","photos","small","logInThunk","dataForm","logIn","getCaptcha","messages","length","_error","captcha","url","logOutThunk","logOut"],"mappings":"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","sourcesContent":["import { authAPI, securityAPI, profileAPI } from '../API/api';\r\nimport { stopSubmit } from 'redux-form';\r\n\r\n\r\n\r\nexport const SET_USER = 'auth-reducer/SET_USER';\r\nexport const RESET_USER = 'auth-reducer/RESET_USER';\r\nexport const GET_CAPTHCA_SUCCESS = 'auth-reducer/GET_CAPTHCA_SUCCESS';\r\nexport const SET_AVATAR = 'auth-reducer/SET_AVATAR';\r\n\r\nconst initialState = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false,\r\n    captchaURL: null,\r\n    avatar: null\r\n}\r\n\r\nexport const authReducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n        case SET_USER:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n                isAuth: true\r\n            }\r\n        case GET_CAPTHCA_SUCCESS: \r\n            return {\r\n                ...state,\r\n                captchaURL: action.payload\r\n            }     \r\n        case RESET_USER:\r\n            return {\r\n                ...initialState\r\n            }\r\n        case SET_AVATAR:\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }    \r\n        default: return state;\r\n\r\n    }\r\n\r\n}\r\n\r\nexport const setUserAuth = (data) => ({ type: SET_USER, payload: {...data} });\r\nexport const resetUserAuth = () => ({ type: RESET_USER });\r\nexport const setCaptcha = (captchaURL) => ({ type: GET_CAPTHCA_SUCCESS, payload: captchaURL })\r\nexport const setAvatar = (avatar) => ({type: SET_AVATAR, payload: {avatar}})\r\nexport const getAuthThunk = () => async (dispatch) => {\r\n    const data =  await (authAPI.getAuth());\r\n    if ( data.resultCode === 0) {\r\n        \r\n        dispatch(setUserAuth(data.data));\r\n        const response = await profileAPI.getProfile(data.data.id);\r\n        dispatch(setAvatar(response.data.photos.small))\r\n    }\r\n\r\n}\r\nexport const logInThunk = (dataForm) => async (dispatch) => {\r\n    const data = await (authAPI.logIn(dataForm));\r\n\r\n    if (data.resultCode === 0) {\r\n        dispatch(getAuthThunk(data.data));\r\n\r\n    } else {\r\n        if(data.resultCode === 10){\r\n            dispatch(getCaptcha());\r\n        }\r\n        let messages = data.messages.length ? data.messages[0] : 'Some error';\r\n        dispatch(stopSubmit('login', { _error: messages }))\r\n    }\r\n}\r\nexport const getCaptcha = () => async (dispatch) => {\r\n   const response = await(securityAPI.getCaptcha());\r\n   const captcha = response.url;\r\n   dispatch(setCaptcha(captcha));\r\n}\r\nexport const logOutThunk = () => async (dispatch) => {\r\n    const data = await (authAPI.logOut())\r\n    if (data.resultCode === 0) {\r\n        dispatch(resetUserAuth());\r\n    }\r\n}\r\n\r\n\r\nexport default authReducer;"]},"metadata":{},"sourceType":"module"}