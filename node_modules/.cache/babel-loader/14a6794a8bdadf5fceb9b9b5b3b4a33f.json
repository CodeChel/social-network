{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\WOW\\\\Documents\\\\GitHub\\\\react\\\\react-test\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"C:\\\\Users\\\\WOW\\\\Documents\\\\GitHub\\\\react\\\\react-test\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"C:\\\\Users\\\\WOW\\\\Documents\\\\GitHub\\\\react\\\\react-test\\\\src\\\\components\\\\Profile\\\\ProfileInfo\\\\ProfileStatusWithHooks.jsx\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport styles from './profileStatus.module.css';\n\nconst ProfileStatusWithHooks = (_ref) => {\n  let isMyPage = _ref.isMyPage,\n      props = _objectWithoutProperties(_ref, [\"isMyPage\"]);\n\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        editMode = _useState2[0],\n        setEditMode = _useState2[1];\n\n  const _useState3 = useState(props.status),\n        _useState4 = _slicedToArray(_useState3, 2),\n        status = _useState4[0],\n        setStatus = _useState4[1];\n\n  let node = useRef(editMode);\n  useEffect(() => {\n    setStatus(props.status);\n  }, [props.status]);\n  useEffect(() => {});\n\n  const handleClick = e => {\n    if (node.current.contains(e.target)) {\n      return;\n    } else {\n      setEditMode(false);\n      document.removeEventListener('click', handleClick);\n    }\n  };\n\n  const changeStatus = e => {\n    setEditMode(true);\n    document.addEventListener('click', handleClick);\n  };\n\n  const outEditMode = e => {\n    console.log(e);\n\n    if (editMode) {\n      setEditMode(false);\n      setStatus(props.status);\n    }\n  };\n\n  const saveStatus = () => {\n    document.removeEventListener('click', handleClick);\n    setEditMode(false);\n    props.updateStatus(status);\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, isMyPage ? React.createElement(\"div\", {\n    className: styles.statusContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    onClick: setEditMode(true),\n    className: styles.status,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, props.status || 'set a status message')), editMode && React.createElement(\"div\", {\n    className: styles.changeStatusContainer,\n    ref: node,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    onBlur: outEditMode,\n    className: styles.inputStatus,\n    autoFocus: true,\n    onChange: e => {\n      setStatus(e.currentTarget.value);\n    },\n    value: status,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  })), React.createElement(\"button\", {\n    className: styles.saveButton,\n    onClick: setStatus(status),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, \"Save\"))) : React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, props.status ? props.status.length > 100 ? props.status.slice(0, 100) : props.status : null));\n};\n\nexport default ProfileStatusWithHooks;","map":{"version":3,"sources":["C:\\Users\\WOW\\Documents\\GitHub\\react\\react-test\\src\\components\\Profile\\ProfileInfo\\ProfileStatusWithHooks.jsx"],"names":["React","useState","useEffect","useRef","styles","ProfileStatusWithHooks","isMyPage","props","editMode","setEditMode","status","setStatus","node","handleClick","e","current","contains","target","document","removeEventListener","changeStatus","addEventListener","outEditMode","console","log","saveStatus","updateStatus","statusContainer","changeStatusContainer","inputStatus","currentTarget","value","saveButton","length","slice"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\n\r\nimport styles from './profileStatus.module.css';\r\n\r\n\r\nconst ProfileStatusWithHooks = ({ isMyPage, ...props }) => {\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [status, setStatus] = useState(props.status);\r\n\r\n    let node = ( useRef(editMode));\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status);\r\n    }, [props.status])\r\n    useEffect(()=>{\r\n\r\n    })\r\n    const handleClick = e => {\r\n        if (node.current.contains(e.target)) {\r\n            return;\r\n        }\r\n        else {\r\n            setEditMode(false)\r\n            document.removeEventListener('click', handleClick);\r\n        }  \r\n    }\r\n    const changeStatus = (e) => {\r\n        setEditMode(true);\r\n        \r\n        document.addEventListener('click', handleClick);\r\n    }\r\n    const outEditMode = (e) => {\r\n        console.log(e)\r\n        if (editMode) {\r\n            setEditMode(false);\r\n            setStatus(props.status);\r\n        }\r\n    }\r\n    const saveStatus = () => {\r\n        document.removeEventListener('click', handleClick);\r\n        setEditMode(false);\r\n        props.updateStatus(status);\r\n    }\r\n\r\n\r\n    return <div>\r\n        {isMyPage ?\r\n            <div className={styles.statusContainer} >\r\n                <div>\r\n                    <span onClick={setEditMode(true)} className={styles.status}>{props.status || 'set a status message'}</span>\r\n                </div>\r\n                {editMode && <div className={styles.changeStatusContainer} ref={node}>\r\n                    <div ><input onBlur={outEditMode} className={styles.inputStatus} autoFocus={true} onChange={(e) => { setStatus(e.currentTarget.value) }} value={status} /></div>\r\n                    <button className={styles.saveButton} onClick={setStatus(status)}>Save</button>\r\n                </div>}\r\n            </div>\r\n            : <div>\r\n                {\r\n                    props.status\r\n                        ? props.status.length > 100 ? props.status.slice(0, 100) : props.status\r\n                        : null\r\n                }\r\n            </div>\r\n        }\r\n\r\n    </div>\r\n\r\n}\r\n\r\nexport default ProfileStatusWithHooks;"]},"metadata":{},"sourceType":"module"}