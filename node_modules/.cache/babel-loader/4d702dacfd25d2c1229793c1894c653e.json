{"ast":null,"code":"import React from'react';import{reduxForm,reset}from'redux-form';import{required,maxLengthCreator,voidValue}from'../../../utils/validators/validator';import{Textarea,createField}from'../../common/FormControls/FormControls';import EmojiPicker from'./../../common/EmojiPicker/EmojiPicker';import{connect}from'react-redux';import styles from'./posts.module.css';var maxLength500=maxLengthCreator(500);var FormPost=function FormPost(props){return React.createElement(\"form\",{className:styles.formPost,onSubmit:props.handleSubmit},createField('Share your great thoughts here','postBody',[required,maxLength500,voidValue],Textarea),React.createElement(EmojiPicker,{bottom:\"70%\",right:\"0\",width:\"50%\",formName:\"formPost\",fieldName:\"postBody\",Form:props.addPostForm,styles:styles,dispatch:props.dispatch}),React.createElement(\"button\",{className:styles.button,type:\"submit\"},\"Post\"));};var afterSumbit=function afterSumbit(result,dispatch){dispatch(reset('formPost'));};var FormPostRedux=reduxForm({form:'formPost',onSubmitSuccess:afterSumbit})(FormPost);var mapStateToPropse=function mapStateToPropse(state){return{addPostForm:state.form.formPost};};var AddPostFormWithConnect=connect(mapStateToPropse)(FormPostRedux);export default AddPostFormWithConnect;","map":{"version":3,"sources":["C:/Users/WOW/Documents/GitHub/react/react-test/src/components/Profile/Posts/AddPostFormWithConnect.jsx"],"names":["React","reduxForm","reset","required","maxLengthCreator","voidValue","Textarea","createField","EmojiPicker","connect","styles","maxLength500","FormPost","props","formPost","handleSubmit","addPostForm","dispatch","button","afterSumbit","result","FormPostRedux","form","onSubmitSuccess","mapStateToPropse","state","AddPostFormWithConnect"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,SAAT,CAAoBC,KAApB,KAAiC,YAAjC,CACA,OAASC,QAAT,CAAmBC,gBAAnB,CAAqCC,SAArC,KAAsD,qCAAtD,CACA,OAASC,QAAT,CAAmBC,WAAnB,KAAsC,wCAAtC,CACA,MAAOC,CAAAA,WAAP,KAAwB,wCAAxB,CACA,OAASC,OAAT,KAAwB,aAAxB,CACA,MAAOC,CAAAA,MAAP,KAAmB,oBAAnB,CAEA,GAAMC,CAAAA,YAAY,CAAGP,gBAAgB,CAAC,GAAD,CAArC,CAEA,GAAMQ,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACC,KAAD,CAAW,CACxB,MAAO,6BAAM,SAAS,CAAEH,MAAM,CAACI,QAAxB,CAAkC,QAAQ,CAAED,KAAK,CAACE,YAAlD,EAEFR,WAAW,CAAC,gCAAD,CAAmC,UAAnC,CAA+C,CAACJ,QAAD,CAAWQ,YAAX,CAAyBN,SAAzB,CAA/C,CAAoFC,QAApF,CAFT,CAGH,oBAAC,WAAD,EAAa,MAAM,CAAC,KAApB,CAA0B,KAAK,CAAC,GAAhC,CAAqC,KAAK,CAAC,KAA3C,CACC,QAAQ,CAAC,UADV,CACqB,SAAS,CAAC,UAD/B,CAC0C,IAAI,CAAEO,KAAK,CAACG,WADtD,CACmE,MAAM,CAAEN,MAD3E,CACmF,QAAQ,CAAEG,KAAK,CAACI,QADnG,EAHG,CAKH,8BAAQ,SAAS,CAAEP,MAAM,CAACQ,MAA1B,CAAkC,IAAI,CAAC,QAAvC,SALG,CAAP,CAOC,CARL,CASI,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,MAAD,CAASH,QAAT,CAAsB,CACtCA,QAAQ,CAACf,KAAK,CAAC,UAAD,CAAN,CAAR,CACH,CAFD,CAGA,GAAMmB,CAAAA,aAAa,CAAGpB,SAAS,CAAC,CAC5BqB,IAAI,CAAE,UADsB,CAE5BC,eAAe,CAAEJ,WAFW,CAAD,CAAT,CAGnBP,QAHmB,CAAtB,CAKA,GAAMY,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACC,KAAD,QAAY,CACjCT,WAAW,CAAES,KAAK,CAACH,IAAN,CAAWR,QADS,CAAZ,EAAzB,CAGA,GAAMY,CAAAA,sBAAsB,CAAGjB,OAAO,CAACe,gBAAD,CAAP,CAA0BH,aAA1B,CAA/B,CAEA,cAAeK,CAAAA,sBAAf","sourcesContent":["import React from 'react'\r\nimport { reduxForm, reset } from 'redux-form'\r\nimport { required, maxLengthCreator, voidValue } from '../../../utils/validators/validator'\r\nimport { Textarea, createField } from '../../common/FormControls/FormControls'\r\nimport EmojiPicker from './../../common/EmojiPicker/EmojiPicker'\r\nimport { connect } from 'react-redux'\r\nimport styles from './posts.module.css'\r\n\r\nconst maxLength500 = maxLengthCreator(500)\r\n\r\nconst FormPost = (props) => {\r\n    return <form className={styles.formPost} onSubmit={props.handleSubmit}>\r\n\r\n        {createField('Share your great thoughts here', 'postBody', [required, maxLength500, voidValue], Textarea)}\r\n        <EmojiPicker bottom='70%' right='0'  width='50%'\r\n         formName='formPost' fieldName='postBody' Form={props.addPostForm} styles={styles} dispatch={props.dispatch} />\r\n        <button className={styles.button} type='submit' >Post</button>\r\n    </form>\r\n    }\r\n    const afterSumbit = (result, dispatch) => {\r\n        dispatch(reset('formPost'))\r\n    }\r\n    const FormPostRedux = reduxForm({\r\n        form: 'formPost',\r\n        onSubmitSuccess: afterSumbit\r\n    })(FormPost)\r\n\r\n    const mapStateToPropse = (state) => ({\r\n        addPostForm: state.form.formPost\r\n    })\r\n    const AddPostFormWithConnect = connect(mapStateToPropse)(FormPostRedux)\r\n\r\n    export default AddPostFormWithConnect"]},"metadata":{},"sourceType":"module"}