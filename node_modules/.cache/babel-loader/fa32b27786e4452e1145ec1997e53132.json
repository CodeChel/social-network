{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\WOW\\\\Documents\\\\GitHub\\\\react\\\\react-test\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport { authAPI, securityAPI, profileAPI } from '../API/api';\nimport { stopSubmit } from 'redux-form';\nimport { async } from 'q';\nconst SET_USER = 'auth-reducer/SET_USER';\nconst RESET_USER = 'auth-reducer/RESET_USER';\nconst GET_CAPTHCA_SUCCESS = 'auth-reducer/GET_CAPTHCA_SUCCESS';\nconst SET_AVATAR = 'auth-reducer/SET_AVATAR';\nlet initialState = {\n  id: null,\n  email: null,\n  login: null,\n  isAuth: false,\n  captchaURL: null,\n  avatar: null\n};\n\nconst authReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_USER:\n      return _objectSpread({}, state, action.data, {\n        isAuth: true\n      });\n\n    case GET_CAPTHCA_SUCCESS:\n      return _objectSpread({}, state, action.payload);\n\n    case RESET_USER:\n      return {\n        initialState\n      };\n\n    case SET_AVATAR:\n      return _objectSpread({}, state, {\n        avatar: action.avatar\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport const setUserAuth = data => ({\n  type: SET_USER,\n  data\n});\nexport const resetUserAuth = () => ({\n  type: RESET_USER\n});\nexport const setCaptcha = captchaURL => ({\n  type: GET_CAPTHCA_SUCCESS,\n  payload: {\n    captchaURL\n  }\n});\nexport const setAvatar = avatar => ({\n  type: SET_AVATAR,\n  avatar\n});\nexport const getAuthThunk = () => async dispatch => {\n  const data = await authAPI.getAuth();\n\n  if (data.resultCode === 0) {\n    dispatch(setUserAuth(data.data));\n  }\n};\nexport const logInThunk = dataForm => async dispatch => {\n  const data = await authAPI.logIn(dataForm);\n\n  if (data.resultCode === 0) {\n    dispatch(getAuthThunk(data.data));\n  } else {\n    if (data.resultCode === 10) {\n      dispatch(getCaptcha());\n    }\n\n    let messages = data.messages.length ? data.messages[0] : 'Some error';\n    dispatch(stopSubmit('login', {\n      _error: messages\n    }));\n  }\n};\nexport const getCaptcha = () => async dispatch => {\n  const response = await securityAPI.getCaptcha();\n  const captcha = response.url;\n  dispatch(setCaptcha(captcha));\n};\nexport const logOutThunk = () => async dispatch => {\n  const data = await authAPI.logOut();\n\n  if (data.resultCode === 0) {\n    dispatch(resetUserAuth());\n  }\n};\nexport const getUserPhoto = id => async dispatch => {\n  const profile = await profileAPI.getProfile(id);\n  debugger;\n  dispatch(setAvatar(profile.data.photos.small));\n};\nexport default authReducer;","map":{"version":3,"sources":["C:\\Users\\WOW\\Documents\\GitHub\\react\\react-test\\src\\redux\\auth-reducer.js"],"names":["authAPI","securityAPI","profileAPI","stopSubmit","async","SET_USER","RESET_USER","GET_CAPTHCA_SUCCESS","SET_AVATAR","initialState","id","email","login","isAuth","captchaURL","avatar","authReducer","state","action","type","data","payload","setUserAuth","resetUserAuth","setCaptcha","setAvatar","getAuthThunk","dispatch","getAuth","resultCode","logInThunk","dataForm","logIn","getCaptcha","messages","length","_error","response","captcha","url","logOutThunk","logOut","getUserPhoto","profile","getProfile","photos","small"],"mappings":"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","sourcesContent":["import { authAPI, securityAPI, profileAPI } from '../API/api';\r\nimport { stopSubmit } from 'redux-form';\r\nimport { async } from 'q';\r\n\r\n\r\nconst SET_USER = 'auth-reducer/SET_USER';\r\nconst RESET_USER = 'auth-reducer/RESET_USER';\r\nconst GET_CAPTHCA_SUCCESS = 'auth-reducer/GET_CAPTHCA_SUCCESS';\r\nconst SET_AVATAR = 'auth-reducer/SET_AVATAR';\r\n\r\nlet initialState = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false,\r\n    captchaURL: null,\r\n    avatar: null\r\n}\r\n\r\nconst authReducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n        case SET_USER:\r\n            return {\r\n                ...state,\r\n                ...action.data,\r\n                isAuth: true\r\n            }\r\n        case GET_CAPTHCA_SUCCESS: \r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }     \r\n        case RESET_USER:\r\n            return {\r\n                initialState\r\n            }\r\n        case SET_AVATAR:\r\n            return {\r\n                ...state,\r\n                avatar: action.avatar\r\n            }    \r\n        default: return state;\r\n\r\n    }\r\n\r\n}\r\n\r\nexport const setUserAuth = (data) => ({ type: SET_USER, data });\r\nexport const resetUserAuth = () => ({ type: RESET_USER });\r\nexport const setCaptcha = (captchaURL) => ({ type: GET_CAPTHCA_SUCCESS, payload: {captchaURL} })\r\nexport const setAvatar = (avatar) => ({type: SET_AVATAR, avatar})\r\nexport const getAuthThunk = () => async (dispatch) => {\r\n    const data = await (authAPI.getAuth());\r\n    if (data.resultCode === 0) {\r\n        dispatch(setUserAuth(data.data));\r\n    }\r\n\r\n}\r\nexport const logInThunk = (dataForm) => async (dispatch) => {\r\n    const data = await (authAPI.logIn(dataForm));\r\n\r\n    if (data.resultCode === 0) {\r\n        dispatch(getAuthThunk(data.data));\r\n    } else {\r\n        if(data.resultCode === 10){\r\n            dispatch(getCaptcha());\r\n        }\r\n        let messages = data.messages.length ? data.messages[0] : 'Some error';\r\n        dispatch(stopSubmit('login', { _error: messages }))\r\n    }\r\n}\r\nexport const getCaptcha = () => async (dispatch) => {\r\n   const response = await(securityAPI.getCaptcha());\r\n   const captcha = response.url;\r\n   dispatch(setCaptcha(captcha));\r\n}\r\nexport const logOutThunk = () => async (dispatch) => {\r\n    const data = await (authAPI.logOut())\r\n    if (data.resultCode === 0) {\r\n        dispatch(resetUserAuth());\r\n    }\r\n}\r\nexport const getUserPhoto = (id) => async(dispatch) =>{\r\n   const profile = await profileAPI.getProfile(id);\r\n   debugger;\r\n   dispatch(setAvatar(profile.data.photos.small))\r\n}\r\n\r\n\r\nexport default authReducer;"]},"metadata":{},"sourceType":"module"}