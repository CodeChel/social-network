{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\WOW\\\\Documents\\\\GitHub\\\\react\\\\react-test\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"C:\\\\Users\\\\WOW\\\\Documents\\\\GitHub\\\\react\\\\react-test\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"C:\\\\Users\\\\WOW\\\\Documents\\\\GitHub\\\\react\\\\react-test\\\\src\\\\components\\\\Messages-container\\\\Messages\\\\Messages.jsx\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport styles from './Messages.module.css';\nimport DialogWithUser from '../DialogsList/DialogWithUser';\nimport Dialog from './Dialog';\n\nconst Messages = (_ref) => {\n  let dialogItemsData = _ref.dialogItemsData,\n      currentDialogId = _ref.currentDialogId,\n      search = _ref.search,\n      dialogsFromSearch = _ref.dialogsFromSearch,\n      props = _objectWithoutProperties(_ref, [\"dialogItemsData\", \"currentDialogId\", \"search\", \"dialogsFromSearch\"]);\n\n  const _useState = useState(null),\n        _useState2 = _slicedToArray(_useState, 2),\n        searchWord = _useState2[0],\n        setSearchWord = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        isSearchMode = _useState4[0],\n        setSearchMode = _useState4[1];\n\n  const searchInput = useEffect();\n  const dialogList = useEffect();\n  useEffect(() => {\n    return () => {\n      document.removeEventListener('click', outSearh);\n    };\n  }, []);\n\n  const handleSearch = e => {\n    const word = e.currentTarget.value;\n    setSearchWord(word);\n\n    if (word && word.trim() !== '') {\n      search(word);\n      setSearchMode(true);\n      document.addEventListener('click', outSearh);\n    }\n  };\n\n  const outSearh = e => {\n    if (e.target !== dialogList.current && e.target !== searchInput.current) {\n      setSearchMode(false);\n      setSearchWord('');\n    }\n\n    document.removeEventListener('click', outSearh);\n  };\n\n  const dialogItems = dialogItemsData.map((item, index) => React.createElement(DialogWithUser, {\n    currentDialogId: currentDialogId,\n    avatar: item.avatar,\n    lastMessage: item.messages[item.messages.length - 1].message,\n    setDialogID: props.setDialogID,\n    key: index + 1,\n    name: item.name,\n    id: item.userId,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }));\n  const dialogItemsSearch = isSearchMode && dialogsFromSearch.map((item, index) => React.createElement(DialogWithUser, {\n    isSearchMode: isSearchMode,\n    currentDialogId: currentDialogId,\n    avatar: item.avatar,\n    outSearh: outSearh,\n    lastMessage: item.messages[item.messages.length - 1].message,\n    setDialogID: props.setDialogID,\n    key: index + 1,\n    name: item.name,\n    id: item.userId,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }));\n  const currentDialog = dialogItemsData[dialogItemsData.findIndex(i => {\n    return i.userId === currentDialogId;\n  })];\n  return React.createElement(\"div\", {\n    className: styles.messages,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, currentDialogId === 0 ? React.createElement(\"div\", {\n    className: styles.emptyMessages,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: styles.iconMessage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: styles.selectDialog,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, \"Please select a dialog\")) : React.createElement(Dialog, {\n    isSearchMode: isSearchMode,\n    userId: currentDialog.userId,\n    sendMessage: props.sendMessage,\n    name: currentDialog.name,\n    avatar: currentDialog.avatar,\n    messages: currentDialog.messages,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: styles.dialogItems,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: styles.dialogSearch,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    placeholder: \"Search\",\n    ref: searchInput,\n    className: styles.searchInput,\n    value: searchWord,\n    onChange: e => handleSearch(e),\n    type: \"text\",\n    name: \"\",\n    id: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: styles.dialogsList,\n    ref: dialogList,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, isSearchMode ? dialogItemsSearch : dialogItems)));\n};\n\nexport default Messages;","map":{"version":3,"sources":["C:\\Users\\WOW\\Documents\\GitHub\\react\\react-test\\src\\components\\Messages-container\\Messages\\Messages.jsx"],"names":["React","useEffect","useRef","useState","styles","DialogWithUser","Dialog","Messages","dialogItemsData","currentDialogId","search","dialogsFromSearch","props","searchWord","setSearchWord","isSearchMode","setSearchMode","searchInput","dialogList","document","removeEventListener","outSearh","handleSearch","e","word","currentTarget","value","trim","addEventListener","target","current","dialogItems","map","item","index","avatar","messages","length","message","setDialogID","name","userId","dialogItemsSearch","currentDialog","findIndex","i","emptyMessages","iconMessage","selectDialog","sendMessage","dialogSearch","dialogsList"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\r\n\r\nimport styles from './Messages.module.css'\r\nimport DialogWithUser from '../DialogsList/DialogWithUser'\r\nimport Dialog from './Dialog'\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst Messages = ({ dialogItemsData, currentDialogId, search, dialogsFromSearch, ...props }) => {\r\n    const [searchWord, setSearchWord] = useState(null);\r\n    const [isSearchMode, setSearchMode] = useState(false);\r\n    const searchInput = useEffect();\r\n    const dialogList = useEffect();\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            document.removeEventListener('click', outSearh)\r\n        }\r\n    }, [])\r\n\r\n    const handleSearch = (e) => {\r\n        const word = e.currentTarget.value;\r\n        setSearchWord(word);\r\n        if (word && word.trim() !== '') {\r\n            search(word);\r\n            setSearchMode(true);\r\n            document.addEventListener('click', outSearh)\r\n        }\r\n    }\r\n    const outSearh = (e) => {\r\n        if (e.target !== dialogList.current && e.target !== searchInput.current) {\r\n            setSearchMode(false);\r\n            setSearchWord('');\r\n        }\r\n        document.removeEventListener('click', outSearh)\r\n\r\n    }\r\n\r\n\r\n    const dialogItems = dialogItemsData.map((item, index) => <DialogWithUser currentDialogId={currentDialogId} avatar={item.avatar}\r\n        lastMessage={item.messages[item.messages.length - 1].message} setDialogID={props.setDialogID} key={index + 1} name={item.name} id={item.userId} />)\r\n    const dialogItemsSearch = isSearchMode && dialogsFromSearch.map((item, index) => <DialogWithUser isSearchMode={isSearchMode}\r\n        currentDialogId={currentDialogId} avatar={item.avatar} outSearh={outSearh}\r\n        lastMessage={item.messages[item.messages.length - 1].message} setDialogID={props.setDialogID} key={index + 1} name={item.name} id={item.userId} />)\r\n    const currentDialog = dialogItemsData[dialogItemsData.findIndex((i) => { return i.userId === currentDialogId })];\r\n\r\n\r\n    return <div className={styles.messages} >\r\n\r\n        {currentDialogId === 0\r\n            ? <div className={styles.emptyMessages}>\r\n                <div className={styles.iconMessage}></div>\r\n                <div className={styles.selectDialog}>\r\n                    Please select a dialog\r\n                </div>\r\n            </div>\r\n            : <Dialog isSearchMode={isSearchMode} userId={currentDialog.userId} sendMessage={props.sendMessage} name={currentDialog.name}\r\n                avatar={currentDialog.avatar} messages={currentDialog.messages} />}\r\n\r\n        <div className={styles.dialogItems}>\r\n            <div className={styles.dialogSearch}><input placeholder='Search' ref={searchInput}\r\n                className={styles.searchInput} value={searchWord} onChange={e => handleSearch(e)} type=\"text\" name=\"\" id=\"\" /></div>\r\n            <div className={styles.dialogsList} ref={dialogList}>\r\n                {isSearchMode ? dialogItemsSearch : dialogItems}\r\n\r\n            </div>\r\n        </div>\r\n\r\n    </div>\r\n}\r\n\r\n\r\nexport default Messages;"]},"metadata":{},"sourceType":"module"}