{"ast":null,"code":"import _objectWithoutProperties from \"C:\\\\Users\\\\WOW\\\\Documents\\\\GitHub\\\\react\\\\react-test\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"C:\\\\Users\\\\WOW\\\\Documents\\\\GitHub\\\\react\\\\react-test\\\\src\\\\components\\\\Messages-container\\\\Messages\\\\DialogSession.jsx\";\nimport React, { useEffect, useRef } from 'react';\nimport MessageItem from './MessageItem/MessageItem';\nimport styles from './Messages.module.css';\nimport ScrollbarHOC from '../../common/HOCScrollBar/HOCScrollbarCusctom';\nimport { NavLink } from 'react-router-dom';\nimport avatar from '../../../assets/img/ava.jpg';\nimport AddMessageFormWithConnect from './AddMessageFormWithConnect';\nimport Preloader from '../../common/Preloader/Preloader';\nimport EmptyDialogMessages from './EmpyDialogSession';\n\nconst DialogSession = (_ref) => {\n  let currentDialog = _ref.currentDialog,\n      props = _objectWithoutProperties(_ref, [\"currentDialog\"]);\n\n  return currentDialog ? React.createElement(DialogSessionWithHistory, {\n    currentDialog: currentDialog,\n    props: props,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }) : React.createElement(DialogSessionWithOutHistory, Object.assign({}, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }));\n};\n\nexport default DialogSession;\n\nconst DialogSessionWithHistory = (_ref2) => {\n  let currentDialog = _ref2.currentDialog,\n      props = _objectWithoutProperties(_ref2, [\"currentDialog\"]);\n\n  const messageItems = currentDialog.messages.map((item, index) => React.createElement(MessageItem, {\n    time: item.timeFormat,\n    key: index,\n    right: item.right,\n    message: item.message,\n    id: item.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }));\n  const scrollBar = useRef();\n  useEffect(() => {\n    !props.isSearchMode && document.querySelector(\"textarea[name=message\".concat(props.userId, \"]\")).focus();\n  });\n  useEffect(() => {\n    scrollBar.current.scrollToBottom();\n  }, [messageItems]);\n  return React.createElement(\"div\", {\n    className: styles.dialog,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: styles.dialogHead,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: styles.avatarContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, React.createElement(NavLink, {\n    to: \"/profile/\".concat(props.userId),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    className: styles.avatar,\n    src: currentDialog.avatar,\n    alt: \"avatar\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }))), React.createElement(\"span\", {\n    className: styles.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, React.createElement(NavLink, {\n    to: \"/profile/\".concat(props.userId),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, currentDialog.name))), React.createElement(ScrollbarHOC, {\n    children: React.createElement(\"div\", {\n      className: styles.messagesFill,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, messageItems),\n    ref: scrollBar,\n    removeTrackYWhenNotUsed: true,\n    style: {\n      width: \"100%\",\n      height: \"75%\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: styles.formContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, React.createElement(AddMessageFormWithConnect, {\n    userId: props.userId,\n    name: currentDialog.name,\n    onSubmit: data => {\n      props.sendMessage(data[\"message\".concat(props.userId)], props.userId);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  })));\n};\n\nconst DialogSessionWithOutHistory = (_ref3) => {\n  let getUserForMessages = _ref3.getUserForMessages,\n      setUserForMessages = _ref3.setUserForMessages,\n      props = _objectWithoutProperties(_ref3, [\"getUserForMessages\", \"setUserForMessages\"]);\n\n  useEffect(() => {\n    debugger;\n    getUserForMessages(props.userId);\n    return () => {\n      setUserForMessages(null);\n    };\n  }, [props.userId, getUserForMessages, setUserForMessages]);\n  return props.isFetching ? React.createElement(Preloader, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }) : !props.userForMessage ? React.createElement(EmptyDialogMessages, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }) : React.createElement(\"div\", {\n    className: styles.dialog,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: styles.dialogHead,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: styles.avatarContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, React.createElement(NavLink, {\n    to: \"/profile/\".concat(props.userId),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    className: styles.avatar,\n    src: props.userForMessage.photo || avatar,\n    alt: \"avatar\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }))), React.createElement(\"span\", {\n    className: styles.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, React.createElement(NavLink, {\n    to: \"/profile/\".concat(props.userId),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, props.userForMessage.name))), React.createElement(\"div\", {\n    className: styles.newChat,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: styles.emptyChatText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, \"Yet no messages with \", props.userForMessage.name), \" \"), React.createElement(\"div\", {\n    className: styles.formContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, React.createElement(AddMessageFormWithConnect, {\n    userId: props.userId,\n    name: props.userForMessage.name,\n    onSubmit: data => {\n      props.sendMessage(data[\"message\".concat(props.userId)], props.userId);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  })));\n};","map":{"version":3,"sources":["C:\\Users\\WOW\\Documents\\GitHub\\react\\react-test\\src\\components\\Messages-container\\Messages\\DialogSession.jsx"],"names":["React","useEffect","useRef","MessageItem","styles","ScrollbarHOC","NavLink","avatar","AddMessageFormWithConnect","Preloader","EmptyDialogMessages","DialogSession","currentDialog","props","DialogSessionWithHistory","messageItems","messages","map","item","index","timeFormat","right","message","id","scrollBar","isSearchMode","document","querySelector","userId","focus","current","scrollToBottom","dialog","dialogHead","avatarContainer","name","messagesFill","width","height","formContainer","data","sendMessage","DialogSessionWithOutHistory","getUserForMessages","setUserForMessages","isFetching","userForMessage","photo","newChat","emptyChatText"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef} from 'react'\r\n\r\nimport MessageItem from './MessageItem/MessageItem'\r\nimport styles from './Messages.module.css'\r\n\r\nimport ScrollbarHOC from '../../common/HOCScrollBar/HOCScrollbarCusctom';\r\nimport { NavLink } from 'react-router-dom';\r\nimport avatar from '../../../assets/img/ava.jpg'\r\n\r\n\r\n\r\n\r\nimport AddMessageFormWithConnect from './AddMessageFormWithConnect'\r\nimport Preloader from '../../common/Preloader/Preloader';\r\nimport EmptyDialogMessages from './EmpyDialogSession';\r\n\r\n\r\nconst DialogSession = ({currentDialog, ...props}) => {\r\n    return currentDialog\r\n    ? <DialogSessionWithHistory currentDialog={currentDialog} props={props}/>\r\n    : <DialogSessionWithOutHistory {...props}/>\r\n    \r\n    \r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default DialogSession;\r\n\r\nconst DialogSessionWithHistory = ({currentDialog, ...props}) =>{\r\n    \r\n    const messageItems = currentDialog.messages.map((item, index) => <MessageItem time={item.timeFormat} key={index} right={item.right} message={item.message} id={item.id} />)\r\n\r\n    const scrollBar = useRef()\r\n    \r\n    useEffect(() => {\r\n        !props.isSearchMode && document.querySelector(`textarea[name=message${props.userId}]`).focus()\r\n    })\r\n\r\n    useEffect(() => {\r\n        scrollBar.current.scrollToBottom()\r\n    }, [messageItems])\r\n\r\n    return <div className={styles.dialog}>\r\n        <div className={styles.dialogHead}>\r\n            <div className={styles.avatarContainer}>\r\n                <NavLink to={`/profile/${props.userId}`}>\r\n                    <img className={styles.avatar} src={currentDialog.avatar} alt=\"avatar\" />\r\n                </NavLink>\r\n            </div>\r\n            <span className={styles.name}>\r\n                <NavLink to={`/profile/${props.userId}`}>\r\n                    {currentDialog.name}\r\n                </NavLink>\r\n            </span>\r\n        </div>\r\n        <ScrollbarHOC children={<div className={styles.messagesFill}>{messageItems}</div>}  ref={scrollBar} removeTrackYWhenNotUsed={true} style={{ width: \"100%\", height: \"75%\" }} />\r\n\r\n        <div className={styles.formContainer}>\r\n            <AddMessageFormWithConnect userId={props.userId} name={currentDialog.name} onSubmit={(data) => { props.sendMessage(data[`message${props.userId}`], props.userId) }} />\r\n        </div>\r\n    </div>\r\n    \r\n}\r\nconst DialogSessionWithOutHistory = ({getUserForMessages, setUserForMessages, ...props}) => {\r\n    useEffect(()=>{\r\n        debugger;\r\n        getUserForMessages(props.userId)\r\n        return ()=>{\r\n            setUserForMessages(null)\r\n        }\r\n    },[props.userId,getUserForMessages, setUserForMessages ])\r\n     \r\n    return props.isFetching ?\r\n           <Preloader />\r\n           : !props.userForMessage \r\n                ? <EmptyDialogMessages />\r\n                : <div className={styles.dialog}>\r\n                    <div className={styles.dialogHead}>\r\n                        <div className={styles.avatarContainer}>\r\n                            <NavLink to={`/profile/${props.userId}`}>\r\n                                <img className={styles.avatar} src={props.userForMessage.photo || avatar}  alt=\"avatar\" />\r\n                            </NavLink>\r\n                        </div>\r\n                        <span className={styles.name}>\r\n                            <NavLink to={`/profile/${props.userId}`}>\r\n                                {props.userForMessage.name}\r\n                            </NavLink>\r\n                        </span>\r\n                    </div>\r\n                    <div className={styles.newChat}><div className={styles.emptyChatText}>\r\n                        Yet no messages with {props.userForMessage.name}\r\n                    </div> </div>\r\n\r\n                    <div className={styles.formContainer}>\r\n                        <AddMessageFormWithConnect userId={props.userId} name={props.userForMessage.name} onSubmit={(data) => { props.sendMessage(data[`message${props.userId}`], props.userId) }} />\r\n                    </div>\r\n                </div>\r\n}"]},"metadata":{},"sourceType":"module"}