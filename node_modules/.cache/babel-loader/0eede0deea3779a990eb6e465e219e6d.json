{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\WOW\\\\Documents\\\\GitHub\\\\react\\\\react-test\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"C:\\\\Users\\\\WOW\\\\Documents\\\\GitHub\\\\react\\\\react-test\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"C:\\\\Users\\\\WOW\\\\Documents\\\\GitHub\\\\react\\\\react-test\\\\src\\\\components\\\\Profile\\\\ProfileInfo\\\\ProfileStatusWithHooks.jsx\";\nimport React, { useState, useEffect, createRef } from 'react';\nimport styles from './profileStatus.module.css';\nimport { EmojiPickerStatus } from '../../common/EmojiPicker/EmojiPicker';\n\nconst ProfileStatusWithHooks = (_ref) => {\n  let updateStatus = _ref.updateStatus,\n      isMyPage = _ref.isMyPage,\n      props = _objectWithoutProperties(_ref, [\"updateStatus\", \"isMyPage\"]);\n\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        editMode = _useState2[0],\n        setEditMode = _useState2[1];\n\n  const _useState3 = useState(props.status),\n        _useState4 = _slicedToArray(_useState3, 2),\n        status = _useState4[0],\n        setStatus = _useState4[1];\n\n  const nodeStatus = createRef();\n\n  const handlerClick = e => {\n    if (e.target !== nodeStatus.current && !(nodeStatus.current && nodeStatus.current.contains(e.target))) {\n      setEditMode(false);\n      setStatus(props.status);\n      document.removeEventListener('click', handlerClick);\n    }\n  };\n\n  useEffect(() => {\n    debugger;\n\n    if (nodeStatus.current) {\n      document.addEventListener('click', handlerClick);\n    } else {\n      document.removeEventListener('click', handlerClick);\n    }\n\n    return () => {\n      document.removeEventListener('click', handlerClick);\n    };\n  }, [nodeStatus]);\n  useEffect(() => {\n    setStatus(props.status);\n  }, [props.status]);\n\n  const outEditMode = e => {\n    updateStatus(status);\n    setEditMode(false);\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, isMyPage ? React.createElement(\"div\", {\n    className: styles.statusContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    onClick: () => {\n      setEditMode(true);\n    },\n    className: styles.status,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, props.status || 'set a status message')), editMode && React.createElement(\"div\", {\n    className: styles.changeStatusContainer,\n    ref: nodeStatus,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    className: styles.inputStatus,\n    autoFocus: true,\n    onChange: e => {\n      setStatus(e.currentTarget.value);\n    },\n    value: status,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  })), React.createElement(EmojiPickerStatus, {\n    status: status,\n    setStatus: setStatus,\n    styles: styles,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    className: styles.saveButton,\n    onClick: () => {\n      outEditMode();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, \"Save\"))) : React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, props.status ? props.status.length > 100 ? props.status.slice(0, 100) : props.status : null));\n};\n\nexport default ProfileStatusWithHooks;","map":{"version":3,"sources":["C:\\Users\\WOW\\Documents\\GitHub\\react\\react-test\\src\\components\\Profile\\ProfileInfo\\ProfileStatusWithHooks.jsx"],"names":["React","useState","useEffect","createRef","styles","EmojiPickerStatus","ProfileStatusWithHooks","updateStatus","isMyPage","props","editMode","setEditMode","status","setStatus","nodeStatus","handlerClick","e","target","current","contains","document","removeEventListener","addEventListener","outEditMode","statusContainer","changeStatusContainer","inputStatus","currentTarget","value","saveButton","length","slice"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,SAArC,QAAsD,OAAtD;AAEA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,SAAQC,iBAAR,QAAgC,sCAAhC;;AAEA,MAAMC,sBAAsB,GAAG,UAA0C;AAAA,MAAvCC,YAAuC,QAAvCA,YAAuC;AAAA,MAAzBC,QAAyB,QAAzBA,QAAyB;AAAA,MAAZC,KAAY;;AAAA,oBACrCR,QAAQ,CAAC,KAAD,CAD6B;AAAA;AAAA,QAC9DS,QAD8D;AAAA,QACpDC,WADoD;;AAAA,qBAEzCV,QAAQ,CAACQ,KAAK,CAACG,MAAP,CAFiC;AAAA;AAAA,QAE9DA,MAF8D;AAAA,QAEtDC,SAFsD;;AAIrE,QAAMC,UAAU,GAAIX,SAAS,EAA7B;;AACA,QAAMY,YAAY,GAAIC,CAAD,IAAO;AAExB,QAAIA,CAAC,CAACC,MAAF,KAAaH,UAAU,CAACI,OAAxB,IAAoC,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACI,OAAX,CAAmBC,QAAnB,CAA4BH,CAAC,CAACC,MAA9B,CAAxB,CAAxC,EAAyG;AACrGN,MAAAA,WAAW,CAAC,KAAD,CAAX;AACAE,MAAAA,SAAS,CAACJ,KAAK,CAACG,MAAP,CAAT;AACAQ,MAAAA,QAAQ,CAACC,mBAAT,CAA6B,OAA7B,EAAsCN,YAAtC;AACH;AACJ,GAPD;;AASAb,EAAAA,SAAS,CAAC,MAAM;AACZ;;AACA,QAAIY,UAAU,CAACI,OAAf,EAAwB;AACpBE,MAAAA,QAAQ,CAACE,gBAAT,CAA0B,OAA1B,EAAmCP,YAAnC;AACH,KAFD,MAGK;AACDK,MAAAA,QAAQ,CAACC,mBAAT,CAA6B,OAA7B,EAAsCN,YAAtC;AACH;;AACD,WAAO,MAAM;AACTK,MAAAA,QAAQ,CAACC,mBAAT,CAA6B,OAA7B,EAAsCN,YAAtC;AAEH,KAHD;AAIH,GAZQ,EAYN,CAACD,UAAD,CAZM,CAAT;AAcAZ,EAAAA,SAAS,CAAC,MAAM;AACZW,IAAAA,SAAS,CAACJ,KAAK,CAACG,MAAP,CAAT;AACH,GAFQ,EAEN,CAACH,KAAK,CAACG,MAAP,CAFM,CAAT;;AAIA,QAAMW,WAAW,GAAIP,CAAD,IAAO;AACvBT,IAAAA,YAAY,CAACK,MAAD,CAAZ;AACAD,IAAAA,WAAW,CAAC,KAAD,CAAX;AAEH,GAJD;;AAQA,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACFH,QAAQ,GACJ;AAAK,IAAA,SAAS,EAAEJ,MAAM,CAACoB,eAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAM,IAAA,OAAO,EAAE,MAAM;AAAEb,MAAAA,WAAW,CAAC,IAAD,CAAX;AAAmB,KAA1C;AAA4C,IAAA,SAAS,EAAEP,MAAM,CAACQ,MAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAuEH,KAAK,CAACG,MAAN,IAAgB,sBAAvF,CADJ,CADH,EAIIF,QAAQ,IACT;AAAK,IAAA,SAAS,EAAEN,MAAM,CAACqB,qBAAvB;AAA8C,IAAA,GAAG,EAAEX,UAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAM;AAAO,IAAA,SAAS,EAAEV,MAAM,CAACsB,WAAzB;AAAsC,IAAA,SAAS,EAAE,IAAjD;AAAuD,IAAA,QAAQ,EAAGV,CAAD,IAAO;AAAEH,MAAAA,SAAS,CAACG,CAAC,CAACW,aAAF,CAAgBC,KAAjB,CAAT;AAAkC,KAA5G;AAA8G,IAAA,KAAK,EAAEhB,MAArH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAN,CADL,EAEK,oBAAC,iBAAD;AAAmB,IAAA,MAAM,EAAEA,MAA3B;AAAmC,IAAA,SAAS,EAAEC,SAA9C;AAAyD,IAAA,MAAM,EAAET,MAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFL,EAGI;AAAQ,IAAA,SAAS,EAAEA,MAAM,CAACyB,UAA1B;AAAsC,IAAA,OAAO,EAAE,MAAM;AAAEN,MAAAA,WAAW;AAAI,KAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHJ,CALH,CADI,GAYH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEMd,KAAK,CAACG,MAAN,GACMH,KAAK,CAACG,MAAN,CAAakB,MAAb,GAAsB,GAAtB,GAA4BrB,KAAK,CAACG,MAAN,CAAamB,KAAb,CAAmB,CAAnB,EAAsB,GAAtB,CAA5B,GAAyDtB,KAAK,CAACG,MADrE,GAEM,IAJZ,CAbH,CAAP;AAwBH,CAhED;;AAkEA,eAAeN,sBAAf","sourcesContent":["import React, { useState, useEffect, createRef } from 'react';\r\n\r\nimport styles from './profileStatus.module.css';\r\nimport {EmojiPickerStatus} from '../../common/EmojiPicker/EmojiPicker'\r\n\r\nconst ProfileStatusWithHooks = ({ updateStatus, isMyPage, ...props }) => {\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [status, setStatus] = useState(props.status);\r\n\r\n    const nodeStatus = (createRef());\r\n    const handlerClick = (e) => {\r\n            \r\n        if (e.target !== nodeStatus.current &&  !(nodeStatus.current && nodeStatus.current.contains(e.target) )) {\r\n            setEditMode(false);\r\n            setStatus(props.status);\r\n            document.removeEventListener('click', handlerClick);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        debugger;\r\n        if (nodeStatus.current) {\r\n            document.addEventListener('click', handlerClick)\r\n        }\r\n        else {\r\n            document.removeEventListener('click', handlerClick)\r\n        }\r\n        return () => {\r\n            document.removeEventListener('click', handlerClick)\r\n\r\n        }\r\n    }, [nodeStatus])\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status);\r\n    }, [props.status])\r\n\r\n    const outEditMode = (e) => {\r\n        updateStatus(status);\r\n        setEditMode(false);\r\n\r\n    }\r\n\r\n\r\n\r\n    return <div>\r\n        {isMyPage \r\n            ?<div className={styles.statusContainer} >\r\n                <div>\r\n                    <span onClick={() => { setEditMode(true) }} className={styles.status}>{props.status || 'set a status message'}</span>\r\n                </div>\r\n                {editMode && \r\n                <div className={styles.changeStatusContainer} ref={nodeStatus}>\r\n                     <div ><input className={styles.inputStatus} autoFocus={true} onChange={(e) => { setStatus(e.currentTarget.value) }} value={status} /></div>\r\n                     <EmojiPickerStatus status={status} setStatus={setStatus} styles={styles}/> \r\n                    <button className={styles.saveButton} onClick={() => { outEditMode() }}>Save</button>\r\n                </div>}\r\n            </div>\r\n            : <div>\r\n                {\r\n                    props.status\r\n                        ? props.status.length > 100 ? props.status.slice(0, 100) : props.status\r\n                        : null\r\n                }\r\n            </div>\r\n        }\r\n\r\n    </div>\r\n\r\n}\r\n\r\nexport default ProfileStatusWithHooks;"]},"metadata":{},"sourceType":"module"}