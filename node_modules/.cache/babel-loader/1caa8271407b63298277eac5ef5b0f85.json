{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\WOW\\\\Documents\\\\GitHub\\\\react\\\\react-test\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport { profileAPI } from '../API/api';\nimport { async } from 'q';\nconst SEND_POST = 'profile-reducer/SEND_POST';\nconst SET_USER_PROFILE = 'profile-reducer/SET_USER_PROFILE';\nconst SET_USER_STATUS = 'profile-reducer/SET_USER_STATUS';\nlet initialState = {\n  posts: [],\n  currentTextPost: '',\n  profile: null,\n  status: ''\n};\n\nconst profileReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SEND_POST:\n      return _objectSpread({}, state, {\n        posts: [...state.posts, {\n          text: action.post.postBody,\n          id: 1,\n          likesCount: 0\n        }]\n      });\n\n    case SET_USER_PROFILE:\n      return _objectSpread({}, state, {\n        profile: action.profile\n      });\n\n    case SET_USER_STATUS:\n      return _objectSpread({}, state, {\n        status: action.status\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport const sendPost = post => ({\n  type: SEND_POST,\n  post\n});\nexport const setUserProfile = profile => ({\n  type: SET_USER_PROFILE,\n  profile\n});\nexport const setUserStatus = status => ({\n  type: SET_USER_STATUS,\n  status\n});\nexport const getProfileThunk = userId => async dispatch => {\n  const data = await profileAPI.getProfile(userId);\n  dispatch(setUserProfile(data));\n};\nexport const getStatusThunk = userId => async dispatch => {\n  const data = await profileAPI.getUserStatus(userId);\n  dispatch(setUserStatus(data));\n};\nexport const updateStatusThunk = status => async dispatch => {\n  profileAPI.updateUserStatus(status).then(data => {\n    if (data.resultCode === 0) {\n      dispatch(setUserStatus(status));\n    }\n  });\n};\nexport default profileReducer;","map":{"version":3,"sources":["C:\\Users\\WOW\\Documents\\GitHub\\react\\react-test\\src\\redux\\profile-reducer.js"],"names":["profileAPI","async","SEND_POST","SET_USER_PROFILE","SET_USER_STATUS","initialState","posts","currentTextPost","profile","status","profileReducer","state","action","type","text","post","postBody","id","likesCount","sendPost","setUserProfile","setUserStatus","getProfileThunk","userId","dispatch","data","getProfile","getStatusThunk","getUserStatus","updateStatusThunk","updateUserStatus","then","resultCode"],"mappings":";AAAA,SAASA,UAAT,QAA2B,YAA3B;AACA,SAASC,KAAT,QAAsB,GAAtB;AAEA,MAAMC,SAAS,GAAG,2BAAlB;AACA,MAAMC,gBAAgB,GAAG,kCAAzB;AACA,MAAMC,eAAe,GAAG,iCAAxB;AAEA,IAAIC,YAAY,GAAG;AACfC,EAAAA,KAAK,EAAE,EADQ;AAEfC,EAAAA,eAAe,EAAE,EAFF;AAGfC,EAAAA,OAAO,EAAE,IAHM;AAIfC,EAAAA,MAAM,EAAE;AAJO,CAAnB;;AAOA,MAAMC,cAAc,GAAG,CAACC,KAAK,GAAGN,YAAT,EAAuBO,MAAvB,KAAkC;AAErD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKX,SAAL;AACI,+BACOS,KADP;AAEIL,QAAAA,KAAK,EAAE,CAAC,GAAGK,KAAK,CAACL,KAAV,EAAiB;AAAEQ,UAAAA,IAAI,EAAEF,MAAM,CAACG,IAAP,CAAYC,QAApB;AAA8BC,UAAAA,EAAE,EAAE,CAAlC;AAAqCC,UAAAA,UAAU,EAAE;AAAjD,SAAjB;AAFX;;AAOJ,SAAKf,gBAAL;AACI,+BAAYQ,KAAZ;AAAmBH,QAAAA,OAAO,EAAEI,MAAM,CAACJ;AAAnC;;AACJ,SAAKJ,eAAL;AACI,+BAAYO,KAAZ;AAAmBF,QAAAA,MAAM,EAAEG,MAAM,CAACH;AAAlC;;AACJ;AAAS,aAAOE,KAAP;AAbb;AAiBH,CAnBD;;AAqBA,OAAO,MAAMQ,QAAQ,GAAIJ,IAAD,KAAW;AAAEF,EAAAA,IAAI,EAAEX,SAAR;AAAmBa,EAAAA;AAAnB,CAAX,CAAjB;AAEP,OAAO,MAAMK,cAAc,GAAIZ,OAAD,KAAc;AAAEK,EAAAA,IAAI,EAAEV,gBAAR;AAA0BK,EAAAA;AAA1B,CAAd,CAAvB;AACP,OAAO,MAAMa,aAAa,GAAIZ,MAAD,KAAa;AAAEI,EAAAA,IAAI,EAAET,eAAR;AAAyBK,EAAAA;AAAzB,CAAb,CAAtB;AACP,OAAO,MAAMa,eAAe,GAAIC,MAAD,IAAY,MAAMC,QAAN,IAAmB;AAC1D,QAAMC,IAAI,GAAG,MAAMzB,UAAU,CAAC0B,UAAX,CAAsBH,MAAtB,CAAnB;AACIC,EAAAA,QAAQ,CAACJ,cAAc,CAACK,IAAD,CAAf,CAAR;AAEP,CAJM;AAKP,OAAO,MAAME,cAAc,GAAIJ,MAAD,IAAY,MAAMC,QAAN,IAAmB;AACzD,QAAMC,IAAI,GAAG,MAAOzB,UAAU,CAAC4B,aAAX,CAAyBL,MAAzB,CAApB;AAEIC,EAAAA,QAAQ,CAACH,aAAa,CAACI,IAAD,CAAd,CAAR;AAEP,CALM;AAMP,OAAO,MAAMI,iBAAiB,GAAIpB,MAAD,IAAY,MAAMe,QAAN,IAAmB;AAC5DxB,EAAAA,UAAU,CAAC8B,gBAAX,CAA4BrB,MAA5B,EAAoCsB,IAApC,CAAyCN,IAAI,IAAI;AAC7C,QAAIA,IAAI,CAACO,UAAL,KAAoB,CAAxB,EAA2B;AACvBR,MAAAA,QAAQ,CAACH,aAAa,CAACZ,MAAD,CAAd,CAAR;AACH;AACJ,GAJD;AAKH,CANM;AAOP,eAAeC,cAAf","sourcesContent":["import { profileAPI } from '../API/api'\r\nimport { async } from 'q';\r\n\r\nconst SEND_POST = 'profile-reducer/SEND_POST';\r\nconst SET_USER_PROFILE = 'profile-reducer/SET_USER_PROFILE';\r\nconst SET_USER_STATUS = 'profile-reducer/SET_USER_STATUS';\r\n\r\nlet initialState = {\r\n    posts: [],\r\n    currentTextPost: '',\r\n    profile: null,\r\n    status: ''\r\n}\r\n\r\nconst profileReducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n        case SEND_POST:\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, { text: action.post.postBody, id: 1, likesCount: 0 }],\r\n            }\r\n\r\n  \r\n        \r\n        case SET_USER_PROFILE:\r\n            return { ...state, profile: action.profile }\r\n        case SET_USER_STATUS:\r\n            return { ...state, status: action.status }\r\n        default: return state;\r\n\r\n    }\r\n\r\n}\r\n\r\nexport const sendPost = (post) => ({ type: SEND_POST, post });\r\n\r\nexport const setUserProfile = (profile) => ({ type: SET_USER_PROFILE, profile });\r\nexport const setUserStatus = (status) => ({ type: SET_USER_STATUS, status })\r\nexport const getProfileThunk = (userId) => async(dispatch) => {\r\n    const data = await(profileAPI.getProfile(userId));\r\n        dispatch(setUserProfile(data));\r\n\r\n}\r\nexport const getStatusThunk = (userId) => async(dispatch) => {\r\n    const data = await( profileAPI.getUserStatus(userId));\r\n\r\n        dispatch(setUserStatus(data));\r\n\r\n}\r\nexport const updateStatusThunk = (status) => async(dispatch) => {\r\n    profileAPI.updateUserStatus(status).then(data => {\r\n        if (data.resultCode === 0) {\r\n            dispatch(setUserStatus(status));\r\n        }\r\n    })\r\n}\r\nexport default profileReducer;"]},"metadata":{},"sourceType":"module"}