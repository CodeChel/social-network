{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\WOW\\\\Documents\\\\GitHub\\\\react\\\\react-test\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"C:\\\\Users\\\\WOW\\\\Documents\\\\GitHub\\\\react\\\\react-test\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"C:\\\\Users\\\\WOW\\\\Documents\\\\GitHub\\\\react\\\\react-test\\\\src\\\\components\\\\Messages-container\\\\Messages\\\\Messages.jsx\";\nimport React, { useState, useRef, useEffect } from 'react';\nimport styles from './Messages.module.css';\nimport DialogWithUser from './DialogsList/DialogWithUser';\nimport DialogSession from './DialogSession';\nimport ScrollbarHOC from '../../common/HOCScrollBar/HOCScrollbarCusctom';\n\nconst Messages = (_ref) => {\n  let dialogItemsData = _ref.dialogItemsData,\n      currentDialogId = _ref.currentDialogId,\n      search = _ref.search,\n      dialogsFromSearch = _ref.dialogsFromSearch,\n      props = _objectWithoutProperties(_ref, [\"dialogItemsData\", \"currentDialogId\", \"search\", \"dialogsFromSearch\"]);\n\n  const _useState = useState(null),\n        _useState2 = _slicedToArray(_useState, 2),\n        searchWord = _useState2[0],\n        setSearchWord = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        isSearchMode = _useState4[0],\n        setSearchMode = _useState4[1];\n\n  useEffect(() => {\n    if (isSearchMode) {\n      document.addEventListener('click', outSearhCheck);\n    } else {\n      document.removeEventListener('click', outSearhCheck);\n    }\n\n    return () => {\n      document.removeEventListener('click', outSearhCheck);\n    };\n  }, [isSearchMode]);\n  const searchInput = useRef();\n  const dialogRef = useRef();\n\n  const handleSearch = e => {\n    const word = e.currentTarget.value;\n    setSearchWord(word);\n\n    if (word && word.trim() !== '') {\n      search(word);\n      setSearchMode(true);\n    }\n  };\n\n  const outSearch = () => {\n    setSearchMode(false);\n    setSearchWord('');\n  };\n\n  const outSearhCheck = e => {\n    debugger;\n\n    if (e.target !== searchInput.current && e.target !== dialogRef.current) {\n      outSearch();\n    }\n  };\n\n  const dialogItems = dialogItemsData.map((item, index) => React.createElement(DialogWithUser, {\n    currentDialogId: currentDialogId,\n    avatar: item.avatar,\n    date: item.messages[item.messages.length - 1].date,\n    isYoursMessage: item.messages[item.messages.length - 1].right,\n    lastMessage: item.messages[item.messages.length - 1].message,\n    setDialogID: props.setDialogID,\n    key: index + 1,\n    name: item.name,\n    id: item.userId,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }));\n  const dialogItemsSearch = isSearchMode && dialogsFromSearch.map((item, index) => React.createElement(DialogWithUser, {\n    ref: dialogRef,\n    isSearchMode: isSearchMode,\n    currentDialogId: currentDialogId,\n    avatar: item.avatar,\n    outSearch: outSearch,\n    lastMessage: item.messages[item.messages.length - 1].message,\n    date: item.messages[item.messages.length - 1].date,\n    isYoursMessage: item.messages[item.messages.length - 1].right,\n    setDialogID: props.setDialogID,\n    key: index + 1,\n    name: item.name,\n    id: item.userId,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }));\n  const currentDialog = dialogItemsData[dialogItemsData.findIndex(i => {\n    return i.userId === currentDialogId;\n  })];\n  return React.createElement(\"div\", {\n    className: styles.messages,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, currentDialogId === 0 ? React.createElement(\"div\", {\n    className: styles.emptyMessages,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: styles.iconMessage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: styles.selectDialog,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, \"Please select a dialog\")) : React.createElement(DialogSession, {\n    valueMessage: props.valueMessage,\n    isSearchMode: isSearchMode,\n    userId: currentDialog.userId,\n    sendMessage: props.sendMessage,\n    name: currentDialog.name,\n    avatar: currentDialog.avatar,\n    messages: currentDialog.messages,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: styles.dialogItems,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: styles.dialogSearch,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    ref: searchInput,\n    placeholder: \"Search\",\n    className: styles.searchInput,\n    value: searchWord,\n    onChange: e => handleSearch(e),\n    type: \"text\",\n    name: \"\",\n    id: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: styles.dialogsList,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, React.createElement(ScrollbarHOC, {\n    children: isSearchMode ? dialogItemsSearch : dialogItems,\n    autoHide: true,\n    removeTrackYWhenNotUsed: true,\n    style: {\n      width: \"100%\",\n      height: \"85vh\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }))));\n};\n\nexport default Messages;","map":{"version":3,"sources":["C:\\Users\\WOW\\Documents\\GitHub\\react\\react-test\\src\\components\\Messages-container\\Messages\\Messages.jsx"],"names":["React","useState","useRef","useEffect","styles","DialogWithUser","DialogSession","ScrollbarHOC","Messages","dialogItemsData","currentDialogId","search","dialogsFromSearch","props","searchWord","setSearchWord","isSearchMode","setSearchMode","document","addEventListener","outSearhCheck","removeEventListener","searchInput","dialogRef","handleSearch","e","word","currentTarget","value","trim","outSearch","target","current","dialogItems","map","item","index","avatar","messages","length","date","right","message","setDialogID","name","userId","dialogItemsSearch","currentDialog","findIndex","i","emptyMessages","iconMessage","selectDialog","valueMessage","sendMessage","dialogSearch","dialogsList","width","height"],"mappings":"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","sourcesContent":["import React, {  useState, useRef, useEffect } from 'react'\r\nimport styles from './Messages.module.css'\r\nimport DialogWithUser from './DialogsList/DialogWithUser'\r\nimport DialogSession from './DialogSession'\r\nimport ScrollbarHOC from '../../common/HOCScrollBar/HOCScrollbarCusctom'\r\n\r\n\r\n\r\n\r\nconst Messages = ({ dialogItemsData, currentDialogId, search, dialogsFromSearch, ...props }) => {\r\n    const [searchWord, setSearchWord] = useState(null);\r\n    const [isSearchMode, setSearchMode] = useState(false);\r\n\r\n    useEffect(()=>{\r\n        if(isSearchMode){\r\n            document.addEventListener('click', outSearhCheck )\r\n        }\r\n        else{\r\n            document.removeEventListener('click', outSearhCheck )\r\n        }\r\n        return ()=>{\r\n            document.removeEventListener('click', outSearhCheck )\r\n        }\r\n    },[isSearchMode])\r\n\r\n    const searchInput = useRef();   \r\n    const dialogRef = useRef();\r\n\r\n    const handleSearch = (e) => {\r\n        const word = e.currentTarget.value;\r\n        setSearchWord(word);\r\n        if (word && word.trim() !== '') {\r\n            search(word)\r\n            setSearchMode(true)\r\n        }\r\n    }\r\n    const outSearch = () => {\r\n        setSearchMode(false)\r\n        setSearchWord('')\r\n    }\r\n    const outSearhCheck = (e) => {\r\n        debugger;\r\n        if(e.target !== searchInput.current && e.target !== dialogRef.current){\r\n            outSearch()\r\n        }\r\n    \r\n    }\r\n\r\n\r\n    const dialogItems = dialogItemsData.map((item, index) => <DialogWithUser currentDialogId={currentDialogId} avatar={item.avatar}\r\n        date={item.messages[item.messages.length - 1].date} isYoursMessage={item.messages[item.messages.length - 1].right} \r\n        lastMessage={item.messages[item.messages.length - 1].message} setDialogID={props.setDialogID} key={index + 1} name={item.name} id={item.userId} />)\r\n\r\n    const dialogItemsSearch = isSearchMode && dialogsFromSearch.map((item, index) => <DialogWithUser ref={dialogRef} isSearchMode={isSearchMode}\r\n        currentDialogId={currentDialogId} avatar={item.avatar} outSearch={outSearch} lastMessage={item.messages[item.messages.length - 1].message}\r\n        date={item.messages[item.messages.length - 1].date} isYoursMessage={item.messages[item.messages.length - 1].right} setDialogID={props.setDialogID}\r\n        key={index + 1} name={item.name} id={item.userId} />)\r\n\r\n    const currentDialog = dialogItemsData[dialogItemsData.findIndex((i) => { return i.userId === currentDialogId })];\r\n\r\n\r\n    return <div className={styles.messages} >\r\n\r\n        {currentDialogId === 0\r\n            ? <div className={styles.emptyMessages}>\r\n                <div className={styles.iconMessage}></div>\r\n                <div className={styles.selectDialog}>\r\n                    Please select a dialog\r\n                </div>\r\n            </div>\r\n            : <DialogSession valueMessage={props.valueMessage} isSearchMode={isSearchMode} userId={currentDialog.userId} \r\n            sendMessage={props.sendMessage} name={currentDialog.name}avatar={currentDialog.avatar} messages={currentDialog.messages} />}\r\n\r\n        <div className={styles.dialogItems}>\r\n            <div className={styles.dialogSearch}>\r\n                <input ref={searchInput} placeholder='Search' className={styles.searchInput}  value={searchWord} onChange={e => handleSearch(e)} type=\"text\" name=\"\" id=\"\" />\r\n            </div>\r\n            <div className={styles.dialogsList}>\r\n                <ScrollbarHOC children={isSearchMode ? dialogItemsSearch : dialogItems} autoHide removeTrackYWhenNotUsed={true} style={{ width: \"100%\", height: \"85vh\" }} />\r\n            </div>\r\n        </div>\r\n\r\n    </div>\r\n}\r\n\r\n\r\nexport default Messages;"]},"metadata":{},"sourceType":"module"}