{"ast":null,"code":"const today = {\n  hour: 'numeric',\n  minute: 'numeric'\n};\nconst month = {\n  day: 'numeric',\n  month: 'short',\n  hour: 'numeric',\n  minute: 'numeric'\n};\nconst year = {\n  day: 'numeric',\n  month: 'short',\n  hour: 'numeric',\n  minute: 'numeric'\n};\nconst other = {\n  month: 'long',\n  year: 'numeric'\n};\n\nconst formatTime = date => {\n  if (isToday(date)) return date.toLocaleString(\"en-US\", today);else if (isMonth(date)) return date.toLocaleString(\"en-US\", month);else if (isYear(date)) return date.toLocaleString('en-US', year);\n  return date.toLocaleString('en-US', other);\n};\n\nconst isToday = date => {\n  const today = new Date();\n  return date.getDate() === today.getDate() && date.getMonth() === today.getMonth() && date.getFullYear() === today.getFullYear();\n};\n\nconst isMonth = date => {\n  const today = new Date();\n  return date.getMonth() === today.getMonth() && date.getFullYear() === today.getFullYear();\n};\n\nconst isYear = date => {\n  const today = new Date();\n  return date.getFullYear() === today.getFullYear();\n};\n\nexport const formatTimeToLastMessage = date => {\n  if (isToday(date)) return date.toLocaleString(\"en-US\", today);else if (isMonth(date)) return date.toLocaleString(\"en-US\", {\n    month: 'short',\n    day: 'numeric'\n  });else if (isYear(date)) return date.toLocaleString('en-US', {\n    month: 'short',\n    day: 'numeric'\n  });\n  return date.toLocaleString('en-US', other);\n};\nexport default formatTime;","map":{"version":3,"sources":["C:\\Users\\WOW\\Documents\\GitHub\\react\\react-test\\src\\utils\\timeFormat.js"],"names":["today","hour","minute","month","day","year","other","formatTime","date","isToday","toLocaleString","isMonth","isYear","Date","getDate","getMonth","getFullYear","formatTimeToLastMessage"],"mappings":"AACA,MAAMA,KAAK,GAAG;AACVC,EAAAA,IAAI,EAAE,SADI;AAEVC,EAAAA,MAAM,EAAE;AAFE,CAAd;AAIA,MAAMC,KAAK,GAAG;AACVC,EAAAA,GAAG,EAAE,SADK;AAEVD,EAAAA,KAAK,EAAE,OAFG;AAGVF,EAAAA,IAAI,EAAE,SAHI;AAIVC,EAAAA,MAAM,EAAE;AAJE,CAAd;AAOA,MAAMG,IAAI,GAAG;AACTD,EAAAA,GAAG,EAAE,SADI;AAETD,EAAAA,KAAK,EAAE,OAFE;AAGTF,EAAAA,IAAI,EAAE,SAHG;AAITC,EAAAA,MAAM,EAAE;AAJC,CAAb;AAOA,MAAMI,KAAK,GAAG;AACVH,EAAAA,KAAK,EAAE,MADG;AAEVE,EAAAA,IAAI,EAAE;AAFI,CAAd;;AAKC,MAAME,UAAU,GAAIC,IAAD,IAAS;AAEzB,MAAGC,OAAO,CAACD,IAAD,CAAV,EAAkB,OAAOA,IAAI,CAACE,cAAL,CAAoB,OAApB,EAA6BV,KAA7B,CAAP,CAAlB,KACK,IAAGW,OAAO,CAACH,IAAD,CAAV,EAAkB,OAAOA,IAAI,CAACE,cAAL,CAAoB,OAApB,EAA6BP,KAA7B,CAAP,CAAlB,KACA,IAAGS,MAAM,CAACJ,IAAD,CAAT,EAAiB,OAAOA,IAAI,CAACE,cAAL,CAAoB,OAApB,EAA6BL,IAA7B,CAAP;AACtB,SAAOG,IAAI,CAACE,cAAL,CAAoB,OAApB,EAA6BJ,KAA7B,CAAP;AACH,CANA;;AAQD,MAAMG,OAAO,GAAID,IAAD,IAAU;AACtB,QAAMR,KAAK,GAAG,IAAIa,IAAJ,EAAd;AACA,SAAOL,IAAI,CAACM,OAAL,OAAmBd,KAAK,CAACc,OAAN,EAAnB,IACPN,IAAI,CAACO,QAAL,OAAoBf,KAAK,CAACe,QAAN,EADb,IAEPP,IAAI,CAACQ,WAAL,OAAuBhB,KAAK,CAACgB,WAAN,EAFvB;AAGD,CALH;;AAME,MAAML,OAAO,GAAIH,IAAD,IAAU;AACxB,QAAMR,KAAK,GAAG,IAAIa,IAAJ,EAAd;AACA,SAAOL,IAAI,CAACO,QAAL,OAAoBf,KAAK,CAACe,QAAN,EAApB,IACPP,IAAI,CAACQ,WAAL,OAAuBhB,KAAK,CAACgB,WAAN,EADvB;AAED,CAJD;;AAKA,MAAMJ,MAAM,GAAIJ,IAAD,IAAU;AACvB,QAAMR,KAAK,GAAG,IAAIa,IAAJ,EAAd;AACA,SAAOL,IAAI,CAACQ,WAAL,OAAuBhB,KAAK,CAACgB,WAAN,EAA9B;AACD,CAHD;;AAIA,OAAO,MAAMC,uBAAuB,GAAIT,IAAD,IAAS;AAC9C,MAAGC,OAAO,CAACD,IAAD,CAAV,EAAkB,OAAOA,IAAI,CAACE,cAAL,CAAoB,OAApB,EAA6BV,KAA7B,CAAP,CAAlB,KACK,IAAGW,OAAO,CAACH,IAAD,CAAV,EAAkB,OAAOA,IAAI,CAACE,cAAL,CAAoB,OAApB,EAA6B;AAACP,IAAAA,KAAK,EAAE,OAAR;AAAiBC,IAAAA,GAAG,EAAE;AAAtB,GAA7B,CAAP,CAAlB,KACA,IAAGQ,MAAM,CAACJ,IAAD,CAAT,EAAiB,OAAOA,IAAI,CAACE,cAAL,CAAoB,OAApB,EAA6B;AAACP,IAAAA,KAAK,EAAE,OAAR;AAAiBC,IAAAA,GAAG,EAAE;AAAtB,GAA7B,CAAP;AACtB,SAAOI,IAAI,CAACE,cAAL,CAAoB,OAApB,EAA6BJ,KAA7B,CAAP;AACH,CALQ;AAMP,eAAeC,UAAf","sourcesContent":["\r\nconst today = {\r\n    hour: 'numeric',\r\n    minute: 'numeric'\r\n}\r\nconst month = {\r\n    day: 'numeric',\r\n    month: 'short',\r\n    hour: 'numeric',\r\n    minute: 'numeric'\r\n    \r\n}\r\nconst year = {\r\n    day: 'numeric',\r\n    month: 'short',\r\n    hour: 'numeric',\r\n    minute: 'numeric'\r\n   \r\n}\r\nconst other = {\r\n    month: 'long',\r\n    year: 'numeric'\r\n}\r\n\r\n const formatTime = (date) =>{\r\n\r\n    if(isToday(date)) return date.toLocaleString(\"en-US\", today)\r\n    else if(isMonth(date)) return date.toLocaleString(\"en-US\", month)\r\n    else if(isYear(date)) return date.toLocaleString('en-US', year)\r\n    return date.toLocaleString('en-US', other)\r\n}\r\n\r\nconst isToday = (date) => {\r\n    const today = new Date()\r\n    return date.getDate() === today.getDate() &&\r\n    date.getMonth() === today.getMonth() &&\r\n    date.getFullYear() === today.getFullYear()\r\n  }\r\n  const isMonth = (date) => {\r\n    const today = new Date()\r\n    return date.getMonth() === today.getMonth() &&\r\n    date.getFullYear() === today.getFullYear()\r\n  }\r\n  const isYear = (date) => {\r\n    const today = new Date()\r\n    return date.getFullYear() === today.getFullYear()\r\n  }\r\n  export const formatTimeToLastMessage = (date) =>{\r\n    if(isToday(date)) return date.toLocaleString(\"en-US\", today)\r\n    else if(isMonth(date)) return date.toLocaleString(\"en-US\", {month: 'short', day: 'numeric'})\r\n    else if(isYear(date)) return date.toLocaleString('en-US', {month: 'short', day: 'numeric'})\r\n    return date.toLocaleString('en-US', other)\r\n}\r\n  export default formatTime"]},"metadata":{},"sourceType":"module"}