{"ast":null,"code":"import _slicedToArray from\"C:\\\\Users\\\\WOW\\\\Documents\\\\GitHub\\\\react\\\\react-test\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import _objectWithoutProperties from\"C:\\\\Users\\\\WOW\\\\Documents\\\\GitHub\\\\react\\\\react-test\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";import React,{useState}from'react';import'emoji-mart/css/emoji-mart.css';import{Picker}from'emoji-mart';import{change}from'redux-form';var EmojiPickerForm=function EmojiPickerForm(_ref){var formName=_ref.formName,fieldName=_ref.fieldName,Form=_ref.Form,styles=_ref.styles,dispatch=_ref.dispatch,props=_objectWithoutProperties(_ref,[\"formName\",\"fieldName\",\"Form\",\"styles\",\"dispatch\"]);var _useState=useState(false),_useState2=_slicedToArray(_useState,2),emojiPickerMode=_useState2[0],setEPMode=_useState2[1];var addEmoji=function addEmoji(e){var sym=e.unified.split('-');var codesArray=[];sym.map(function(el){return codesArray.push('0x'+el);});var emoji=String.fromCodePoint.apply(String,codesArray);dispatch(change(formName,fieldName,Form.values?Form.values[fieldName]+emoji:emoji));};return React.createElement(\"div\",{onClick:function onClick(){setEPMode(true);},onMouseEnter:function onMouseEnter(){setEPMode(true);},onMouseLeave:function onMouseLeave(){setEPMode(false);}},React.createElement(\"span\",{role:\"button\",className:styles.buttomEmoji}),emojiPickerMode&&React.createElement(Picker,{style:{position:'absolute',bottom:props.bottom,right:props.right,width:props.width},onSelect:addEmoji,native:true,showPreview:false,showSkinTones:false,title:\"\"}));};export var EmojiPickerStatus=function EmojiPickerStatus(_ref2){var status=_ref2.status,setStatus=_ref2.setStatus,styles=_ref2.styles;var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),emojiPickerMode=_useState4[0],setEPMode=_useState4[1];var addEmoji=function addEmoji(e){var sym=e.unified.split('-');var codesArray=[];sym.map(function(el){return codesArray.push('0x'+el);});var emoji=String.fromCodePoint.apply(String,codesArray);setStatus(status+emoji);};return React.createElement(\"div\",{onClick:function onClick(){setEPMode(true);},onMouseEnter:function onMouseEnter(){setEPMode(true);},onMouseLeave:function onMouseLeave(){setEPMode(false);}},React.createElement(\"span\",{role:\"button\",className:styles.buttomEmoji}),emojiPickerMode&&React.createElement(Picker,{style:{position:'absolute',bottom:'-320%',right:'0px',width:'100%'},showPreview:false,showSkinTones:false,emojiSize:16,title:\"\",onSelect:addEmoji,native:true}));};export default EmojiPickerForm;","map":{"version":3,"sources":["C:/Users/WOW/Documents/GitHub/react/react-test/src/components/common/EmojiPicker/EmojiPicker.jsx"],"names":["React","useState","Picker","change","EmojiPickerForm","formName","fieldName","Form","styles","dispatch","props","emojiPickerMode","setEPMode","addEmoji","e","sym","unified","split","codesArray","map","el","push","emoji","String","fromCodePoint","values","buttomEmoji","position","bottom","right","width","EmojiPickerStatus","status","setStatus"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\nimport 'emoji-mart/css/emoji-mart.css'\r\nimport { Picker } from 'emoji-mart'\r\nimport {  change } from 'redux-form'\r\n\r\n\r\nconst EmojiPickerForm = ({formName, fieldName, Form, styles, dispatch, ...props}) => {\r\n    const [emojiPickerMode, setEPMode] = useState(false);\r\n\r\n    const addEmoji = (e) => {\r\n        const sym = e.unified.split('-')\r\n        const codesArray = []\r\n\r\n        sym.map(el => codesArray.push('0x' + el))\r\n        const emoji = String.fromCodePoint(...codesArray)\r\n\r\n        dispatch(change(formName, fieldName, Form.values ? Form.values[fieldName] + emoji : emoji));\r\n    }\r\n\r\n    return <div onClick={() => { setEPMode(true) }} onMouseEnter={() => { setEPMode(true) }} onMouseLeave={() => { setEPMode(false) }}>\r\n        <span role='button' className={styles.buttomEmoji}></span>\r\n        {emojiPickerMode \r\n        && <Picker style={{ position: 'absolute', bottom: props.bottom, right: props.right, \r\n            width: props.width}}  onSelect={addEmoji} native={true} showPreview={false} showSkinTones={false} title='' />}\r\n    </div>\r\n  \r\n}\r\nexport const EmojiPickerStatus = ({status, setStatus, styles}) =>{\r\n    const [emojiPickerMode, setEPMode] = useState(false)\r\n\r\n    const addEmoji = (e) => {\r\n        const sym = e.unified.split('-')\r\n        const codesArray = []\r\n\r\n        sym.map(el => codesArray.push('0x' + el))\r\n        const emoji = String.fromCodePoint(...codesArray)\r\n        setStatus(status + emoji);      \r\n    }\r\n    return <div onClick={() => { setEPMode(true) }}  onMouseEnter={() => { setEPMode(true) }} onMouseLeave={() => { setEPMode(false) }}>\r\n        <span role='button' className={styles.buttomEmoji}></span>\r\n        {emojiPickerMode && <Picker style={{ position: 'absolute', bottom: '-320%', right: '0px', width: '100%' }}  showPreview={false}  \r\n        showSkinTones={false} emojiSize={16} \r\n        title=''  onSelect={addEmoji} native={true} />}\r\n    </div>\r\n\r\n}\r\nexport default EmojiPickerForm;\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}