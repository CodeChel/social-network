{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\WOW\\\\Documents\\\\GitHub\\\\react\\\\react-test\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"C:\\\\Users\\\\WOW\\\\Documents\\\\GitHub\\\\react\\\\react-test\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"C:\\\\Users\\\\WOW\\\\Documents\\\\GitHub\\\\react\\\\react-test\\\\src\\\\components\\\\Messages-container\\\\Messages\\\\Messages.jsx\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport styles from './Messages.module.css';\nimport DialogWithUser from '../DialogsList/DialogWithUser';\nimport Dialog from './Dialog';\n\nconst Messages = (_ref) => {\n  let dialogItemsData = _ref.dialogItemsData,\n      currentDialogId = _ref.currentDialogId,\n      search = _ref.search,\n      dialogsFromSearch = _ref.dialogsFromSearch,\n      props = _objectWithoutProperties(_ref, [\"dialogItemsData\", \"currentDialogId\", \"search\", \"dialogsFromSearch\"]);\n\n  const _useState = useState(null),\n        _useState2 = _slicedToArray(_useState, 2),\n        searchWord = _useState2[0],\n        setSearchWord = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        isSearchMode = _useState4[0],\n        setSearchMode = _useState4[1];\n\n  const handleSearch = e => {\n    const word = e.currentTarget.value;\n    setSearchWord(word);\n\n    if (word && word.trim() !== '') {\n      search(word);\n      setSearchMode(true);\n      document.addEventListener('click', outSearh);\n    }\n  };\n\n  const outSearh = e => {\n    setTimeout(() => {\n      setSearchMode(false);\n      setSearchWord('');\n    }, 100);\n  };\n\n  const dialogItems = dialogItemsData.map((item, index) => React.createElement(DialogWithUser, {\n    currentDialogId: currentDialogId,\n    avatar: item.avatar,\n    lastMessage: item.messages[item.messages.length - 1].message,\n    setDialogID: props.setDialogID,\n    key: index + 1,\n    name: item.name,\n    id: item.userId,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }));\n  const dialogItemsSearch = isSearchMode && dialogsFromSearch.map((item, index) => React.createElement(DialogWithUser, {\n    isSearchMode: isSearchMode,\n    currentDialogId: currentDialogId,\n    avatar: item.avatar,\n    outSearh: outSearh,\n    lastMessage: item.messages[item.messages.length - 1].message,\n    setDialogID: props.setDialogID,\n    key: index + 1,\n    name: item.name,\n    id: item.userId,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }));\n  const currentDialog = dialogItemsData[dialogItemsData.findIndex(i => {\n    return i.userId === currentDialogId;\n  })];\n  return React.createElement(\"div\", {\n    className: styles.messages,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, currentDialogId === 0 ? React.createElement(\"div\", {\n    className: styles.emptyMessages,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: styles.iconMessage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: styles.selectDialog,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, \"Please select a dialog\")) : React.createElement(Dialog, {\n    valueMessage: props.valueMessage,\n    isSearchMode: isSearchMode,\n    userId: currentDialog.userId,\n    sendMessage: props.sendMessage,\n    name: currentDialog.name,\n    avatar: currentDialog.avatar,\n    messages: currentDialog.messages,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: styles.dialogItems,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: styles.dialogSearch,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    placeholder: \"Search\",\n    className: styles.searchInput,\n    onBlur: outSearh,\n    value: searchWord,\n    onChange: e => handleSearch(e),\n    type: \"text\",\n    name: \"\",\n    id: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: styles.dialogsList,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, isSearchMode ? dialogItemsSearch : dialogItems)));\n};\n\nexport default Messages;","map":{"version":3,"sources":["C:\\Users\\WOW\\Documents\\GitHub\\react\\react-test\\src\\components\\Messages-container\\Messages\\Messages.jsx"],"names":["React","useEffect","useRef","useState","styles","DialogWithUser","Dialog","Messages","dialogItemsData","currentDialogId","search","dialogsFromSearch","props","searchWord","setSearchWord","isSearchMode","setSearchMode","handleSearch","e","word","currentTarget","value","trim","document","addEventListener","outSearh","setTimeout","dialogItems","map","item","index","avatar","messages","length","message","setDialogID","name","userId","dialogItemsSearch","currentDialog","findIndex","i","emptyMessages","iconMessage","selectDialog","valueMessage","sendMessage","dialogSearch","searchInput","dialogsList"],"mappings":"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","sourcesContent":["import React, {useEffect, useRef, useState} from 'react'\r\n\r\nimport styles from './Messages.module.css'\r\nimport DialogWithUser from '../DialogsList/DialogWithUser'\r\nimport Dialog from './Dialog'\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst Messages = ({dialogItemsData, currentDialogId, search, dialogsFromSearch,...props}) => {\r\n    const [searchWord, setSearchWord] = useState(null);\r\n    const [isSearchMode, setSearchMode] = useState(false);\r\n    \r\n\r\n    const handleSearch = (e)=>{\r\n        const word = e.currentTarget.value;\r\n        setSearchWord(word);\r\n        if(word && word.trim() !== ''){\r\n            search(word);\r\n            setSearchMode(true);\r\n            document.addEventListener('click', outSearh)\r\n        }   \r\n    }\r\n    const outSearh = (e) =>{\r\n       \r\n        setTimeout(() => {\r\n            setSearchMode(false);\r\n        setSearchWord('');\r\n        }, 100);\r\n        \r\n        \r\n        \r\n    }\r\n\r\n    \r\n    const dialogItems = dialogItemsData.map((item, index) => <DialogWithUser currentDialogId={currentDialogId} avatar={item.avatar}\r\n        lastMessage={ item.messages[item.messages.length-1].message} setDialogID={props.setDialogID}   key={index+1} name={item.name} id={item.userId} />)\r\n\r\n    const dialogItemsSearch = isSearchMode && dialogsFromSearch.map((item, index) => <DialogWithUser isSearchMode={isSearchMode} \r\n     currentDialogId={currentDialogId} avatar={item.avatar} outSearh={outSearh}\r\n        lastMessage={ item.messages[item.messages.length-1].message} setDialogID={props.setDialogID}   key={index+1} name={item.name} id={item.userId} />)\r\n    \r\n    const currentDialog = dialogItemsData[dialogItemsData.findIndex((i)=>{return i.userId === currentDialogId})];\r\n   \r\n\r\n    return <div className={styles.messages} >\r\n        \r\n        {currentDialogId === 0\r\n            ? <div className={styles.emptyMessages}>\r\n                <div className={styles.iconMessage}></div>\r\n                <div className={styles.selectDialog}>\r\n                    Please select a dialog\r\n                </div>\r\n             </div>\r\n            : <Dialog valueMessage ={props.valueMessage} isSearchMode={isSearchMode}  userId={currentDialog.userId} sendMessage={props.sendMessage} name={currentDialog.name} \r\n            avatar={currentDialog.avatar}  messages={currentDialog.messages} />}\r\n\r\n        <div className={styles.dialogItems}>\r\n            <div className={styles.dialogSearch}><input placeholder='Search' className={styles.searchInput} onBlur={outSearh} value={searchWord}  onChange={e=>handleSearch(e)} type=\"text\" name=\"\" id=\"\"/></div>\r\n            <div className={styles.dialogsList}>\r\n                {isSearchMode ? dialogItemsSearch : dialogItems }\r\n        \r\n            </div>\r\n        </div>\r\n        \r\n    </div>\r\n}\r\n\r\n\r\nexport default Messages;"]},"metadata":{},"sourceType":"module"}