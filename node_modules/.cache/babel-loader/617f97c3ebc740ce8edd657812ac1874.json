{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\WOW\\\\Documents\\\\GitHub\\\\react\\\\react-test\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"C:\\\\Users\\\\WOW\\\\Documents\\\\GitHub\\\\react\\\\react-test\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"C:\\\\Users\\\\WOW\\\\Documents\\\\GitHub\\\\react\\\\react-test\\\\src\\\\components\\\\Messages-container\\\\Messages\\\\Messages.jsx\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport styles from './Messages.module.css';\nimport DialogWithUser from '../DialogsList/DialogWithUser';\nimport Dialog from './Dialog';\n\nconst Messages = (_ref) => {\n  let dialogItemsData = _ref.dialogItemsData,\n      currentDialogId = _ref.currentDialogId,\n      search = _ref.search,\n      dialogsFromSearch = _ref.dialogsFromSearch,\n      props = _objectWithoutProperties(_ref, [\"dialogItemsData\", \"currentDialogId\", \"search\", \"dialogsFromSearch\"]);\n\n  const _useState = useState(null),\n        _useState2 = _slicedToArray(_useState, 2),\n        searchWord = _useState2[0],\n        setSearchWord = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        isSearchMode = _useState4[0],\n        setSearchMode = _useState4[1];\n\n  const handleSearch = e => {\n    const word = e.currentTarget.value;\n    setSearchWord(word);\n\n    if (word && word.trim() !== '') {\n      search(word);\n      setSearchMode(true);\n    }\n  };\n\n  const outSearh = () => {\n    setSearchWord(false);\n    isSearchMode(false);\n  };\n\n  let dialogItems = dialogItemsData.map((item, index) => React.createElement(DialogWithUser, {\n    currentDialogId: currentDialogId,\n    avatar: item.avatar,\n    lastMessage: item.messages[item.messages.length - 1].message,\n    setDialogID: props.setDialogID,\n    key: index + 1,\n    name: item.name,\n    id: item.userId,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }));\n  const dialogItemsSearch = isSearchMode && dialogsFromSearch.map((item, index) => React.createElement(DialogWithUser, {\n    currentDialogId: currentDialogId,\n    avatar: item.avatar,\n    lastMessage: item.messages[item.messages.length - 1].message,\n    setDialogID: props.setDialogID,\n    key: index + 1,\n    name: item.name,\n    id: item.userId,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }));\n  const dialog = useRef();\n  const currentDialog = dialogItemsData[dialogItemsData.findIndex(i => {\n    return i.userId === currentDialogId;\n  })];\n  useEffect(() => {}, [dialog]);\n  return React.createElement(\"div\", {\n    className: styles.messages,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, currentDialogId === 0 ? React.createElement(\"div\", {\n    className: styles.emptyMessages,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: styles.iconMessage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: styles.selectDialog,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, \"Please select a dialog\")) : React.createElement(Dialog, {\n    ref: dialog,\n    userId: currentDialog.userId,\n    sendMessage: props.sendMessage,\n    name: currentDialog.name,\n    avatar: currentDialog.avatar,\n    messages: currentDialog.messages,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: styles.dialogItems,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: styles.dialogSearch,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    value: searchWord,\n    onBlur: outSearh,\n    onChange: e => handleSearch(e),\n    type: \"text\",\n    name: \"\",\n    id: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: styles.dialogsList,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, isSearchMode ? dialogItemsSearch : dialogItems)));\n};\n\nexport default Messages;","map":{"version":3,"sources":["C:\\Users\\WOW\\Documents\\GitHub\\react\\react-test\\src\\components\\Messages-container\\Messages\\Messages.jsx"],"names":["React","useEffect","useRef","useState","styles","DialogWithUser","Dialog","Messages","dialogItemsData","currentDialogId","search","dialogsFromSearch","props","searchWord","setSearchWord","isSearchMode","setSearchMode","handleSearch","e","word","currentTarget","value","trim","outSearh","dialogItems","map","item","index","avatar","messages","length","message","setDialogID","name","userId","dialogItemsSearch","dialog","currentDialog","findIndex","i","emptyMessages","iconMessage","selectDialog","sendMessage","dialogSearch","dialogsList"],"mappings":"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","sourcesContent":["import React, {useEffect, useRef, useState} from 'react'\r\n\r\nimport styles from './Messages.module.css'\r\nimport DialogWithUser from '../DialogsList/DialogWithUser'\r\nimport Dialog from './Dialog'\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst Messages = ({dialogItemsData, currentDialogId, search, dialogsFromSearch,...props}) => {\r\n    const [searchWord, setSearchWord] = useState(null);\r\n    const [isSearchMode, setSearchMode] = useState(false);\r\n    const handleSearch = (e)=>{\r\n        const word = e.currentTarget.value;\r\n        setSearchWord(word);\r\n        if(word && word.trim() !== ''){\r\n            search(word);\r\n            setSearchMode(true);\r\n        }   \r\n    }\r\n    const outSearh = () =>{\r\n        setSearchWord(false);\r\n        isSearchMode(false);\r\n    }\r\n    \r\n    let dialogItems = dialogItemsData.map((item, index) => <DialogWithUser currentDialogId={currentDialogId} avatar={item.avatar}\r\n    lastMessage={ item.messages[item.messages.length-1].message} setDialogID={props.setDialogID}   key={index+1} name={item.name} id={item.userId} />)\r\n    const dialogItemsSearch = isSearchMode && dialogsFromSearch.map((item, index) => <DialogWithUser  currentDialogId={currentDialogId} avatar={item.avatar}\r\n    lastMessage={ item.messages[item.messages.length-1].message} setDialogID={props.setDialogID}   key={index+1} name={item.name} id={item.userId} />)\r\n    const dialog = useRef();\r\n    const currentDialog = dialogItemsData[dialogItemsData.findIndex((i)=>{return i.userId === currentDialogId})];\r\n    useEffect(()=>{\r\n       \r\n    },[dialog])\r\n\r\n    return <div className={styles.messages}>\r\n        \r\n        {currentDialogId === 0\r\n            ? <div className={styles.emptyMessages}>\r\n                <div className={styles.iconMessage}></div>\r\n                <div className={styles.selectDialog}>\r\n                    Please select a dialog\r\n                </div>\r\n             </div>\r\n            : <Dialog ref={dialog} userId={currentDialog.userId} sendMessage={props.sendMessage} name={currentDialog.name} \r\n            avatar={currentDialog.avatar}  messages={currentDialog.messages} />}\r\n\r\n        <div className={styles.dialogItems}>\r\n            <div className={styles.dialogSearch}><input value={searchWord} onBlur={outSearh} onChange={e=>handleSearch(e)} type=\"text\" name=\"\" id=\"\"/>{}</div>\r\n            <div className={styles.dialogsList}>\r\n                {isSearchMode ? dialogItemsSearch : dialogItems }\r\n        \r\n            </div>\r\n        </div>\r\n        \r\n    </div>\r\n}\r\n\r\n\r\nexport default Messages;"]},"metadata":{},"sourceType":"module"}