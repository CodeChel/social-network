{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\WOW\\\\Documents\\\\GitHub\\\\react\\\\react-test\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport { profileAPI } from '../API/api';\nconst SEND_POST = 'SEND_POST';\nconst UPDATE_POST_TEXT = 'UPDATE_POST_TEXT';\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING';\nconst SET_POSTS = 'SET_POSTS';\nconst SET_USER_PROFILE = 'SET_USER_PROFILE';\nconst SET_USER_STATUS = 'SET_USER_STATUS';\nlet initialState = {\n  posts: [],\n  currentTextPost: '',\n  profile: null\n};\n\nconst postsReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SEND_POST:\n      return _objectSpread({}, state, {\n        posts: [...state.posts, {\n          text: state.currentTextPost,\n          id: 1,\n          likesCount: 0\n        }],\n        currentTextPost: ''\n      });\n\n    case UPDATE_POST_TEXT:\n      return _objectSpread({}, state, {\n        currentTextPost: action.newText\n      });\n\n    case SET_POSTS:\n      return _objectSpread({}, state, {\n        users: action.users\n      });\n\n    case SET_USER_PROFILE:\n      return _objectSpread({}, state, {\n        profile: action.profile\n      });\n\n    case SET_USER_STATUS:\n      return _objectSpread({}, state, {\n        status: action.status\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport const sendPost = () => ({\n  type: SEND_POST\n});\nexport const updatePost = newText => ({\n  type: UPDATE_POST_TEXT,\n  newText\n});\nexport const setPosts = posts => ({\n  type: UPDATE_POST_TEXT,\n  posts\n});\nexport const setUserProfile = profile => ({\n  type: SET_USER_PROFILE,\n  profile\n});\nexport const setUserStatus = status => ({\n  type: SET_USER_STATUS,\n  status\n});\nexport const getProfileThunk = userId => dispatch => {\n  profileAPI.getProfile(userId).then(data => {\n    dispatch(setUserProfile(data));\n  });\n};\nexport const getStatusThunk = userId => dispatch => {\n  profileAPI.getUserStatus(userId).then(data => {\n    dispatch(setUserProfile(data));\n  });\n};\nexport default postsReducer;","map":{"version":3,"sources":["C:\\Users\\WOW\\Documents\\GitHub\\react\\react-test\\src\\redux\\profile-reducer.js"],"names":["profileAPI","SEND_POST","UPDATE_POST_TEXT","TOGGLE_IS_FETCHING","SET_POSTS","SET_USER_PROFILE","SET_USER_STATUS","initialState","posts","currentTextPost","profile","postsReducer","state","action","type","text","id","likesCount","newText","users","status","sendPost","updatePost","setPosts","setUserProfile","setUserStatus","getProfileThunk","userId","dispatch","getProfile","then","data","getStatusThunk","getUserStatus"],"mappings":";AAAA,SAAQA,UAAR,QAAyB,YAAzB;AAEA,MAAMC,SAAS,GAAG,WAAlB;AACA,MAAMC,gBAAgB,GAAG,kBAAzB;AACA,MAAMC,kBAAkB,GAAG,oBAA3B;AACA,MAAMC,SAAS,GAAG,WAAlB;AACA,MAAMC,gBAAgB,GAAG,kBAAzB;AACA,MAAMC,eAAe,GAAG,iBAAxB;AAEA,IAAIC,YAAY,GAAG;AACfC,EAAAA,KAAK,EAAE,EADQ;AAEfC,EAAAA,eAAe,EAAE,EAFF;AAGfC,EAAAA,OAAO,EAAE;AAHM,CAAnB;;AAMA,MAAMC,YAAY,GAAG,CAACC,KAAK,GAAGL,YAAT,EAAuBM,MAAvB,KAAkC;AAEnD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKb,SAAL;AACI,+BACOW,KADP;AAEIJ,QAAAA,KAAK,EAAE,CAAC,GAAGI,KAAK,CAACJ,KAAV,EAAiB;AAACO,UAAAA,IAAI,EAAEH,KAAK,CAACH,eAAb;AAA8BO,UAAAA,EAAE,EAAE,CAAlC;AAAqCC,UAAAA,UAAU,EAAE;AAAjD,SAAjB,CAFX;AAGIR,QAAAA,eAAe,EAAE;AAHrB;;AAMJ,SAAKP,gBAAL;AACI,+BACOU,KADP;AAEIH,QAAAA,eAAe,EAAEI,MAAM,CAACK;AAF5B;;AAIJ,SAAKd,SAAL;AACI,+BAAYQ,KAAZ;AAAmBO,QAAAA,KAAK,EAAEN,MAAM,CAACM;AAAjC;;AACJ,SAAKd,gBAAL;AACI,+BAAWO,KAAX;AAAkBF,QAAAA,OAAO,EAAEG,MAAM,CAACH;AAAlC;;AACJ,SAAKJ,eAAL;AACI,+BAAYM,KAAZ;AAAmBQ,QAAAA,MAAM,EAAEP,MAAM,CAACO;AAAlC;;AACJ;AAAS,aAAOR,KAAP;AAnBb;AAuBH,CAzBD;;AA2BA,OAAO,MAAMS,QAAQ,GAAG,OAAO;AAAEP,EAAAA,IAAI,EAAEb;AAAR,CAAP,CAAjB;AACP,OAAO,MAAMqB,UAAU,GAAIJ,OAAD,KAAc;AAAEJ,EAAAA,IAAI,EAAEZ,gBAAR;AAA0BgB,EAAAA;AAA1B,CAAd,CAAnB;AACP,OAAO,MAAMK,QAAQ,GAAIf,KAAD,KAAY;AAAEM,EAAAA,IAAI,EAAEZ,gBAAR;AAA0BM,EAAAA;AAA1B,CAAZ,CAAjB;AACP,OAAO,MAAMgB,cAAc,GAAId,OAAD,KAAc;AAACI,EAAAA,IAAI,EAAET,gBAAP;AAAyBK,EAAAA;AAAzB,CAAd,CAAvB;AACP,OAAO,MAAMe,aAAa,GAAIL,MAAD,KAAa;AAACN,EAAAA,IAAI,EAAER,eAAP;AAAwBc,EAAAA;AAAxB,CAAb,CAAtB;AACP,OAAO,MAAMM,eAAe,GAAIC,MAAD,IAAaC,QAAD,IAAc;AACrD5B,EAAAA,UAAU,CAAC6B,UAAX,CAAsBF,MAAtB,EAA8BG,IAA9B,CAAmCC,IAAI,IAAI;AAEnCH,IAAAA,QAAQ,CAACJ,cAAc,CAACO,IAAD,CAAf,CAAR;AACH,GAHL;AAIH,CALM;AAMP,OAAO,MAAMC,cAAc,GAAIL,MAAD,IAAaC,QAAD,IAAc;AACpD5B,EAAAA,UAAU,CAACiC,aAAX,CAAyBN,MAAzB,EAAiCG,IAAjC,CAAsCC,IAAI,IAAI;AAEtCH,IAAAA,QAAQ,CAACJ,cAAc,CAACO,IAAD,CAAf,CAAR;AACH,GAHL;AAIH,CALM;AAMP,eAAepB,YAAf","sourcesContent":["import {profileAPI} from '../API/api'\r\n\r\nconst SEND_POST = 'SEND_POST';\r\nconst UPDATE_POST_TEXT = 'UPDATE_POST_TEXT';\r\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING';\r\nconst SET_POSTS = 'SET_POSTS';\r\nconst SET_USER_PROFILE = 'SET_USER_PROFILE';\r\nconst SET_USER_STATUS = 'SET_USER_STATUS';\r\n\r\nlet initialState = {\r\n    posts: [],\r\n    currentTextPost: '',\r\n    profile: null\r\n}\r\n\r\nconst postsReducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n        case SEND_POST:\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, {text: state.currentTextPost, id: 1, likesCount: 0}],\r\n                currentTextPost: ''\r\n            }\r\n\r\n        case UPDATE_POST_TEXT:\r\n            return {\r\n                ...state,\r\n                currentTextPost: action.newText\r\n            }\r\n        case SET_POSTS:\r\n            return { ...state, users: action.users }\r\n        case SET_USER_PROFILE:\r\n            return {...state, profile: action.profile}        \r\n        case SET_USER_STATUS:\r\n            return { ...state, status: action.status}\r\n        default: return state;\r\n\r\n    }\r\n\r\n}\r\n\r\nexport const sendPost = () => ({ type: SEND_POST });\r\nexport const updatePost = (newText) => ({ type: UPDATE_POST_TEXT, newText });\r\nexport const setPosts = (posts) => ({ type: UPDATE_POST_TEXT, posts });\r\nexport const setUserProfile = (profile) => ({type: SET_USER_PROFILE, profile});\r\nexport const setUserStatus = (status) => ({type: SET_USER_STATUS, status })\r\nexport const getProfileThunk = (userId) => (dispatch) => {\r\n    profileAPI.getProfile(userId).then(data => {\r\n            \r\n            dispatch(setUserProfile(data));\r\n        })\r\n}\r\nexport const getStatusThunk = (userId) => (dispatch) => {\r\n    profileAPI.getUserStatus(userId).then(data => {\r\n            \r\n            dispatch(setUserProfile(data));\r\n        })\r\n}\r\nexport default postsReducer;"]},"metadata":{},"sourceType":"module"}