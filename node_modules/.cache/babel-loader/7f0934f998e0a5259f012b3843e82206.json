{"ast":null,"code":"import _classCallCheck from\"C:\\\\Users\\\\WOW\\\\Documents\\\\GitHub\\\\react\\\\react-test\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\WOW\\\\Documents\\\\GitHub\\\\react\\\\react-test\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"C:\\\\Users\\\\WOW\\\\Documents\\\\GitHub\\\\react\\\\react-test\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"C:\\\\Users\\\\WOW\\\\Documents\\\\GitHub\\\\react\\\\react-test\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";import _inherits from\"C:\\\\Users\\\\WOW\\\\Documents\\\\GitHub\\\\react\\\\react-test\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import React from'react';import Profile from'./Profile';import{connect}from'react-redux';import{resetProfile,setUserProfile,sendPostThunk,savePhotoThunk,getProfileThunk,getStatusThunk,updateStatusThunk,saveProfileData,setEditProfile,getFollowedThunk,followUnfollow,setMessageMode,setPopupAvatar,likesToggle,deletePost,sortByTime,sortByLikes,setIsUserExist}from'./../../redux/profile-reducer';import{messageFromPopUp}from'./../../redux/messages-reducer';import{withRouter,Redirect}from'react-router-dom';import withAuthRedirect from'../../hoc/withAuthRedirect';import{compose}from'redux';import{profileStatus,profilePosts,getIsAuth,getAuthId,getIsEditMode,getProfile,getFollowed,getIsFetching,getIsSendMode,getIsAvatarPopup,getIsUserExist}from'./profile-selectors';import Preloader from'../common/Preloader/Preloader';var ProfileContainer=/*#__PURE__*/function(_React$Component){_inherits(ProfileContainer,_React$Component);function ProfileContainer(){_classCallCheck(this,ProfileContainer);return _possibleConstructorReturn(this,_getPrototypeOf(ProfileContainer).apply(this,arguments));}_createClass(ProfileContainer,[{key:\"refreshProfile\",value:function refreshProfile(){var userId=this.props.match.params.userId;this.props.getProfileThunk(userId);this.props.getStatusThunk(userId);this.props.getFollowedThunk(userId);}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){this.props.resetProfile();}},{key:\"componentDidMount\",value:function componentDidMount(){this.refreshProfile();}},{key:\"componentDidUpdate\",value:function componentDidUpdate(prevProps,prevState){if(prevProps.match.params.userId!==this.props.match.params.userId){this.props.resetProfile();this.refreshProfile();}}},{key:\"render\",value:function render(){return React.createElement(React.Fragment,null,this.props.isFetching&&React.createElement(Preloader,null),this.props.IsUserExist?React.createElement(Profile,Object.assign({},this.props,{userId:this.props.match.params.userId,isMyPage:this.props.authId.toString()===this.props.match.params.userId.toString()})):React.createElement(Redirect,{to:\"/error404\"}));}}]);return ProfileContainer;}(React.Component);var mapStateToProps=function mapStateToProps(state){return{profile:getProfile(state),status:profileStatus(state),posts:profilePosts(state),isAuth:getIsAuth(state),authId:getAuthId(state),isEditMode:getIsEditMode(state),isFollowed:getFollowed(state),isFetching:getIsFetching(state),sendMessageMode:getIsSendMode(state),avatarPopup:getIsAvatarPopup(state),IsUserExist:getIsUserExist(state)};};export default compose(connect(mapStateToProps,{setUserProfile:setUserProfile,sendPostThunk:sendPostThunk,getProfileThunk:getProfileThunk,getStatusThunk:getStatusThunk,updateStatusThunk:updateStatusThunk,savePhotoThunk:savePhotoThunk,saveProfileData:saveProfileData,setEditProfile:setEditProfile,resetProfile:resetProfile,getFollowedThunk:getFollowedThunk,followUnfollow:followUnfollow,setMessageMode:setMessageMode,setPopupAvatar:setPopupAvatar,likesToggle:likesToggle,deletePost:deletePost,sortByTime:sortByTime,sortByLikes:sortByLikes,messageFromPopUp:messageFromPopUp,setIsUserExist:setIsUserExist}),withRouter,withAuthRedirect)(ProfileContainer);","map":{"version":3,"sources":["C:/Users/WOW/Documents/GitHub/react/react-test/src/components/Profile/ProfileContainer.jsx"],"names":["React","Profile","connect","resetProfile","setUserProfile","sendPostThunk","savePhotoThunk","getProfileThunk","getStatusThunk","updateStatusThunk","saveProfileData","setEditProfile","getFollowedThunk","followUnfollow","setMessageMode","setPopupAvatar","likesToggle","deletePost","sortByTime","sortByLikes","setIsUserExist","messageFromPopUp","withRouter","Redirect","withAuthRedirect","compose","profileStatus","profilePosts","getIsAuth","getAuthId","getIsEditMode","getProfile","getFollowed","getIsFetching","getIsSendMode","getIsAvatarPopup","getIsUserExist","Preloader","ProfileContainer","userId","props","match","params","refreshProfile","prevProps","prevState","isFetching","IsUserExist","authId","toString","Component","mapStateToProps","state","profile","status","posts","isAuth","isEditMode","isFollowed","sendMessageMode","avatarPopup"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Profile from './Profile'\r\nimport { connect } from 'react-redux';\r\nimport { resetProfile, setUserProfile, sendPostThunk, savePhotoThunk, getProfileThunk, getStatusThunk, updateStatusThunk, saveProfileData, setEditProfile,\r\n getFollowedThunk, followUnfollow, setMessageMode, setPopupAvatar, likesToggle, deletePost, sortByTime, sortByLikes, setIsUserExist} from './../../redux/profile-reducer';\r\nimport {messageFromPopUp} from './../../redux/messages-reducer'\r\nimport { withRouter, Redirect } from 'react-router-dom';\r\nimport withAuthRedirect from '../../hoc/withAuthRedirect';\r\nimport { compose } from 'redux';\r\nimport { profileStatus, profilePosts, getIsAuth, getAuthId, getIsEditMode, getProfile, getFollowed, getIsFetching, getIsSendMode, getIsAvatarPopup,getIsUserExist } from './profile-selectors';\r\nimport Preloader from '../common/Preloader/Preloader';\r\n\r\n\r\nclass ProfileContainer extends React.Component {\r\n   \r\n     refreshProfile(){\r\n        \r\n        let userId = this.props.match.params.userId;\r\n        this.props.getProfileThunk(userId);\r\n        this.props.getStatusThunk(userId);\r\n        this.props.getFollowedThunk(userId);\r\n    }\r\n    componentWillUnmount(){\r\n        this.props.resetProfile();\r\n        \r\n    }\r\n    componentDidMount(){\r\n        this.refreshProfile()\r\n        \r\n    }\r\n    componentDidUpdate(prevProps, prevState){\r\n        if(prevProps.match.params.userId !== this.props.match.params.userId){\r\n            this.props.resetProfile();\r\n            this.refreshProfile();\r\n        }\r\n    }\r\n    render() {\r\n      \r\n        return <>\r\n                {this.props.isFetching && < Preloader/>}\r\n                {this.props.IsUserExist \r\n                 ?<Profile {...this.props} userId={this.props.match.params.userId}  isMyPage={this.props.authId.toString() === this.props.match.params.userId.toString()}   />\r\n                 :<Redirect to='/error404' />\r\n                }\r\n            </>\r\n    }   \r\n\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    profile: getProfile(state),\r\n    status: profileStatus(state),\r\n    posts: profilePosts(state),\r\n    isAuth: getIsAuth(state),\r\n    authId: getAuthId(state),\r\n    isEditMode: getIsEditMode(state),\r\n    isFollowed: getFollowed(state),\r\n    isFetching: getIsFetching(state),\r\n    sendMessageMode: getIsSendMode(state),\r\n    avatarPopup: getIsAvatarPopup(state),\r\n    IsUserExist: getIsUserExist(state)\r\n})\r\n\r\n\r\n export default compose(\r\n    connect(mapStateToProps, { setUserProfile, sendPostThunk,  getProfileThunk, getStatusThunk, \r\n        updateStatusThunk, savePhotoThunk, saveProfileData, setEditProfile, resetProfile, getFollowedThunk, followUnfollow, setMessageMode, setPopupAvatar, \r\n        likesToggle, deletePost, sortByTime, sortByLikes, messageFromPopUp, setIsUserExist }),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer);"]},"metadata":{},"sourceType":"module"}