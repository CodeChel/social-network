{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\WOW\\\\Documents\\\\GitHub\\\\react\\\\react-test\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\WOW\\\\Documents\\\\GitHub\\\\react\\\\react-test\\\\src\\\\components\\\\Messages-container\\\\Messages\\\\Dialog.jsx\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport MessageItem from '../../MessageItem/MessageItem';\nimport styles from './Messages.module.css';\nimport { reduxForm, reset, change } from 'redux-form';\nimport { createField } from '../../common/FormControls/FormControls';\nimport { required, voidValue } from '../../../utils/validators/validator';\nimport ScrollbarHOC from '../../common/HOCScrollBar/HOCScrollbarCusctom';\nimport { NavLink } from 'react-router-dom';\nimport 'emoji-mart/css/emoji-mart.css';\nimport { Picker } from 'emoji-mart';\nimport { connect } from 'react-redux';\n\nconst Dialog = props => {\n  let messageItems = props.messages.map((item, index) => React.createElement(MessageItem, {\n    time: item.timeFormat,\n    key: index,\n    right: item.right,\n    message: item.message,\n    id: item.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }));\n  const scrollBar = useRef();\n  useEffect(() => {\n    !props.isSearchMode && document.querySelector(\"textarea[name=message\".concat(props.userId, \"]\")).focus();\n  });\n  useEffect(() => {\n    scrollBar.current.scrollToBottom();\n  }, [messageItems]);\n  return React.createElement(\"div\", {\n    className: styles.dialog,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: styles.dialogHead,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: styles.avatarContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, React.createElement(NavLink, {\n    to: \"/profile/\".concat(props.userId),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    className: styles.avatar,\n    src: props.avatar,\n    alt: \"avatar\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }))), React.createElement(\"span\", {\n    className: styles.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, React.createElement(NavLink, {\n    to: \"/profile/\".concat(props.userId),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, props.name))), React.createElement(ScrollbarHOC, {\n    children: React.createElement(\"div\", {\n      className: styles.messagesFill,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, messageItems),\n    autoHide: true,\n    ref: scrollBar,\n    removeTrackYWhenNotUsed: true,\n    style: {\n      width: \"100%\",\n      height: \"75%\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: styles.formContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, React.createElement(AddMessageFormWithConnect, {\n    userId: props.userId,\n    name: props.name,\n    onSubmit: data => {\n      props.sendMessage(data[\"message\".concat(props.userId)], props.userId);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  })));\n};\n\nconst AddMessageForm = props => {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        emojiPickerMode = _useState2[0],\n        setEPMode = _useState2[1];\n\n  const addEmoji = e => {\n    const sym = e.unified.split('-');\n    const codesArray = [];\n    sym.map(el => codesArray.push('0x' + el));\n    const emoji = String.fromCodePoint(...codesArray);\n    props.dispatch(change('addMessageForm', \"message\".concat(props.userId), props.addMessageForm.values ? props.addMessageForm.values[\"message\".concat(props.userId)] + emoji : emoji));\n  };\n\n  const onKeyHandler = e => {\n    if (e.keyCode == 13 && e.shiftKey == false) {\n      if (e.target.name == \"message\".concat(props.userId)) {\n        e.preventDefault();\n        props.handleSubmit();\n      }\n    }\n  };\n\n  return React.createElement(\"form\", {\n    onKeyDown: onKeyHandler,\n    onSubmit: props.handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, createField(\"write message to \".concat(props.name), \"message\".concat(props.userId), [required, voidValue], 'textarea', null, null, {\n    autoFocus: true\n  }), props.dirty && React.createElement(\"button\", {\n    className: styles.buttonForm,\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    onMouseEnter: () => {\n      setEPMode(true);\n    },\n    onMouseLeave: () => {\n      setEPMode(false);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    role: \"button\",\n    className: styles.buttomEmoji,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }), emojiPickerMode && React.createElement(Picker, {\n    style: {\n      position: 'absolute',\n      bottom: '80px',\n      right: '20px'\n    },\n    onSelect: addEmoji,\n    native: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  })));\n};\n\nconst afterSumbit = (result, dispatch) => {\n  dispatch(reset('addMessageForm'));\n};\n\nconst AddMessageFormRedux = reduxForm({\n  form: 'addMessageForm',\n  onSubmitSuccess: afterSumbit\n})(AddMessageForm);\n\nconst mapStateToPropse = state => ({\n  addMessageForm: state.form.addMessageForm\n});\n\nconst AddMessageFormWithConnect = connect(mapStateToPropse)(AddMessageFormRedux);\nexport default Dialog;","map":{"version":3,"sources":["C:\\Users\\WOW\\Documents\\GitHub\\react\\react-test\\src\\components\\Messages-container\\Messages\\Dialog.jsx"],"names":["React","useEffect","useRef","useState","MessageItem","styles","reduxForm","reset","change","createField","required","voidValue","ScrollbarHOC","NavLink","Picker","connect","Dialog","props","messageItems","messages","map","item","index","timeFormat","right","message","id","scrollBar","isSearchMode","document","querySelector","userId","focus","current","scrollToBottom","dialog","dialogHead","avatarContainer","avatar","name","messagesFill","width","height","formContainer","data","sendMessage","AddMessageForm","emojiPickerMode","setEPMode","addEmoji","e","sym","unified","split","codesArray","el","push","emoji","String","fromCodePoint","dispatch","addMessageForm","values","onKeyHandler","keyCode","shiftKey","target","preventDefault","handleSubmit","autoFocus","dirty","buttonForm","buttomEmoji","position","bottom","afterSumbit","result","AddMessageFormRedux","form","onSubmitSuccess","mapStateToPropse","state","AddMessageFormWithConnect"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\r\n\r\nimport MessageItem from '../../MessageItem/MessageItem'\r\nimport styles from './Messages.module.css'\r\nimport { reduxForm, reset, change } from 'redux-form';\r\nimport { createField } from '../../common/FormControls/FormControls';\r\nimport { required, voidValue } from '../../../utils/validators/validator';\r\nimport ScrollbarHOC from '../../common/HOCScrollBar/HOCScrollbarCusctom';\r\nimport { NavLink } from 'react-router-dom';\r\nimport 'emoji-mart/css/emoji-mart.css'\r\nimport { Picker } from 'emoji-mart'\r\nimport { connect } from 'react-redux'\r\n\r\n\r\n\r\nconst Dialog = (props) => {\r\n    let messageItems = props.messages.map((item, index) => <MessageItem time={item.timeFormat} key={index} right={item.right} message={item.message} id={item.id} />)\r\n\r\n    const scrollBar = useRef()\r\n\r\n    useEffect(() => {\r\n        !props.isSearchMode && document.querySelector(`textarea[name=message${props.userId}]`).focus()\r\n    })\r\n\r\n    useEffect(() => {\r\n        scrollBar.current.scrollToBottom();\r\n    }, [messageItems])\r\n    return <div className={styles.dialog}>\r\n        <div className={styles.dialogHead}>\r\n            <div className={styles.avatarContainer}>\r\n                <NavLink to={`/profile/${props.userId}`}>\r\n                    <img className={styles.avatar} src={props.avatar} alt=\"avatar\" />\r\n                </NavLink>\r\n            </div>\r\n            <span className={styles.name}>\r\n                <NavLink to={`/profile/${props.userId}`}>\r\n                    {props.name}\r\n                </NavLink>\r\n            </span>\r\n        </div>\r\n        <ScrollbarHOC children={<div className={styles.messagesFill}>{messageItems}</div>} autoHide ref={scrollBar} removeTrackYWhenNotUsed={true} style={{ width: \"100%\", height: \"75%\" }} />\r\n\r\n        <div className={styles.formContainer}>\r\n            <AddMessageFormWithConnect  userId={props.userId} name={props.name} onSubmit={(data) => {  props.sendMessage(data[`message${props.userId}`], props.userId) }} />\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\nconst AddMessageForm = (props) => {\r\n    const [emojiPickerMode, setEPMode] = useState(false);\r\n\r\n   \r\n    \r\n    const addEmoji = (e) => {\r\n        const sym = e.unified.split('-')\r\n        const codesArray = []\r\n\r\n        sym.map(el => codesArray.push('0x' + el))\r\n        const emoji = String.fromCodePoint(...codesArray)\r\n\r\n        props.dispatch(change('addMessageForm', `message${props.userId}`, props.addMessageForm.values ? props.addMessageForm.values[`message${props.userId}`] + emoji : emoji));\r\n    }\r\n    const onKeyHandler = (e) => {\r\n        if (e.keyCode == 13 && e.shiftKey == false) {\r\n            if (e.target.name == `message${props.userId}`) {\r\n                e.preventDefault();\r\n                props.handleSubmit();\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    return <form onKeyDown={onKeyHandler} onSubmit={props.handleSubmit}>\r\n        {createField(`write message to ${props.name}`, `message${props.userId}`, [required, voidValue], 'textarea', null, null, { autoFocus: true })}\r\n\r\n        {props.dirty && <button className={styles.buttonForm} type=\"submit\"></button>}\r\n\r\n        <div onMouseEnter={()=>{setEPMode(true)}} onMouseLeave={()=>{setEPMode(false)}}>\r\n            <span role='button' className={styles.buttomEmoji}></span>\r\n            {emojiPickerMode && <Picker  style={{ position: 'absolute', bottom: '80px', right: '20px' }}  onSelect={addEmoji} native={true} />}\r\n        </div>\r\n\r\n\r\n    </form>\r\n}\r\nconst afterSumbit = (result, dispatch) => {\r\n    dispatch(reset('addMessageForm'))\r\n}\r\nconst AddMessageFormRedux = reduxForm({\r\n    form: 'addMessageForm',\r\n    onSubmitSuccess: afterSumbit\r\n})(AddMessageForm);\r\nconst mapStateToPropse = (state) => ({\r\n    addMessageForm: state.form.addMessageForm\r\n})\r\n\r\nconst AddMessageFormWithConnect = connect(mapStateToPropse)(AddMessageFormRedux)\r\n\r\n\r\nexport default Dialog;"]},"metadata":{},"sourceType":"module"}