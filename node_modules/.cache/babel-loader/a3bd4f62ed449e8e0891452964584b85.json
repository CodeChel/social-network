{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\WOW\\\\Documents\\\\GitHub\\\\react\\\\react-test\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"C:\\\\Users\\\\WOW\\\\Documents\\\\GitHub\\\\react\\\\react-test\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"C:\\\\Users\\\\WOW\\\\Documents\\\\GitHub\\\\react\\\\react-test\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"C:\\\\Users\\\\WOW\\\\Documents\\\\GitHub\\\\react\\\\react-test\\\\src\\\\components\\\\common\\\\HOCScrollBar\\\\HOCScrollbarCusctom.jsx\";\nimport React, { useCallback, useMemo, useState } from \"react\";\nimport ReactScrollbarsCustom from \"react-scrollbars-custom\";\nconst ScrollbarHOC = React.forwardRef((_ref, ref) => {\n  let children = _ref.children,\n      props = _objectWithoutProperties(_ref, [\"children\"]);\n\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        isScrolling = _useState2[0],\n        setIsScrolling = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        isMouseOver = _useState4[0],\n        setIsMouseOver = _useState4[1];\n\n  const isShow = isScrolling || isMouseOver;\n  const onScrollStart = useCallback(() => {\n    setIsScrolling(true);\n  }, []);\n  const onScrollStop = useCallback(() => {\n    setIsScrolling(false);\n  }, []);\n  const onMouseEnter = useCallback(() => {\n    setIsMouseOver(true);\n  }, []);\n  const onMouseLeave = useCallback(() => {\n    setIsMouseOver(false);\n  }, []);\n  const trackProps = useMemo(() => ({\n    renderer: (_ref2) => {\n      let elementRef = _ref2.elementRef,\n          style = _ref2.style,\n          restProps = _objectWithoutProperties(_ref2, [\"elementRef\", \"style\"]);\n\n      return React.createElement(\"span\", Object.assign({}, restProps, {\n        ref: elementRef,\n        style: _objectSpread({}, style, {\n          opacity: isShow ? 1 : 0,\n          transition: \"opacity 0.4s ease-in-out\"\n        }),\n        onMouseEnter: onMouseEnter,\n        onMouseLeave: onMouseLeave,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }));\n    }\n  }), [isShow, onMouseEnter, onMouseLeave]);\n  return React.createElement(ReactScrollbarsCustom, Object.assign({}, props, {\n    wrapperProps: {\n      renderer: (_ref3) => {\n        let elementRef = _ref3.elementRef,\n            style = _ref3.style,\n            restProps = _objectWithoutProperties(_ref3, [\"elementRef\", \"style\"]);\n\n        return React.createElement(\"div\", Object.assign({}, restProps, {\n          ref: elementRef,\n          style: _objectSpread({}, style, {\n            right: 0\n          }),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 39\n          },\n          __self: this\n        }));\n      }\n    },\n    trackXProps: trackProps,\n    trackYProps: trackProps,\n    onScrollStart: onScrollStart,\n    onScrollStop: onScrollStop,\n    scrollDetectionThreshold: 500 // ms\n    ,\n    ref: ref,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }), children);\n});\nexport default ScrollbarHOC;","map":{"version":3,"sources":["C:\\Users\\WOW\\Documents\\GitHub\\react\\react-test\\src\\components\\common\\HOCScrollBar\\HOCScrollbarCusctom.jsx"],"names":["React","useCallback","useMemo","useState","ReactScrollbarsCustom","ScrollbarHOC","forwardRef","ref","children","props","isScrolling","setIsScrolling","isMouseOver","setIsMouseOver","isShow","onScrollStart","onScrollStop","onMouseEnter","onMouseLeave","trackProps","renderer","elementRef","style","restProps","opacity","transition","right"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,OAA7B,EAAsCC,QAAtC,QAAsD,OAAtD;AACA,OAAOC,qBAAP,MAAkC,yBAAlC;AAEA,MAAOC,YAAY,GAAGL,KAAK,CAACM,UAAN,CAAiB,OAAwBC,GAAxB,KAAgC;AAAA,MAA7BC,QAA6B,QAA7BA,QAA6B;AAAA,MAAhBC,KAAgB;;AAAA,oBAC/BN,QAAQ,CAAC,KAAD,CADuB;AAAA;AAAA,QAC9DO,WAD8D;AAAA,QACjDC,cADiD;;AAAA,qBAE/BR,QAAQ,CAAC,KAAD,CAFuB;AAAA;AAAA,QAE9DS,WAF8D;AAAA,QAEjDC,cAFiD;;AAGrE,QAAMC,MAAM,GAAGJ,WAAW,IAAIE,WAA9B;AAEA,QAAMG,aAAa,GAAGd,WAAW,CAAC,MAAM;AACtCU,IAAAA,cAAc,CAAC,IAAD,CAAd;AACD,GAFgC,EAE9B,EAF8B,CAAjC;AAGA,QAAMK,YAAY,GAAGf,WAAW,CAAC,MAAM;AACrCU,IAAAA,cAAc,CAAC,KAAD,CAAd;AACD,GAF+B,EAE7B,EAF6B,CAAhC;AAGA,QAAMM,YAAY,GAAGhB,WAAW,CAAC,MAAM;AACrCY,IAAAA,cAAc,CAAC,IAAD,CAAd;AACD,GAF+B,EAE7B,EAF6B,CAAhC;AAGA,QAAMK,YAAY,GAAGjB,WAAW,CAAC,MAAM;AACrCY,IAAAA,cAAc,CAAC,KAAD,CAAd;AACD,GAF+B,EAE7B,EAF6B,CAAhC;AAIA,QAAMM,UAAU,GAAGjB,OAAO,CAAC,OAAO;AAChCkB,IAAAA,QAAQ,EAAE;AAAA,UAAGC,UAAH,SAAGA,UAAH;AAAA,UAAeC,KAAf,SAAeA,KAAf;AAAA,UAAyBC,SAAzB;;AAAA,aACR,8CACMA,SADN;AAEE,QAAA,GAAG,EAAEF,UAFP;AAGE,QAAA,KAAK,oBAAOC,KAAP;AAAcE,UAAAA,OAAO,EAAEV,MAAM,GAAG,CAAH,GAAO,CAApC;AAAuCW,UAAAA,UAAU,EAAE;AAAnD,UAHP;AAIE,QAAA,YAAY,EAAER,YAJhB;AAKE,QAAA,YAAY,EAAEC,YALhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADQ;AAAA;AADsB,GAAP,CAAD,EAUtB,CAACJ,MAAD,EAASG,YAAT,EAAuBC,YAAvB,CAVsB,CAA1B;AAYA,SACE,oBAAC,qBAAD,oBACMT,KADN;AAEE,IAAA,YAAY,EAAE;AACZW,MAAAA,QAAQ,EAAE;AAAA,YAAGC,UAAH,SAAGA,UAAH;AAAA,YAAeC,KAAf,SAAeA,KAAf;AAAA,YAAyBC,SAAzB;;AAAA,eACR,6CAASA,SAAT;AAAoB,UAAA,GAAG,EAAEF,UAAzB;AAAqC,UAAA,KAAK,oBAAOC,KAAP;AAAcI,YAAAA,KAAK,EAAE;AAArB,YAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADQ;AAAA;AADE,KAFhB;AAOE,IAAA,WAAW,EAAEP,UAPf;AAQE,IAAA,WAAW,EAAEA,UARf;AASE,IAAA,aAAa,EAAEJ,aATjB;AAUE,IAAA,YAAY,EAAEC,YAVhB;AAWE,IAAA,wBAAwB,EAAE,GAX5B,CAWiC;AAXjC;AAYE,IAAA,GAAG,EAAET,GAZP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAcGC,QAdH,CADF;AAmBD,CAjDqB,CAAtB;AAkDA,eAAeH,YAAf","sourcesContent":["import React, { useCallback, useMemo, useState } from \"react\";\r\nimport ReactScrollbarsCustom from \"react-scrollbars-custom\";\r\n\r\nconst  ScrollbarHOC = React.forwardRef(({ children, ...props}, ref) => {\r\n  const [isScrolling, setIsScrolling] = useState(false);\r\n  const [isMouseOver, setIsMouseOver] = useState(false);\r\n  const isShow = isScrolling || isMouseOver;\r\n\r\n  const onScrollStart = useCallback(() => {\r\n    setIsScrolling(true);\r\n  }, []);\r\n  const onScrollStop = useCallback(() => {\r\n    setIsScrolling(false);\r\n  }, []);\r\n  const onMouseEnter = useCallback(() => {\r\n    setIsMouseOver(true);\r\n  }, []);\r\n  const onMouseLeave = useCallback(() => {\r\n    setIsMouseOver(false);\r\n  }, []);\r\n\r\n  const trackProps = useMemo(() => ({\r\n    renderer: ({ elementRef, style, ...restProps }) => (\r\n      <span\r\n        {...restProps}\r\n        ref={elementRef}\r\n        style={{ ...style, opacity: isShow ? 1 : 0, transition: \"opacity 0.4s ease-in-out\", }}\r\n        onMouseEnter={onMouseEnter}\r\n        onMouseLeave={onMouseLeave}\r\n      />\r\n    )\r\n  }), [isShow, onMouseEnter, onMouseLeave]);\r\n\r\n  return (\r\n    <ReactScrollbarsCustom\r\n      {...props}\r\n      wrapperProps={{\r\n        renderer: ({ elementRef, style, ...restProps }) => (\r\n          <div {...restProps} ref={elementRef} style={{ ...style, right: 0 }} />\r\n        ),\r\n      }}\r\n      trackXProps={trackProps}\r\n      trackYProps={trackProps}\r\n      onScrollStart={onScrollStart}\r\n      onScrollStop={onScrollStop}\r\n      scrollDetectionThreshold={500} // ms\r\n      ref={ref}\r\n    >\r\n      {children}\r\n    </ReactScrollbarsCustom>\r\n  );\r\n\r\n})\r\nexport default ScrollbarHOC;"]},"metadata":{},"sourceType":"module"}