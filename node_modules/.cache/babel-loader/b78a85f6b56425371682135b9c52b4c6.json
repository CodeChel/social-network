{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\WOW\\\\Documents\\\\GitHub\\\\react\\\\react-test\\\\src\\\\components\\\\Profile\\\\ProfileContainer.jsx\";\nimport React from 'react';\nimport Profile from './Profile';\nimport { connect } from 'react-redux';\nimport { setUserProfile, sendPost, savePhotoThunk, getProfileThunk, getStatusThunk, updateStatusThunk } from './../../redux/profile-reducer';\nimport { withRouter } from 'react-router-dom';\nimport withAuthRedirect from '../../hoc/withAuthRedirect';\nimport { compose } from 'redux';\n\nclass ProfileContainer extends React.Component {\n  refreshProfile() {\n    this.props.onMyPage = false;\n    let userId = this.props.match.params.userId;\n\n    if (userId === this.props.authId) {\n      userId = this.props.authId;\n      this.props.onMyPage = true;\n    }\n\n    this.props.getProfileThunk(userId);\n    this.props.getStatusThunk(userId);\n  }\n\n  componentDidMount() {\n    this.refreshProfile();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.match.params.userId !== this.props.match.params.userId) {\n      this.refreshProfile();\n    }\n  }\n\n  render() {\n    return React.createElement(Profile, Object.assign({}, this.props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  ProfilePage: state.ProfilePage,\n  profile: state.ProfilePage.profile,\n  status: state.ProfilePage.status,\n  posts: state.ProfilePage.posts,\n  isAuth: state.auth.isAuth,\n  authId: state.auth.id\n});\n\nexport default compose(connect(mapStateToProps, {\n  setUserProfile,\n  sendPost,\n  getProfileThunk,\n  getStatusThunk,\n  updateStatusThunk,\n  savePhotoThunk\n}), withRouter, withAuthRedirect)(ProfileContainer);","map":{"version":3,"sources":["C:\\Users\\WOW\\Documents\\GitHub\\react\\react-test\\src\\components\\Profile\\ProfileContainer.jsx"],"names":["React","Profile","connect","setUserProfile","sendPost","savePhotoThunk","getProfileThunk","getStatusThunk","updateStatusThunk","withRouter","withAuthRedirect","compose","ProfileContainer","Component","refreshProfile","props","onMyPage","userId","match","params","authId","componentDidMount","componentDidUpdate","prevProps","prevState","render","mapStateToProps","state","ProfilePage","profile","status","posts","isAuth","auth","id"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,cAAT,EAAyBC,QAAzB,EAAmCC,cAAnC,EAAmDC,eAAnD,EAAoEC,cAApE,EAAoFC,iBAApF,QAA6G,+BAA7G;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,gBAAP,MAA6B,4BAA7B;AACA,SAASC,OAAT,QAAwB,OAAxB;;AAEA,MAAMC,gBAAN,SAA+BZ,KAAK,CAACa,SAArC,CAA+C;AAC1CC,EAAAA,cAAc,GAAE;AACb,SAAKC,KAAL,CAAWC,QAAX,GAAsB,KAAtB;AACA,QAAIC,MAAM,GAAG,KAAKF,KAAL,CAAWG,KAAX,CAAiBC,MAAjB,CAAwBF,MAArC;;AACA,QAAIA,MAAM,KAAK,KAAKF,KAAL,CAAWK,MAA1B,EAAkC;AAC9BH,MAAAA,MAAM,GAAG,KAAKF,KAAL,CAAWK,MAApB;AACA,WAAKL,KAAL,CAAWC,QAAX,GAAsB,IAAtB;AACH;;AAED,SAAKD,KAAL,CAAWT,eAAX,CAA2BW,MAA3B;AACA,SAAKF,KAAL,CAAWR,cAAX,CAA0BU,MAA1B;AACH;;AACDI,EAAAA,iBAAiB,GAAE;AACf,SAAKP,cAAL;AACH;;AACDQ,EAAAA,kBAAkB,CAACC,SAAD,EAAYC,SAAZ,EAAsB;AACpC,QAAGD,SAAS,CAACL,KAAV,CAAgBC,MAAhB,CAAuBF,MAAvB,KAAiC,KAAKF,KAAL,CAAWG,KAAX,CAAiBC,MAAjB,CAAwBF,MAA5D,EAAmE;AAC/D,WAAKH,cAAL;AACH;AACJ;;AACDW,EAAAA,MAAM,GAAG;AAEL,WAAO,oBAAC,OAAD,oBAAa,KAAKV,KAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;AACH;;AAvB0C;;AA2B/C,MAAMW,eAAe,GAAIC,KAAD,KAAY;AAChCC,EAAAA,WAAW,EAAED,KAAK,CAACC,WADa;AAEhCC,EAAAA,OAAO,EAAEF,KAAK,CAACC,WAAN,CAAkBC,OAFK;AAGhCC,EAAAA,MAAM,EAAEH,KAAK,CAACC,WAAN,CAAkBE,MAHM;AAIhCC,EAAAA,KAAK,EAAEJ,KAAK,CAACC,WAAN,CAAkBG,KAJO;AAKhCC,EAAAA,MAAM,EAAEL,KAAK,CAACM,IAAN,CAAWD,MALa;AAMhCZ,EAAAA,MAAM,EAAEO,KAAK,CAACM,IAAN,CAAWC;AANa,CAAZ,CAAxB;;AAUC,eAAevB,OAAO,CACnBT,OAAO,CAACwB,eAAD,EAAkB;AAAEvB,EAAAA,cAAF;AAAkBC,EAAAA,QAAlB;AAA6BE,EAAAA,eAA7B;AAA8CC,EAAAA,cAA9C;AAA8DC,EAAAA,iBAA9D;AAAiFH,EAAAA;AAAjF,CAAlB,CADY,EAEnBI,UAFmB,EAGnBC,gBAHmB,CAAP,CAIdE,gBAJc,CAAf","sourcesContent":["import React from 'react';\r\nimport Profile from './Profile'\r\nimport { connect } from 'react-redux';\r\nimport { setUserProfile, sendPost, savePhotoThunk, getProfileThunk, getStatusThunk, updateStatusThunk } from './../../redux/profile-reducer';\r\nimport { withRouter } from 'react-router-dom';\r\nimport withAuthRedirect from '../../hoc/withAuthRedirect';\r\nimport { compose } from 'redux';\r\n\r\nclass ProfileContainer extends React.Component {\r\n     refreshProfile(){\r\n        this.props.onMyPage = false;\r\n        let userId = this.props.match.params.userId;\r\n        if (userId === this.props.authId) {\r\n            userId = this.props.authId;\r\n            this.props.onMyPage = true;\r\n        }\r\n\r\n        this.props.getProfileThunk(userId);\r\n        this.props.getStatusThunk(userId);\r\n    }\r\n    componentDidMount(){\r\n        this.refreshProfile()\r\n    }\r\n    componentDidUpdate(prevProps, prevState){\r\n        if(prevProps.match.params.userId!== this.props.match.params.userId){\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n    render() {\r\n        \r\n        return <Profile {...this.props}   />\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    ProfilePage: state.ProfilePage,\r\n    profile: state.ProfilePage.profile,\r\n    status: state.ProfilePage.status,\r\n    posts: state.ProfilePage.posts,\r\n    isAuth: state.auth.isAuth,\r\n    authId: state.auth.id\r\n})\r\n\r\n\r\n export default compose(\r\n    connect(mapStateToProps, { setUserProfile, sendPost,  getProfileThunk, getStatusThunk, updateStatusThunk, savePhotoThunk }),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer);"]},"metadata":{},"sourceType":"module"}