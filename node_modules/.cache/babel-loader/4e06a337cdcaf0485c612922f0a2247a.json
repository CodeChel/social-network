{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\WOW\\\\Documents\\\\GitHub\\\\react\\\\react-test\\\\src\\\\components\\\\Profile\\\\ProfileContainer.jsx\";\nimport React from 'react';\nimport Profile from './Profile';\nimport { connect } from 'react-redux';\nimport { resetProfile, setUserProfile, sendPostThunk, savePhotoThunk, getProfileThunk, getStatusThunk, updateStatusThunk, saveProfileData, setEditProfile, getFollowedThunk, followUnfollow, setMessageMode, setPopupAvatar, likesToggle, deletePost, sortByTime, sortByLikes, setIsUserExist } from './../../redux/profile-reducer';\nimport { messageFromPopUp } from './../../redux/messages-reducer';\nimport { withRouter, Redirect } from 'react-router-dom';\nimport withAuthRedirect from '../../hoc/withAuthRedirect';\nimport { compose } from 'redux';\nimport { profileStatus, profilePosts, getIsAuth, getAuthId, getIsEditMode, getProfile, getFollowed, getIsFetching, getIsSendMode, getIsAvatarPopup, getIsUserExist } from './profile-selectors';\nimport Preloader from '../common/Preloader/Preloader';\n\nclass ProfileContainer extends React.Component {\n  refreshProfile() {\n    let userId = this.props.match.params.userId;\n    this.props.getProfileThunk(userId);\n    this.props.getStatusThunk(userId);\n    this.props.getFollowedThunk(userId);\n  }\n\n  componentWillUnmount() {\n    this.props.resetProfile();\n    this.props.setIsUserExist(true);\n  }\n\n  componentDidMount() {\n    this.refreshProfile();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.match.params.userId !== this.props.match.params.userId) {\n      this.props.resetProfile();\n      this.refreshProfile();\n    }\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, this.props.isFetching && React.createElement(Preloader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }), this.props.IsUserExist ? React.createElement(Profile, Object.assign({}, this.props, {\n      userId: this.props.match.params.userId,\n      isMyPage: this.props.authId.toString() === this.props.match.params.userId.toString(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    })) : React.createElement(Redirect, {\n      to: \"../*\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  profile: getProfile(state),\n  status: profileStatus(state),\n  posts: profilePosts(state),\n  isAuth: getIsAuth(state),\n  authId: getAuthId(state),\n  isEditMode: getIsEditMode(state),\n  isFollowed: getFollowed(state),\n  isFetching: getIsFetching(state),\n  sendMessageMode: getIsSendMode(state),\n  avatarPopup: getIsAvatarPopup(state),\n  IsUserExist: getIsUserExist(state)\n});\n\nexport default compose(connect(mapStateToProps, {\n  setUserProfile,\n  sendPostThunk,\n  getProfileThunk,\n  getStatusThunk,\n  updateStatusThunk,\n  savePhotoThunk,\n  saveProfileData,\n  setEditProfile,\n  resetProfile,\n  getFollowedThunk,\n  followUnfollow,\n  setMessageMode,\n  setPopupAvatar,\n  likesToggle,\n  deletePost,\n  sortByTime,\n  sortByLikes,\n  messageFromPopUp,\n  setIsUserExist\n}), withRouter, withAuthRedirect)(ProfileContainer);","map":{"version":3,"sources":["C:\\Users\\WOW\\Documents\\GitHub\\react\\react-test\\src\\components\\Profile\\ProfileContainer.jsx"],"names":["React","Profile","connect","resetProfile","setUserProfile","sendPostThunk","savePhotoThunk","getProfileThunk","getStatusThunk","updateStatusThunk","saveProfileData","setEditProfile","getFollowedThunk","followUnfollow","setMessageMode","setPopupAvatar","likesToggle","deletePost","sortByTime","sortByLikes","setIsUserExist","messageFromPopUp","withRouter","Redirect","withAuthRedirect","compose","profileStatus","profilePosts","getIsAuth","getAuthId","getIsEditMode","getProfile","getFollowed","getIsFetching","getIsSendMode","getIsAvatarPopup","getIsUserExist","Preloader","ProfileContainer","Component","refreshProfile","userId","props","match","params","componentWillUnmount","componentDidMount","componentDidUpdate","prevProps","prevState","render","isFetching","IsUserExist","authId","toString","mapStateToProps","state","profile","status","posts","isAuth","isEditMode","isFollowed","sendMessageMode","avatarPopup"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Profile from './Profile'\r\nimport { connect } from 'react-redux';\r\nimport { resetProfile, setUserProfile, sendPostThunk, savePhotoThunk, getProfileThunk, getStatusThunk, updateStatusThunk, saveProfileData, setEditProfile,\r\n getFollowedThunk, followUnfollow, setMessageMode, setPopupAvatar, likesToggle, deletePost, sortByTime, sortByLikes, setIsUserExist} from './../../redux/profile-reducer';\r\nimport {messageFromPopUp} from './../../redux/messages-reducer'\r\nimport { withRouter, Redirect } from 'react-router-dom';\r\nimport withAuthRedirect from '../../hoc/withAuthRedirect';\r\nimport { compose } from 'redux';\r\nimport { profileStatus, profilePosts, getIsAuth, getAuthId, getIsEditMode, getProfile, getFollowed, getIsFetching, getIsSendMode, getIsAvatarPopup,getIsUserExist } from './profile-selectors';\r\nimport Preloader from '../common/Preloader/Preloader';\r\n\r\n\r\nclass ProfileContainer extends React.Component {\r\n   \r\n     refreshProfile(){\r\n         \r\n        let userId = this.props.match.params.userId;\r\n        this.props.getProfileThunk(userId);\r\n        this.props.getStatusThunk(userId);\r\n        this.props.getFollowedThunk(userId);\r\n    }\r\n    componentWillUnmount(){\r\n        this.props.resetProfile();\r\n        this.props.setIsUserExist(true);\r\n    }\r\n    componentDidMount(){\r\n        this.refreshProfile()\r\n        \r\n    }\r\n    componentDidUpdate(prevProps, prevState){\r\n        if(prevProps.match.params.userId !== this.props.match.params.userId){\r\n            this.props.resetProfile();\r\n            this.refreshProfile();\r\n        }\r\n    }\r\n    render() {\r\n        return <>\r\n                {this.props.isFetching && < Preloader/>}\r\n                {this.props.IsUserExist \r\n                 ?<Profile {...this.props} userId={this.props.match.params.userId}  isMyPage={this.props.authId.toString() === this.props.match.params.userId.toString()}   />\r\n                 :<Redirect to='../*' />\r\n                }\r\n                \r\n            </>\r\n    }   \r\n\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    profile: getProfile(state),\r\n    status: profileStatus(state),\r\n    posts: profilePosts(state),\r\n    isAuth: getIsAuth(state),\r\n    authId: getAuthId(state),\r\n    isEditMode: getIsEditMode(state),\r\n    isFollowed: getFollowed(state),\r\n    isFetching: getIsFetching(state),\r\n    sendMessageMode: getIsSendMode(state),\r\n    avatarPopup: getIsAvatarPopup(state),\r\n    IsUserExist: getIsUserExist(state)\r\n})\r\n\r\n\r\n export default compose(\r\n    connect(mapStateToProps, { setUserProfile, sendPostThunk,  getProfileThunk, getStatusThunk, \r\n        updateStatusThunk, savePhotoThunk, saveProfileData, setEditProfile, resetProfile, getFollowedThunk, followUnfollow, setMessageMode, setPopupAvatar, \r\n        likesToggle, deletePost, sortByTime, sortByLikes, messageFromPopUp, setIsUserExist }),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer);"]},"metadata":{},"sourceType":"module"}