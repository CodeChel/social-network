{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\WOW\\\\Documents\\\\GitHub\\\\react\\\\react-test\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"C:\\\\Users\\\\WOW\\\\Documents\\\\GitHub\\\\react\\\\react-test\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"C:\\\\Users\\\\WOW\\\\Documents\\\\GitHub\\\\react\\\\react-test\\\\src\\\\components\\\\common\\\\EmojiPicker\\\\EmojiPicker.jsx\";\nimport React, { useState } from 'react';\nimport 'emoji-mart/css/emoji-mart.css';\nimport { Picker } from 'emoji-mart';\nimport { change } from 'redux-form';\n\nconst EmojiPickerForm = (_ref) => {\n  let formName = _ref.formName,\n      fieldName = _ref.fieldName,\n      Form = _ref.Form,\n      styles = _ref.styles,\n      dispatch = _ref.dispatch,\n      props = _objectWithoutProperties(_ref, [\"formName\", \"fieldName\", \"Form\", \"styles\", \"dispatch\"]);\n\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        emojiPickerMode = _useState2[0],\n        setEPMode = _useState2[1];\n\n  const addEmoji = e => {\n    const sym = e.unified.split('-');\n    const codesArray = [];\n    sym.map(el => codesArray.push('0x' + el));\n    const emoji = String.fromCodePoint(...codesArray);\n    dispatch(change(formName, fieldName, Form.values ? Form.values[fieldName] + emoji : emoji));\n  };\n\n  return React.createElement(\"div\", {\n    onClick: () => {\n      setEPMode(true);\n    },\n    onMouseEnter: () => {\n      setEPMode(true);\n    },\n    onMouseLeave: () => {\n      setEPMode(false);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    role: \"button\",\n    className: styles.buttomEmoji,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }), emojiPickerMode && React.createElement(Picker, {\n    style: {\n      position: 'absolute',\n      bottom: props.bottom,\n      right: props.right,\n      width: '50%'\n    },\n    onSelect: addEmoji,\n    native: true,\n    showPreview: false,\n    showSkinTones: false,\n    title: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  })); // position: 'absolute', bottom: '100%', right: '0', width: '50%'\n};\n\nexport const EmojiPickerStatus = ({\n  status,\n  setStatus,\n  styles\n}) => {\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        emojiPickerMode = _useState4[0],\n        setEPMode = _useState4[1];\n\n  const addEmoji = e => {\n    const sym = e.unified.split('-');\n    const codesArray = [];\n    sym.map(el => codesArray.push('0x' + el));\n    const emoji = String.fromCodePoint(...codesArray);\n    setStatus(status + emoji);\n  };\n\n  return React.createElement(\"div\", {\n    onClick: () => {\n      setEPMode(true);\n    },\n    onMouseEnter: () => {\n      setEPMode(true);\n    },\n    onMouseLeave: () => {\n      setEPMode(false);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    role: \"button\",\n    className: styles.buttomEmoji,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }), emojiPickerMode && React.createElement(Picker, {\n    style: {\n      position: 'absolute',\n      bottom: '-320%',\n      right: '0px',\n      width: '100%'\n    },\n    showPreview: false,\n    showSkinTones: false,\n    emojiSize: 16,\n    title: \"\",\n    onSelect: addEmoji,\n    native: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }));\n};\nexport default EmojiPickerForm;","map":{"version":3,"sources":["C:\\Users\\WOW\\Documents\\GitHub\\react\\react-test\\src\\components\\common\\EmojiPicker\\EmojiPicker.jsx"],"names":["React","useState","Picker","change","EmojiPickerForm","formName","fieldName","Form","styles","dispatch","props","emojiPickerMode","setEPMode","addEmoji","e","sym","unified","split","codesArray","map","el","push","emoji","String","fromCodePoint","values","buttomEmoji","position","bottom","right","width","EmojiPickerStatus","status","setStatus"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\nimport 'emoji-mart/css/emoji-mart.css'\r\nimport { Picker } from 'emoji-mart'\r\nimport {  change } from 'redux-form'\r\n\r\n\r\nconst EmojiPickerForm = ({formName, fieldName, Form, styles, dispatch, ...props}) => {\r\n    const [emojiPickerMode, setEPMode] = useState(false);\r\n\r\n    const addEmoji = (e) => {\r\n        const sym = e.unified.split('-')\r\n        const codesArray = []\r\n\r\n        sym.map(el => codesArray.push('0x' + el))\r\n        const emoji = String.fromCodePoint(...codesArray)\r\n\r\n        dispatch(change(formName, fieldName, Form.values ? Form.values[fieldName] + emoji : emoji));\r\n    }\r\n\r\n    return <div onClick={() => { setEPMode(true) }} onMouseEnter={() => { setEPMode(true) }} onMouseLeave={() => { setEPMode(false) }}>\r\n        <span role='button' className={styles.buttomEmoji}></span>\r\n        {emojiPickerMode && <Picker style={{ position: 'absolute', bottom: props.bottom, right: props.right, width: '50%' }} onSelect={addEmoji} native={true} showPreview={false} \r\n        showSkinTones={false} title='' />}\r\n    </div>\r\n    // position: 'absolute', bottom: '100%', right: '0', width: '50%'\r\n}\r\nexport const EmojiPickerStatus = ({status, setStatus, styles}) =>{\r\n    const [emojiPickerMode, setEPMode] = useState(false);\r\n\r\n    const addEmoji = (e) => {\r\n        const sym = e.unified.split('-')\r\n        const codesArray = []\r\n\r\n        sym.map(el => codesArray.push('0x' + el))\r\n        const emoji = String.fromCodePoint(...codesArray)\r\n        setStatus(status + emoji);      \r\n    }\r\n    return <div onClick={() => { setEPMode(true) }}  onMouseEnter={() => { setEPMode(true) }} onMouseLeave={() => { setEPMode(false) }}>\r\n        <span role='button' className={styles.buttomEmoji}></span>\r\n        {emojiPickerMode && <Picker style={{ position: 'absolute', bottom: '-320%', right: '0px', width: '100%' }}  showPreview={false}  \r\n        showSkinTones={false} emojiSize={16} \r\n        title=''  onSelect={addEmoji} native={true} />}\r\n    </div>\r\n\r\n}\r\nexport default EmojiPickerForm;\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}