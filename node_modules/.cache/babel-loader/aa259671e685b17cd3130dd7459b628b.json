{"ast":null,"code":"import React from'react';import{reduxForm,reset}from'redux-form';import{createField}from'../../common/FormControls/FormControls';import{required,voidValue}from'../../../utils/validators/validator';import EmojiPicker from'../../common/EmojiPicker/EmojiPicker';import{connect}from'react-redux';import styles from'./Messages.module.css';var AddMessageForm=function AddMessageForm(props){var onKeyHandler=function onKeyHandler(e){if(e.keyCode===13&&e.shiftKey===false){if(e.target.name===\"message\".concat(props.userId)){e.preventDefault();props.handleSubmit();}}};return React.createElement(\"form\",{onKeyDown:onKeyHandler,onSubmit:props.handleSubmit},createField(\"write message to \".concat(props.name),\"message\".concat(props.userId),[required,voidValue],'textarea',null,null),props.dirty&&React.createElement(\"button\",{className:styles.buttonForm,type:\"submit\"}),React.createElement(EmojiPicker,{bottom:\"100%\",right:\"0\",width:\"50%\",formName:\"addMessageForm\",fieldName:\"message\".concat(props.userId),Form:props.addMessageForm,styles:styles,dispatch:props.dispatch}));};var afterSumbit=function afterSumbit(result,dispatch){dispatch(reset('addMessageForm'));};var AddMessageFormRedux=reduxForm({form:'addMessageForm',onSubmitSuccess:afterSumbit})(AddMessageForm);var mapStateToPropse=function mapStateToPropse(state){return{addMessageForm:state.form.addMessageForm};};var AddMessageFormWithConnect=connect(mapStateToPropse)(AddMessageFormRedux);export default AddMessageFormWithConnect;","map":{"version":3,"sources":["C:/Users/WOW/Documents/GitHub/react/react-test/src/components/Messages-container/Messages/AddMessageFormWithConnect.jsx"],"names":["React","reduxForm","reset","createField","required","voidValue","EmojiPicker","connect","styles","AddMessageForm","props","onKeyHandler","e","keyCode","shiftKey","target","name","userId","preventDefault","handleSubmit","dirty","buttonForm","addMessageForm","dispatch","afterSumbit","result","AddMessageFormRedux","form","onSubmitSuccess","mapStateToPropse","state","AddMessageFormWithConnect"],"mappings":"AACA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,SAAT,CAAoBC,KAApB,KAAiC,YAAjC,CACA,OAASC,WAAT,KAA4B,wCAA5B,CACA,OAASC,QAAT,CAAmBC,SAAnB,KAAoC,qCAApC,CACA,MAAOC,CAAAA,WAAP,KAAwB,sCAAxB,CACA,OAASC,OAAT,KAAwB,aAAxB,CACA,MAAOC,CAAAA,MAAP,KAAmB,uBAAnB,CAGA,GAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACC,KAAD,CAAW,CAE9B,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,CAAD,CAAO,CACxB,GAAIA,CAAC,CAACC,OAAF,GAAc,EAAd,EAAoBD,CAAC,CAACE,QAAF,GAAe,KAAvC,CAA8C,CAC1C,GAAIF,CAAC,CAACG,MAAF,CAASC,IAAT,oBAA4BN,KAAK,CAACO,MAAlC,CAAJ,CAAgD,CAC5CL,CAAC,CAACM,cAAF,GACAR,KAAK,CAACS,YAAN,GAEH,CACJ,CACJ,CARD,CAUA,MAAO,6BAAM,SAAS,CAAER,YAAjB,CAA+B,QAAQ,CAAED,KAAK,CAACS,YAA/C,EACFhB,WAAW,4BAAqBO,KAAK,CAACM,IAA3B,mBAA6CN,KAAK,CAACO,MAAnD,EAA6D,CAACb,QAAD,CAAWC,SAAX,CAA7D,CAAoF,UAApF,CAAgG,IAAhG,CAAsG,IAAtG,CADT,CAGFK,KAAK,CAACU,KAAN,EAAe,8BAAQ,SAAS,CAAEZ,MAAM,CAACa,UAA1B,CAAsC,IAAI,CAAC,QAA3C,EAHb,CAIH,oBAAC,WAAD,EAAa,MAAM,CAAC,MAApB,CAA2B,KAAK,CAAC,GAAjC,CAAsC,KAAK,CAAC,KAA5C,CACC,QAAQ,CAAC,gBADV,CAC2B,SAAS,kBAAYX,KAAK,CAACO,MAAlB,CADpC,CACgE,IAAI,CAAEP,KAAK,CAACY,cAD5E,CAC4F,MAAM,CAAEd,MADpG,CAC4G,QAAQ,CAAEE,KAAK,CAACa,QAD5H,EAJG,CAAP,CAUH,CAtBD,CAuBA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,MAAD,CAASF,QAAT,CAAsB,CACtCA,QAAQ,CAACrB,KAAK,CAAC,gBAAD,CAAN,CAAR,CACH,CAFD,CAGA,GAAMwB,CAAAA,mBAAmB,CAAGzB,SAAS,CAAC,CAClC0B,IAAI,CAAE,gBAD4B,CAElCC,eAAe,CAAEJ,WAFiB,CAAD,CAAT,CAGzBf,cAHyB,CAA5B,CAIA,GAAMoB,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACC,KAAD,QAAY,CACjCR,cAAc,CAAEQ,KAAK,CAACH,IAAN,CAAWL,cADM,CAAZ,EAAzB,CAIC,GAAMS,CAAAA,yBAAyB,CAAGxB,OAAO,CAACsB,gBAAD,CAAP,CAA0BH,mBAA1B,CAAlC,CAEA,cAAeK,CAAAA,yBAAf","sourcesContent":["\r\nimport React from 'react'\r\nimport { reduxForm, reset } from 'redux-form'\r\nimport { createField } from '../../common/FormControls/FormControls'\r\nimport { required, voidValue } from '../../../utils/validators/validator'\r\nimport EmojiPicker from '../../common/EmojiPicker/EmojiPicker'\r\nimport { connect } from 'react-redux'\r\nimport styles from './Messages.module.css'\r\n\r\n\r\nconst AddMessageForm = (props) => {\r\n\r\n    const onKeyHandler = (e) => {\r\n        if (e.keyCode === 13 && e.shiftKey === false) {\r\n            if (e.target.name === `message${props.userId}`) {\r\n                e.preventDefault()\r\n                props.handleSubmit()\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    return <form onKeyDown={onKeyHandler} onSubmit={props.handleSubmit}>\r\n        {createField(`write message to ${props.name}`, `message${props.userId}`, [required, voidValue], 'textarea', null, null )}\r\n\r\n        {props.dirty && <button className={styles.buttonForm} type=\"submit\"></button>}\r\n        <EmojiPicker bottom='100%' right='0'  width='50%'\r\n         formName='addMessageForm' fieldName={`message${props.userId}`} Form={props.addMessageForm} styles={styles} dispatch={props.dispatch} />\r\n\r\n\r\n\r\n    </form>\r\n}\r\nconst afterSumbit = (result, dispatch) => {\r\n    dispatch(reset('addMessageForm'))\r\n}\r\nconst AddMessageFormRedux = reduxForm({\r\n    form: 'addMessageForm',\r\n    onSubmitSuccess: afterSumbit\r\n})(AddMessageForm)\r\nconst mapStateToPropse = (state) => ({\r\n    addMessageForm: state.form.addMessageForm\r\n})\r\n\r\n const AddMessageFormWithConnect = connect(mapStateToPropse)(AddMessageFormRedux)\r\n\r\n export default AddMessageFormWithConnect"]},"metadata":{},"sourceType":"module"}