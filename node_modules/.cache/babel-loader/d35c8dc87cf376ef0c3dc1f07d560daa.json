{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\WOW\\\\Documents\\\\GitHub\\\\react\\\\react-test\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"C:\\\\Users\\\\WOW\\\\Documents\\\\GitHub\\\\react\\\\react-test\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"C:\\\\Users\\\\WOW\\\\Documents\\\\GitHub\\\\react\\\\react-test\\\\src\\\\components\\\\Messages-container\\\\Messages\\\\Messages.jsx\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport styles from './Messages.module.css';\nimport DialogWithUser from '../DialogsList/DialogWithUser';\nimport Dialog from './Dialog';\n\nconst Messages = (_ref) => {\n  let dialogItemsData = _ref.dialogItemsData,\n      currentDialogId = _ref.currentDialogId,\n      search = _ref.search,\n      props = _objectWithoutProperties(_ref, [\"dialogItemsData\", \"currentDialogId\", \"search\"]);\n\n  const _useState = useState(null),\n        _useState2 = _slicedToArray(_useState, 2),\n        searchWord = _useState2[0],\n        setSearchWord = _useState2[1];\n\n  const handleSearch = e => {\n    const word = e.currentTarget.value;\n    setSearchWord(word);\n\n    if (word && word.trim() !== '') {\n      search(word);\n    }\n  };\n\n  let dialogItems = dialogItemsData.map((item, index) => React.createElement(DialogWithUser, {\n    currentDialogId: currentDialogId,\n    avatar: item.avatar,\n    lastMessage: item.messages[item.messages.length - 1].message,\n    setDialogID: props.setDialogID,\n    key: index + 1,\n    name: item.name,\n    id: item.userId,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }));\n  const dialog = useRef();\n  const currentDialog = dialogItemsData[dialogItemsData.findIndex(i => {\n    return i.userId === currentDialogId;\n  })];\n  useEffect(() => {}, [dialog]);\n  return React.createElement(\"div\", {\n    className: styles.messages,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, currentDialogId === 0 ? React.createElement(\"div\", {\n    className: styles.emptyMessages,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: styles.iconMessage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: styles.selectDialog,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, \"Please select a dialog\")) : React.createElement(Dialog, {\n    ref: dialog,\n    userId: currentDialog.userId,\n    sendMessage: props.sendMessage,\n    name: currentDialog.name,\n    avatar: currentDialog.avatar,\n    messages: currentDialog.messages,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: styles.dialogItems,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: styles.dialogSearch,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    value: searchWord,\n    onChange: e => handleSearch(e),\n    type: \"text\",\n    name: \"\",\n    id: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: styles.dialogsList,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, dialogItems)));\n};\n\nexport default Messages;","map":{"version":3,"sources":["C:\\Users\\WOW\\Documents\\GitHub\\react\\react-test\\src\\components\\Messages-container\\Messages\\Messages.jsx"],"names":["React","useEffect","useRef","useState","styles","DialogWithUser","Dialog","Messages","dialogItemsData","currentDialogId","search","props","searchWord","setSearchWord","handleSearch","e","word","currentTarget","value","trim","dialogItems","map","item","index","avatar","messages","length","message","setDialogID","name","userId","dialog","currentDialog","findIndex","i","emptyMessages","iconMessage","selectDialog","sendMessage","dialogSearch","dialogsList"],"mappings":"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","sourcesContent":["import React, {useEffect, useRef, useState} from 'react'\r\n\r\nimport styles from './Messages.module.css'\r\nimport DialogWithUser from '../DialogsList/DialogWithUser'\r\nimport Dialog from './Dialog'\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst Messages = ({dialogItemsData, currentDialogId, search,...props}) => {\r\n    const [searchWord, setSearchWord] = useState(null);\r\n    const handleSearch = (e)=>{\r\n        const word = e.currentTarget.value;\r\n        setSearchWord(word);\r\n        if(word && word.trim() !== ''){\r\n            search(word);\r\n        }   \r\n    }\r\n\r\n    let dialogItems = dialogItemsData.map((item, index) => <DialogWithUser currentDialogId={currentDialogId} avatar={item.avatar}\r\n    lastMessage={ item.messages[item.messages.length-1].message} setDialogID={props.setDialogID}   key={index+1} name={item.name} id={item.userId} />)\r\n    const dialog = useRef();\r\n    const currentDialog = dialogItemsData[dialogItemsData.findIndex((i)=>{return i.userId === currentDialogId})];\r\n    useEffect(()=>{\r\n       \r\n    },[dialog])\r\n\r\n    return <div className={styles.messages}>\r\n        {currentDialogId === 0\r\n            ? <div className={styles.emptyMessages}>\r\n                <div className={styles.iconMessage}></div>\r\n                <div className={styles.selectDialog}>\r\n                    Please select a dialog\r\n                </div>\r\n             </div>\r\n            : <Dialog ref={dialog} userId={currentDialog.userId} sendMessage={props.sendMessage} name={currentDialog.name} \r\n            avatar={currentDialog.avatar}  messages={currentDialog.messages} />}\r\n\r\n        <div className={styles.dialogItems}>\r\n            <div className={styles.dialogSearch}><input value={searchWord} onChange={e=>handleSearch(e)} type=\"text\" name=\"\" id=\"\"/>{}</div>\r\n            <div className={styles.dialogsList}>\r\n                {dialogItems}\r\n\r\n            </div>\r\n        </div>\r\n        \r\n    </div>\r\n}\r\n\r\n\r\nexport default Messages;"]},"metadata":{},"sourceType":"module"}