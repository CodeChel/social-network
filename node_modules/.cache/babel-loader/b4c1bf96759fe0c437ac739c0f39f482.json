{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\WOW\\\\Documents\\\\GitHub\\\\react\\\\react-test\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\WOW\\\\Documents\\\\GitHub\\\\react\\\\react-test\\\\src\\\\components\\\\Profile\\\\Posts\\\\Posts.jsx\";\nimport React, { useState } from 'react';\nimport styles from './posts.module.css';\nimport { reduxForm, Field, reset, change } from 'redux-form';\nimport { required, maxLengthCreator, voidValue } from '../../../utils/validators/validator';\nimport { Textarea } from '../../common/FormControls/FormControls';\nimport avatar from '../../../assets/img/ava.jpg';\nimport Preloader from '../../common/Preloader/Preloader';\nimport { NavLink } from 'react-router-dom';\nimport 'emoji-mart/css/emoji-mart.css';\nimport { Picker } from 'emoji-mart';\nconst maxLength500 = maxLengthCreator(500);\n\nconst FormPost = props => {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        emojiPickerMode = _useState2[0],\n        setEPMode = _useState2[1];\n\n  const addEmoji = e => {\n    const sym = e.unified.split('-');\n    const codesArray = [];\n    sym.map(el => codesArray.push('0x' + el));\n    const emoji = String.fromCodePoint(...codesArray);\n    props.dispatch(change('addMessageForm', \"message\".concat(props.userId), props.addMessageForm.values ? props.addMessageForm.values[\"message\".concat(props.userId)] + emoji : emoji));\n  };\n\n  return React.createElement(\"form\", {\n    className: styles.formPost,\n    onSubmit: props.handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, React.createElement(Field, {\n    placeholder: \"Share your great thoughts here\",\n    component: Textarea,\n    name: \"postBody\",\n    validate: [required, maxLength500, voidValue],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    onMouseEnter: () => {\n      setEPMode(true);\n    },\n    onMouseLeave: () => {\n      setEPMode(false);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    role: \"button\",\n    className: styles.buttomEmoji,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }), emojiPickerMode && React.createElement(Picker, {\n    style: {\n      position: 'absolute',\n      bottom: '80px',\n      right: '20px'\n    },\n    onSelect: addEmoji,\n    native: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  })), React.createElement(\"button\", {\n    className: styles.button,\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, \"Post\"));\n};\n\nconst afterSumbit = (result, dispatch) => {\n  dispatch(reset('formPost'));\n};\n\nconst FormPostRedux = reduxForm({\n  form: 'formPost',\n  onSubmitSuccess: afterSumbit\n})(FormPost);\n\nconst Posts = props => {\n  const sortPost = e => {\n    e.target.value === 'New' ? props.sortByTime() : props.sortByLikes();\n  };\n\n  return props.profile ? React.createElement(\"div\", {\n    className: styles.postsContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, React.createElement(FormPostRedux, {\n    onSubmit: props.sendPostThunk,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }), props.posts.length ? React.createElement(React.Fragment, null, \"Sort by \", React.createElement(\"select\", {\n    className: styles.selectSort,\n    onChange: sortPost,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, React.createElement(\"option\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, \"New\"), React.createElement(\"option\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, \"Popular\"))) : null, props.posts.map(p => React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: styles.posts,\n    key: p.id,\n    className: styles.itemPost,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: styles.headerPost,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, React.createElement(NavLink, {\n    to: \"/profile/\".concat(p.userId),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, \" \", React.createElement(\"img\", {\n    className: styles.avatar,\n    src: p.avatar || avatar,\n    alt: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: styles.nameBlock,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, React.createElement(NavLink, {\n    to: \"/profile/\".concat(p.userId),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, \" \", React.createElement(\"div\", {\n    className: p.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, p.name)), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, p.timeFormat))), React.createElement(\"div\", {\n    className: styles.postBody,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, p.text), React.createElement(\"div\", {\n    className: styles.menu,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: styles.hidenMenu,\n    onClick: () => {\n      props.deletePost(p.id);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: styles.menuItem,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, \"Delete post\"))), React.createElement(\"div\", {\n    className: styles.postFooter,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: styles.likesBody,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: styles.likesWrapper,\n    onClick: () => {\n      p.liked ? props.likesToggle(false, p.id) : props.likesToggle(true, p.id);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: styles.likes + ' ' + (p.liked && styles.liked),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }), React.createElement(\"span\", {\n    className: styles.likesCount + ' ' + (p.liked && styles.likesCountLiked),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, p.likesCount > 0 && p.likesCount), \"  \"))))))) : React.createElement(Preloader, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  });\n};\n\nexport default Posts;","map":{"version":3,"sources":["C:\\Users\\WOW\\Documents\\GitHub\\react\\react-test\\src\\components\\Profile\\Posts\\Posts.jsx"],"names":["React","useState","styles","reduxForm","Field","reset","change","required","maxLengthCreator","voidValue","Textarea","avatar","Preloader","NavLink","Picker","maxLength500","FormPost","props","emojiPickerMode","setEPMode","addEmoji","e","sym","unified","split","codesArray","map","el","push","emoji","String","fromCodePoint","dispatch","userId","addMessageForm","values","formPost","handleSubmit","buttomEmoji","position","bottom","right","button","afterSumbit","result","FormPostRedux","form","onSubmitSuccess","Posts","sortPost","target","value","sortByTime","sortByLikes","profile","postsContainer","sendPostThunk","posts","length","selectSort","p","id","itemPost","headerPost","nameBlock","name","timeFormat","postBody","text","menu","hidenMenu","deletePost","menuItem","postFooter","likesBody","likesWrapper","liked","likesToggle","likes","likesCount","likesCountLiked"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\r\nimport styles from './posts.module.css'\r\nimport { reduxForm, Field, reset, change } from 'redux-form';\r\nimport { required, maxLengthCreator, voidValue } from '../../../utils/validators/validator';\r\nimport { Textarea } from '../../common/FormControls/FormControls';\r\nimport avatar from '../../../assets/img/ava.jpg';\r\nimport Preloader from '../../common/Preloader/Preloader';\r\nimport { NavLink } from 'react-router-dom'\r\nimport 'emoji-mart/css/emoji-mart.css'\r\nimport { Picker } from 'emoji-mart'\r\n\r\n\r\nconst maxLength500 = maxLengthCreator(500);\r\n\r\nconst FormPost = (props) => {\r\n    const [emojiPickerMode, setEPMode] = useState(false);\r\n\r\n    const addEmoji = (e) => {\r\n        const sym = e.unified.split('-')\r\n        const codesArray = []\r\n\r\n        sym.map(el => codesArray.push('0x' + el))\r\n        const emoji = String.fromCodePoint(...codesArray)\r\n\r\n        props.dispatch(change('addMessageForm', `message${props.userId}`, props.addMessageForm.values ? props.addMessageForm.values[`message${props.userId}`] + emoji : emoji));\r\n    }\r\n\r\n    return <form className={styles.formPost} onSubmit={props.handleSubmit}>\r\n        <Field placeholder=\"Share your great thoughts here\" component={Textarea} name='postBody' validate={[required, maxLength500, voidValue]} />\r\n        <div onMouseEnter={()=>{setEPMode(true)}} onMouseLeave={()=>{setEPMode(false)}}>\r\n            <span role='button' className={styles.buttomEmoji}></span>\r\n            {emojiPickerMode && <Picker  style={{ position: 'absolute', bottom: '80px', right: '20px' }}  onSelect={addEmoji} native={true} />}\r\n        </div>\r\n        <button className={styles.button} type='submit' >Post</button>\r\n    </form>\r\n}\r\nconst afterSumbit = (result, dispatch) => {\r\n    dispatch(reset('formPost')) \r\n}\r\nconst FormPostRedux = reduxForm({ \r\n    form: 'formPost',\r\n    onSubmitSuccess: afterSumbit\r\n})(FormPost);\r\n\r\nconst Posts = (props) => {\r\n    \r\n    \r\n    const sortPost = (e) => {\r\n        e.target.value === 'New' ? props.sortByTime() : props.sortByLikes()\r\n    }\r\n\r\n    return props.profile\r\n        ? <div className={styles.postsContainer}>\r\n            <FormPostRedux onSubmit={props.sendPostThunk} />\r\n            {props.posts.length ?\r\n                <>Sort by <select className={styles.selectSort} onChange={sortPost}>\r\n                    <option >New</option>\r\n                    <option >Popular</option>\r\n                </select></> : null}\r\n            {props.posts.map((p) => <div>\r\n                <div className={styles.posts} key={p.id} className={styles.itemPost}>\r\n                    <div className={styles.headerPost}>\r\n                      <NavLink to={`/profile/${p.userId}`}> <img className={styles.avatar} src={p.avatar || avatar} alt=\"\" /></NavLink> \r\n\r\n                        <div className={styles.nameBlock}>\r\n                        <NavLink to={`/profile/${p.userId}`}> <div className={p.name}>{p.name}</div></NavLink> \r\n                            <div >{p.timeFormat}</div>\r\n                        </div>\r\n                    </div>\r\n                    <div className={styles.postBody}>\r\n                        {p.text}\r\n                    </div>\r\n                    <div className={styles.menu}><span className={styles.hidenMenu} onClick={() => { props.deletePost(p.id) }} ><div className={styles.menuItem}>Delete post</div></span></div>\r\n                    <div className={styles.postFooter}>\r\n                        \r\n                        <div className={styles.likesBody}>\r\n                            <div className={styles.likesWrapper} onClick={() => { p.liked ? props.likesToggle(false, p.id) : props.likesToggle(true, p.id) }}>\r\n                                <div  className={styles.likes + ' ' + (p.liked && styles.liked)}></div>\r\n                                <span className={styles.likesCount + ' ' + (p.liked&& styles.likesCountLiked)}>{p.likesCount > 0 && p.likesCount}</span>  </div>\r\n                            </div>\r\n                        </div>\r\n                </div>\r\n\r\n            </div>)}\r\n        </div>\r\n        : <Preloader />\r\n}\r\n\r\nexport default Posts;"]},"metadata":{},"sourceType":"module"}