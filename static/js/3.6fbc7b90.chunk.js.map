{"version":3,"sources":["components/Messages-container/Messages/Messages.module.css","components/Messages-container/Messages/DialogsList/DialogWithUser.module.css","components/Messages-container/Messages/MessageItem/MessageItem.module.css","components/Messages-container/Messages/DialogsList/DialogWithUser.jsx","components/Messages-container/Messages/MessageItem/MessageItem.jsx","components/common/HOCScrollBar/HOCScrollbarCusctom.jsx","components/Messages-container/Messages/AddMessageFormWithConnect.jsx","components/Messages-container/Messages/DialogSession.jsx","components/Messages-container/Messages/Messages.jsx","components/Messages-container/MessagesContainer.jsx"],"names":["module","exports","messages","dialog","dialogItems","dialogHead","dialogBody","messageOut","messagesFill","formContainer","avatar","avatarContainer","name","buttonForm","emptyMessages","selectDialog","iconMessage","dialogSearch","searchInput","buttomEmoji","emojyPickerP","items","message","selectedDialog","timeLastMessage","yourMessage","messageRight","messageContainer","time","timeRight","timeLeft","DialogWithUser","props","useEffect","setLastMessageTime","formatTimeToLastMessage","Date","date","_useState","useState","_useState2","Object","slicedToArray","lastMessageTime","react_default","a","createElement","onClick","setDialogID","id","isSearchMode","outSearch","ref","dialogRef","className","styles","currentDialogId","src","alt","isYoursMessage","lastMessage","length","slice","MessageItem","right","ScrollbarHOC","React","forwardRef","_ref","children","objectWithoutProperties","isScrolling","setIsScrolling","_useState3","_useState4","isMouseOver","setIsMouseOver","isShow","onScrollStart","useCallback","onScrollStop","onMouseEnter","onMouseLeave","trackProps","useMemo","renderer","_ref2","elementRef","style","restProps","assign","objectSpread","opacity","transition","rsc_esm","wrapperProps","_ref3","trackXProps","trackYProps","scrollDetectionThreshold","AddMessageFormRedux","reduxForm","form","onSubmitSuccess","result","dispatch","reset","onKeyDown","e","keyCode","shiftKey","target","concat","userId","preventDefault","handleSubmit","onSubmit","createField","required","voidValue","autoFocus","dirty","type","EmojiPicker","formName","fieldName","Form","addMessageForm","AddMessageFormWithConnect","connect","state","DialogSession","messageItems","map","item","index","Messages_MessageItem_MessageItem","timeFormat","key","scrollBar","useRef","document","querySelector","focus","current","scrollToBottom","react_router_dom","to","HOCScrollbarCusctom","autoHide","removeTrackYWhenNotUsed","width","height","Messages_AddMessageFormWithConnect","data","sendMessage","Messages","dialogItemsData","search","dialogsFromSearch","searchWord","setSearchWord","setSearchMode","addEventListener","outSearhCheck","removeEventListener","DialogsList_DialogWithUser","dialogItemsSearch","currentDialog","findIndex","i","Messages_DialogSession","valueMessage","placeholder","value","onChange","word","currentTarget","trim","handleSearch","dialogsList","MessagerContainer","compose","withAuthRedirect"],"mappings":"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","file":"static/js/3.6fbc7b90.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"messages\":\"Messages_messages__2Czpm\",\"dialog\":\"Messages_dialog__tfj-k\",\"dialogItems\":\"Messages_dialogItems__2OoFm\",\"dialogHead\":\"Messages_dialogHead__BDJuz\",\"dialogBody\":\"Messages_dialogBody__Pv6vX\",\"messageOut\":\"Messages_messageOut__1ecbx\",\"messagesFill\":\"Messages_messagesFill__2JJHa\",\"formContainer\":\"Messages_formContainer__PFn6z\",\"avatar\":\"Messages_avatar__FiFmh\",\"avatarContainer\":\"Messages_avatarContainer__1PCd-\",\"name\":\"Messages_name__1VKCA\",\"buttonForm\":\"Messages_buttonForm__3NwVr\",\"emptyMessages\":\"Messages_emptyMessages__12fxk\",\"selectDialog\":\"Messages_selectDialog__1geCX\",\"iconMessage\":\"Messages_iconMessage__3b62w\",\"dialogSearch\":\"Messages_dialogSearch__1DKPy\",\"searchInput\":\"Messages_searchInput__2JgjW\",\"buttomEmoji\":\"Messages_buttomEmoji__gcgVt\",\"emojyPickerP\":\"Messages_emojyPickerP__2lktl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"items\":\"DialogWithUser_items__2hRxI\",\"name\":\"DialogWithUser_name__2SpA4\",\"message\":\"DialogWithUser_message__2BINV\",\"selectedDialog\":\"DialogWithUser_selectedDialog__adA2o\",\"avatar\":\"DialogWithUser_avatar__3n_ux\",\"timeLastMessage\":\"DialogWithUser_timeLastMessage__1lmR_\",\"yourMessage\":\"DialogWithUser_yourMessage__27Rr9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"MessageItem_message__3fTmO\",\"messageRight\":\"MessageItem_messageRight__1aGY_\",\"messageContainer\":\"MessageItem_messageContainer__DmkNm\",\"time\":\"MessageItem_time__pQF6M\",\"timeRight\":\"MessageItem_timeRight__1aq_t\",\"timeLeft\":\"MessageItem_timeLeft__22qsT\"};","import React, { useState, useEffect } from 'react'\r\nimport styles from './DialogWithUser.module.css'\r\nimport { formatTimeToLastMessage } from '../../../../utils/timeFormat'\r\n\r\n\r\nconst DialogWithUser = (props) => {\r\n\r\n    useEffect(() => {\r\n        setLastMessageTime(formatTimeToLastMessage(new Date(props.date)))\r\n    }, [props.date])\r\n\r\n    const [lastMessageTime, setLastMessageTime] = useState(null);\r\n\r\n\r\n    return <div onClick={() => {\r\n        props.setDialogID(props.id)\r\n        props.isSearchMode && props.outSearch()\r\n    }} ref={props.dialogRef}\r\n        className={styles.items + ' ' + (props.currentDialogId === props.id ? styles.selectedDialog : '')}>\r\n        <div>\r\n            <img className={styles.avatar} src={props.avatar} alt=\"avatar\" />\r\n        </div>\r\n        <div>\r\n            <div className={styles.name}>\r\n                {props.name}\r\n            </div>\r\n            <span className={styles.message}>{props.isYoursMessage ? <span className={styles.yourMessage}>You: </span> : ''}\r\n                {(props.lastMessage.length > 50 ? props.lastMessage.slice(0, 50) + '...' : props.lastMessage)}</span>\r\n\r\n        </div>\r\n        <span className={styles.timeLastMessage}>{lastMessageTime}</span>\r\n    </div>\r\n}\r\n\r\nexport default DialogWithUser;","import React from 'react';\r\nimport styles  from './MessageItem.module.css'\r\n\r\n\r\n\r\n\r\nconst MessageItem = (props) =>{\r\n    return (props.right \r\n        ? <div className={styles.messageContainer}>\r\n            <div className={styles.time + ' ' + styles.timeRight}>{props.time}</div>\r\n            <div className={styles.message+ ' ' + styles.messageRight}>{props.message}</div>\r\n         </div>\r\n        : <div className={styles.messageContainer}> \r\n            <div className={styles.message}>{props.message}</div>\r\n            <div className={styles.time + ' ' + styles.timeLeft}>{props.time}</div>\r\n         </div> \r\n    )\r\n\r\n}\r\n\r\n   \r\nexport default MessageItem;","import React, { useCallback, useMemo, useState } from \"react\";\r\nimport ReactScrollbarsCustom from \"react-scrollbars-custom\";\r\n\r\nconst  ScrollbarHOC = React.forwardRef(({ children, ...props}, ref) => {\r\n  const [isScrolling, setIsScrolling] = useState(false);\r\n  const [isMouseOver, setIsMouseOver] = useState(false);\r\n  const isShow = isScrolling || isMouseOver;\r\n\r\n  const onScrollStart = useCallback(() => {\r\n    setIsScrolling(true);\r\n  }, []);\r\n  const onScrollStop = useCallback(() => {\r\n    setIsScrolling(false);\r\n  }, []);\r\n  const onMouseEnter = useCallback(() => {\r\n    setIsMouseOver(true);\r\n  }, []);\r\n  const onMouseLeave = useCallback(() => {\r\n    setIsMouseOver(false);\r\n  }, []);\r\n\r\n  const trackProps = useMemo(() => ({\r\n    renderer: ({ elementRef, style, ...restProps }) => (\r\n      <span\r\n        {...restProps}\r\n        ref={elementRef}\r\n        style={{ ...style, opacity: isShow ? 1 : 0, transition: \"opacity 0.4s ease-in-out\", }}\r\n        onMouseEnter={onMouseEnter}\r\n        onMouseLeave={onMouseLeave}\r\n      />\r\n    )\r\n  }), [isShow, onMouseEnter, onMouseLeave]);\r\n\r\n  return (\r\n    <ReactScrollbarsCustom\r\n      {...props}\r\n      wrapperProps={{\r\n        renderer: ({ elementRef, style, ...restProps }) => (\r\n          <div {...restProps} ref={elementRef} style={{ ...style, right: 0 }} />\r\n        ),\r\n      }}\r\n      trackXProps={trackProps}\r\n      trackYProps={trackProps}\r\n      onScrollStart={onScrollStart}\r\n      onScrollStop={onScrollStop}\r\n      scrollDetectionThreshold={500} // ms\r\n      ref={ref}\r\n    >\r\n      {children}\r\n    </ReactScrollbarsCustom>\r\n  );\r\n\r\n})\r\nexport default ScrollbarHOC;","\r\nimport React from 'react'\r\nimport { reduxForm, reset } from 'redux-form';\r\nimport { createField } from '../../common/FormControls/FormControls';\r\nimport { required, voidValue } from '../../../utils/validators/validator';\r\nimport EmojiPicker from '../../common/EmojiPicker/EmojiPicker'\r\nimport { connect } from 'react-redux'\r\nimport styles from './Messages.module.css'\r\n\r\n\r\nconst AddMessageForm = (props) => {\r\n\r\n    const onKeyHandler = (e) => {\r\n        if (e.keyCode == 13 && e.shiftKey == false) {\r\n            if (e.target.name == `message${props.userId}`) {\r\n                e.preventDefault();\r\n                props.handleSubmit();\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    return <form onKeyDown={onKeyHandler} onSubmit={props.handleSubmit}>\r\n        {createField(`write message to ${props.name}`, `message${props.userId}`, [required, voidValue], 'textarea', null, null, { autoFocus: true })}\r\n\r\n        {props.dirty && <button className={styles.buttonForm} type=\"submit\"></button>}\r\n        <EmojiPicker formName='addMessageForm' fieldName={`message${props.userId}`} Form={props.addMessageForm} styles={styles} dispatch={props.dispatch} />\r\n\r\n\r\n\r\n    </form>\r\n}\r\nconst afterSumbit = (result, dispatch) => {\r\n    dispatch(reset('addMessageForm'))\r\n}\r\nconst AddMessageFormRedux = reduxForm({\r\n    form: 'addMessageForm',\r\n    onSubmitSuccess: afterSumbit\r\n})(AddMessageForm);\r\nconst mapStateToPropse = (state) => ({\r\n    addMessageForm: state.form.addMessageForm\r\n})\r\n\r\n const AddMessageFormWithConnect = connect(mapStateToPropse)(AddMessageFormRedux)\r\n\r\n export default AddMessageFormWithConnect","import React, { useEffect, useRef} from 'react'\r\n\r\nimport MessageItem from './MessageItem/MessageItem'\r\nimport styles from './Messages.module.css'\r\n\r\nimport ScrollbarHOC from '../../common/HOCScrollBar/HOCScrollbarCusctom';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\n\r\n\r\n\r\n\r\nimport AddMessageFormWithConnect from './AddMessageFormWithConnect'\r\n\r\n\r\nconst DialogSession = (props) => {\r\n    let messageItems = props.messages.map((item, index) => <MessageItem time={item.timeFormat} key={index} right={item.right} message={item.message} id={item.id} />)\r\n\r\n    const scrollBar = useRef()\r\n\r\n    useEffect(() => {\r\n        !props.isSearchMode && document.querySelector(`textarea[name=message${props.userId}]`).focus()\r\n    })\r\n\r\n    useEffect(() => {\r\n        scrollBar.current.scrollToBottom();\r\n    }, [messageItems])\r\n    return <div className={styles.dialog}>\r\n        <div className={styles.dialogHead}>\r\n            <div className={styles.avatarContainer}>\r\n                <NavLink to={`/profile/${props.userId}`}>\r\n                    <img className={styles.avatar} src={props.avatar} alt=\"avatar\" />\r\n                </NavLink>\r\n            </div>\r\n            <span className={styles.name}>\r\n                <NavLink to={`/profile/${props.userId}`}>\r\n                    {props.name}\r\n                </NavLink>\r\n            </span>\r\n        </div>\r\n        <ScrollbarHOC children={<div className={styles.messagesFill}>{messageItems}</div>} autoHide ref={scrollBar} removeTrackYWhenNotUsed={true} style={{ width: \"100%\", height: \"75%\" }} />\r\n\r\n        <div className={styles.formContainer}>\r\n            <AddMessageFormWithConnect userId={props.userId} name={props.name} onSubmit={(data) => { props.sendMessage(data[`message${props.userId}`], props.userId) }} />\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default DialogSession;","import React, {  useState, useRef, useEffect } from 'react'\r\nimport styles from './Messages.module.css'\r\nimport DialogWithUser from './DialogsList/DialogWithUser'\r\nimport DialogSession from './DialogSession'\r\nimport ScrollbarHOC from '../../common/HOCScrollBar/HOCScrollbarCusctom'\r\n\r\n\r\n\r\n\r\nconst Messages = ({ dialogItemsData, currentDialogId, search, dialogsFromSearch, ...props }) => {\r\n    const [searchWord, setSearchWord] = useState(null);\r\n    const [isSearchMode, setSearchMode] = useState(false);\r\n\r\n    useEffect(()=>{\r\n        if(isSearchMode){\r\n            document.addEventListener('click', outSearhCheck )\r\n        }\r\n        else{\r\n            document.removeEventListener('click', outSearhCheck )\r\n        }\r\n        return ()=>{\r\n            document.removeEventListener('click', outSearhCheck )\r\n        }\r\n    },[isSearchMode])\r\n\r\n    const searchInput = useRef();   \r\n    const dialogRef = useRef();\r\n\r\n    const handleSearch = (e) => {\r\n        const word = e.currentTarget.value;\r\n        setSearchWord(word);\r\n        if (word && word.trim() !== '') {\r\n            search(word)\r\n            setSearchMode(true)\r\n        }\r\n    }\r\n    const outSearch = () => {\r\n        setSearchMode(false)\r\n        setSearchWord('')\r\n    }\r\n    const outSearhCheck = (e) => {\r\n        \r\n        if(e.target !== searchInput.current && e.target !== dialogRef.current){\r\n            outSearch()\r\n        }\r\n    \r\n    }\r\n\r\n\r\n    const dialogItems = dialogItemsData.map((item, index) => <DialogWithUser currentDialogId={currentDialogId} avatar={item.avatar}\r\n        date={item.messages[item.messages.length - 1].date} isYoursMessage={item.messages[item.messages.length - 1].right} \r\n        lastMessage={item.messages[item.messages.length - 1].message} setDialogID={props.setDialogID} key={index + 1} name={item.name} id={item.userId} />)\r\n\r\n    const dialogItemsSearch = isSearchMode && dialogsFromSearch.map((item, index) => <DialogWithUser dialogRef={dialogRef} isSearchMode={isSearchMode}\r\n        currentDialogId={currentDialogId} avatar={item.avatar} outSearch={outSearch} lastMessage={item.messages[item.messages.length - 1].message}\r\n        date={item.messages[item.messages.length - 1].date} isYoursMessage={item.messages[item.messages.length - 1].right} setDialogID={props.setDialogID}\r\n        key={index + 1} name={item.name} id={item.userId} />)\r\n\r\n    const currentDialog = dialogItemsData[dialogItemsData.findIndex((i) => { return i.userId === currentDialogId })];\r\n\r\n\r\n    return <div className={styles.messages} >\r\n\r\n        {currentDialogId === 0\r\n            ? <div className={styles.emptyMessages}>\r\n                <div className={styles.iconMessage}></div>\r\n                <div className={styles.selectDialog}>\r\n                    Please select a dialog\r\n                </div>\r\n            </div>\r\n            : <DialogSession valueMessage={props.valueMessage} isSearchMode={isSearchMode} userId={currentDialog.userId} \r\n            sendMessage={props.sendMessage} name={currentDialog.name}avatar={currentDialog.avatar} messages={currentDialog.messages} />}\r\n\r\n        <div className={styles.dialogItems}>\r\n            <div className={styles.dialogSearch}>\r\n                <input ref={searchInput} placeholder='Search' className={styles.searchInput}  value={searchWord} onChange={e => handleSearch(e)} type=\"text\" name=\"\" id=\"\" />\r\n            </div>\r\n            <div className={styles.dialogsList}>\r\n                <ScrollbarHOC children={isSearchMode ? dialogItemsSearch : dialogItems} autoHide removeTrackYWhenNotUsed={true} style={{ width: \"100%\", height: \"85vh\" }} />\r\n            </div>\r\n        </div>\r\n\r\n    </div>\r\n}\r\n\r\n\r\nexport default Messages;","import React from 'react'\r\nimport withAuthRedirect from '../../hoc/withAuthRedirect'\r\nimport {sendMessage, setDialogID, search} from '../../redux/messages-reducer'\r\nimport Messages from './Messages/Messages.jsx'\r\nimport {connect} from 'react-redux';\r\nimport { compose } from 'redux';\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        dialogItemsData: state.Messages.dialogItemsData,\r\n        currentDialogId: state.Messages.currentDialogId,\r\n        dialogsFromSearch: state.Messages.dialogsFromSearch\r\n      \r\n     }\r\n}\r\n\r\n  const MessagerContainer = compose(\r\n    connect(mapStateToProps,{sendMessage,setDialogID, search}),\r\n    withAuthRedirect\r\n)(Messages)\r\n\r\n\r\nexport default MessagerContainer;"],"sourceRoot":""}