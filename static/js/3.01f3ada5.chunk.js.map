{"version":3,"sources":["components/Messages-container/Messages/Messages.module.css","components/Messages-container/Messages/DialogsList/DialogWithUser.module.css","components/Messages-container/Messages/MessageItem/MessageItem.module.css","components/Messages-container/Messages/DialogsList/DialogWithUser.jsx","components/Messages-container/Messages/MessageItem/MessageItem.jsx","components/common/HOCScrollBar/HOCScrollbarCusctom.jsx","components/Messages-container/Messages/AddMessageFormWithConnect.jsx","components/Messages-container/Messages/EmpyDialogSession.jsx","components/Messages-container/Messages/DialogSession.jsx","components/Messages-container/Messages/Messages.jsx","components/Messages-container/MessagesContainer.jsx"],"names":["module","exports","DialogWithUser","props","useEffect","setLastMessageTime","formatTimeToLastMessage","Date","date","useState","lastMessageTime","to","id","onClick","isSearchMode","outSearch","ref","dialogRef","className","styles","items","currentDialogId","selectedDialog","avatar","src","alt","name","message","isYoursMessage","yourMessage","lastMessage","length","slice","timeLastMessage","MessageItem","right","messageContainer","time","timeRight","messageRight","timeLeft","ScrollbarHOC","React","forwardRef","children","isScrolling","setIsScrolling","isMouseOver","setIsMouseOver","isShow","onScrollStart","useCallback","onScrollStop","onMouseEnter","onMouseLeave","trackProps","useMemo","renderer","elementRef","style","restProps","opacity","transition","wrapperProps","trackXProps","trackYProps","scrollDetectionThreshold","AddMessageFormRedux","reduxForm","form","onSubmitSuccess","result","dispatch","reset","onKeyDown","e","keyCode","shiftKey","target","userId","preventDefault","handleSubmit","onSubmit","createField","required","voidValue","dirty","buttonForm","type","EmojiPicker","bottom","width","formName","fieldName","Form","addMessageForm","AddMessageFormWithConnect","connect","state","EmptyDialogMessages","emptyMessages","iconMessage","selectDialog","DialogSessionWithHistory","currentDialog","messageItems","messages","map","item","index","timeFormat","key","scrollBar","useRef","document","querySelector","focus","current","scrollToBottom","dialog","dialogHead","avatarContainer","arrowBack","messagesFill","removeTrackYWhenNotUsed","height","historyChatHeight","formContainer","data","sendMessage","DialogSessionWithOutHistory","getUserForMessages","setUserForMessages","isFetching","Preloader","userForMessage","photo","newChat","emptyChatText","setNewDialog","DialogSession","ResponsiveLayout","breakpoint","renderDesktop","renderMobile","window","innerWidth","setWidth","handleResize","addEventListener","removeEventListener","MessagesMobile","searchInput","searchWord","dialogItemsSearch","dialogItems","handleSearch","messagesMobile","exact","path","render","valueMessage","dialogSearch","placeholder","value","onChange","dialogsList","MessagesDesktop","Messages","dialogItemsData","setSearch","dialogsFromSearch","setSearchWord","setSearchMode","outSearhCheck","match","params","findIndex","i","word","currentTarget","trim","MessagerContainer","compose","withAuthRedirect"],"mappings":"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","file":"static/js/3.01f3ada5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"messages\":\"Messages_messages__2Czpm\",\"dialog\":\"Messages_dialog__tfj-k\",\"dialogItems\":\"Messages_dialogItems__2OoFm\",\"dialogHead\":\"Messages_dialogHead__BDJuz\",\"dialogBody\":\"Messages_dialogBody__Pv6vX\",\"messageOut\":\"Messages_messageOut__1ecbx\",\"messagesFill\":\"Messages_messagesFill__2JJHa\",\"formContainer\":\"Messages_formContainer__PFn6z\",\"messagesMobile\":\"Messages_messagesMobile__1u_Qb\",\"avatar\":\"Messages_avatar__FiFmh\",\"avatarContainer\":\"Messages_avatarContainer__1PCd-\",\"name\":\"Messages_name__1VKCA\",\"buttonForm\":\"Messages_buttonForm__3NwVr\",\"emptyMessages\":\"Messages_emptyMessages__12fxk\",\"selectDialog\":\"Messages_selectDialog__1geCX\",\"iconMessage\":\"Messages_iconMessage__3b62w\",\"dialogSearch\":\"Messages_dialogSearch__1DKPy\",\"searchInput\":\"Messages_searchInput__2JgjW\",\"emojiPicker\":\"Messages_emojiPicker__65cWX\",\"buttomEmoji\":\"Messages_buttomEmoji__gcgVt\",\"emojyPicker\":\"Messages_emojyPicker__3pYFV\",\"newChat\":\"Messages_newChat__2BM_U\",\"emptyChatText\":\"Messages_emptyChatText__2WzFB\",\"arrowBack\":\"Messages_arrowBack__14Ze4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"items\":\"DialogWithUser_items__2hRxI\",\"name\":\"DialogWithUser_name__2SpA4\",\"message\":\"DialogWithUser_message__2BINV\",\"selectedDialog\":\"DialogWithUser_selectedDialog__adA2o\",\"avatar\":\"DialogWithUser_avatar__3n_ux\",\"timeLastMessage\":\"DialogWithUser_timeLastMessage__1lmR_\",\"yourMessage\":\"DialogWithUser_yourMessage__27Rr9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"MessageItem_message__3fTmO\",\"messageRight\":\"MessageItem_messageRight__1aGY_\",\"messageContainer\":\"MessageItem_messageContainer__DmkNm\",\"time\":\"MessageItem_time__pQF6M\",\"timeRight\":\"MessageItem_timeRight__1aq_t\",\"timeLeft\":\"MessageItem_timeLeft__22qsT\"};","import React, { useState, useEffect } from 'react'\r\nimport styles from './DialogWithUser.module.css'\r\nimport { formatTimeToLastMessage } from '../../../../utils/timeFormat'\r\nimport {NavLink} from 'react-router-dom'\r\n\r\nconst DialogWithUser = (props) => {\r\n\r\n    useEffect(() => {\r\n        setLastMessageTime(formatTimeToLastMessage(new Date(props.date)))\r\n    }, [props.date])\r\n\r\n    const [lastMessageTime, setLastMessageTime] = useState(null);\r\n\r\n  \r\n    return <NavLink  to={`/messages/${props.id}`}>\r\n        <div onClick={() => {\r\n        props.isSearchMode && props.outSearch()\r\n    }} ref={props.dialogRef}\r\n        className={styles.items + ' ' + ( props.currentDialogId === props.id ? styles.selectedDialog : '')}>\r\n        <div>\r\n            <img className={styles.avatar} src={props.avatar} alt=\"avatar\" />\r\n        </div>\r\n        <div>\r\n            <div className={styles.name}>\r\n                {props.name}\r\n            </div>\r\n            <span className={styles.message}>{props.isYoursMessage ? <span className={styles.yourMessage}>You: </span> : ''}\r\n                {(props.lastMessage.length > 50 ? props.lastMessage.slice(0, 50) + '...' : props.lastMessage)}</span>\r\n\r\n        </div>\r\n        <span className={styles.timeLastMessage}>{lastMessageTime}</span>\r\n    </div>\r\n    </NavLink> \r\n}\r\n\r\nexport default DialogWithUser;","import React from 'react';\r\nimport styles  from './MessageItem.module.css'\r\n\r\n\r\n\r\n\r\nconst MessageItem = (props) =>{\r\n    return (props.right \r\n        ? <div className={styles.messageContainer}>\r\n            <div className={styles.time + ' ' + styles.timeRight}>{props.time}</div>\r\n            <div className={styles.message+ ' ' + styles.messageRight}>{props.message}</div>\r\n         </div>\r\n        : <div className={styles.messageContainer}> \r\n            <div className={styles.message}>{props.message}</div>\r\n            <div className={styles.time + ' ' + styles.timeLeft}>{props.time}</div>\r\n         </div> \r\n    )\r\n\r\n}\r\n\r\n   \r\nexport default MessageItem;","import React, { useCallback, useMemo, useState } from \"react\";\r\nimport ReactScrollbarsCustom from \"react-scrollbars-custom\";\r\n\r\nconst  ScrollbarHOC = React.forwardRef(({ children, ...props}, ref) => {\r\n  const [isScrolling, setIsScrolling] = useState(false);\r\n  const [isMouseOver, setIsMouseOver] = useState(false);\r\n  const isShow = isScrolling || isMouseOver;\r\n\r\n  const onScrollStart = useCallback(() => {\r\n    setIsScrolling(true);\r\n  }, []);\r\n  const onScrollStop = useCallback(() => {\r\n    setIsScrolling(false);\r\n  }, []);\r\n  const onMouseEnter = useCallback(() => {\r\n    setIsMouseOver(true);\r\n  }, []);\r\n  const onMouseLeave = useCallback(() => {\r\n    setIsMouseOver(false);\r\n  }, []);\r\n\r\n  const trackProps = useMemo(() => ({\r\n    renderer: ({ elementRef, style, ...restProps }) => (\r\n      <span\r\n        {...restProps}\r\n        ref={elementRef}\r\n        style={{ ...style, opacity: isShow ? 1 : 0, transition: \"opacity 0.4s ease-in-out\", }}\r\n        onMouseEnter={onMouseEnter}\r\n        onMouseLeave={onMouseLeave}\r\n      />\r\n    )\r\n  }), [isShow, onMouseEnter, onMouseLeave]);\r\n\r\n  return (\r\n    <ReactScrollbarsCustom\r\n      {...props}\r\n      wrapperProps={{\r\n        renderer: ({ elementRef, style, ...restProps }) => (\r\n          <div {...restProps} ref={elementRef} style={{ ...style, right: 0 }} />\r\n        ),\r\n      }}\r\n      trackXProps={trackProps}\r\n      trackYProps={trackProps}\r\n      onScrollStart={onScrollStart}\r\n      onScrollStop={onScrollStop}\r\n      scrollDetectionThreshold={500} // ms\r\n      ref={ref}\r\n    >\r\n      {children}\r\n    </ReactScrollbarsCustom>\r\n  );\r\n\r\n})\r\nexport default ScrollbarHOC;","\r\nimport React from 'react'\r\nimport { reduxForm, reset } from 'redux-form'\r\nimport { createField } from '../../common/FormControls/FormControls'\r\nimport { required, voidValue } from '../../../utils/validators/validator'\r\nimport EmojiPicker from '../../common/EmojiPicker/EmojiPicker'\r\nimport { connect } from 'react-redux'\r\nimport styles from './Messages.module.css'\r\n\r\n\r\nconst AddMessageForm = (props) => {\r\n\r\n    const onKeyHandler = (e) => {\r\n        if (e.keyCode === 13 && e.shiftKey === false) {\r\n            if (e.target.name === `message${props.userId}`) {\r\n                e.preventDefault()\r\n                props.handleSubmit()\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    return <form onKeyDown={onKeyHandler} onSubmit={props.handleSubmit}>\r\n        {createField(`write message to ${props.name}`, `message${props.userId}`, [required, voidValue], 'textarea', null, null )}\r\n\r\n        {props.dirty && <button className={styles.buttonForm} type=\"submit\"></button>}\r\n        <EmojiPicker bottom='100%' right='0'  width='50%'\r\n         formName='addMessageForm' fieldName={`message${props.userId}`} Form={props.addMessageForm} styles={styles} dispatch={props.dispatch} />\r\n\r\n\r\n\r\n    </form>\r\n}\r\nconst afterSumbit = (result, dispatch) => {\r\n    dispatch(reset('addMessageForm'))\r\n}\r\nconst AddMessageFormRedux = reduxForm({\r\n    form: 'addMessageForm',\r\n    onSubmitSuccess: afterSumbit\r\n})(AddMessageForm)\r\nconst mapStateToPropse = (state) => ({\r\n    addMessageForm: state.form.addMessageForm\r\n})\r\n\r\n const AddMessageFormWithConnect = connect(mapStateToPropse)(AddMessageFormRedux)\r\n\r\n export default AddMessageFormWithConnect","import React from 'react'\r\nimport styles from './Messages.module.css'\r\n\r\n\r\nconst EmptyDialogMessages = () => {\r\n    return <div className={styles.emptyMessages}>\r\n        <div className={styles.iconMessage}></div>\r\n        <div className={styles.selectDialog}>\r\n            Please select a dialog\r\n            </div>\r\n    </div>\r\n}\r\nexport default EmptyDialogMessages;","import React, { useEffect, useRef} from 'react'\r\n\r\nimport MessageItem from './MessageItem/MessageItem'\r\nimport styles from './Messages.module.css'\r\n\r\nimport ScrollbarHOC from '../../common/HOCScrollBar/HOCScrollbarCusctom';\r\nimport { NavLink } from 'react-router-dom';\r\nimport avatar from '../../../assets/img/ava.jpg'\r\n\r\n\r\n\r\n\r\nimport AddMessageFormWithConnect from './AddMessageFormWithConnect'\r\nimport Preloader from '../../common/Preloader/Preloader';\r\nimport EmptyDialogMessages from './EmpyDialogSession';\r\n\r\n\r\nconst DialogSession = ({currentDialog, ...props}) => {\r\n    return currentDialog\r\n    ? <DialogSessionWithHistory currentDialog={currentDialog}  {...props}/>\r\n    : <DialogSessionWithOutHistory {...props}/>\r\n    \r\n    \r\n}\r\n\r\n\r\n\r\nconst DialogSessionWithHistory = ({currentDialog, ...props}) =>{\r\n    \r\n    const messageItems = currentDialog.messages.map((item, index) => <MessageItem time={item.timeFormat} key={index} right={item.right} message={item.message} id={item.id} />)\r\n\r\n    const scrollBar = useRef()\r\n    \r\n    useEffect(() => {   \r\n        !props.isSearchMode && document.querySelector(`textarea[name=message${props.userId}]`).focus()\r\n    })\r\n\r\n    useEffect(() => {\r\n        scrollBar.current.scrollToBottom()\r\n    }, [messageItems])\r\n\r\n    return <div className={styles.dialog}>\r\n        <div className={styles.dialogHead}>\r\n            <div className={styles.avatarContainer}>\r\n                <NavLink to={`/profile/${props.userId}`}>\r\n                    <img className={styles.avatar} src={currentDialog.avatar} alt=\"avatar\" />\r\n                </NavLink>\r\n            </div>\r\n            <span className={styles.name}>\r\n                <NavLink to={`/profile/${props.userId}`}>\r\n                    {currentDialog.name}\r\n                </NavLink>\r\n            </span>\r\n            <NavLink className={styles.arrowBack} to={`/messages/`}/>          \r\n        </div>\r\n        <ScrollbarHOC children={<div className={styles.messagesFill}>{messageItems}</div>}  ref={scrollBar} removeTrackYWhenNotUsed={true} style={{ width: \"100%\", height: props.historyChatHeight}} />\r\n\r\n        <div className={styles.formContainer}>\r\n            <AddMessageFormWithConnect userId={props.userId} name={currentDialog.name} onSubmit={(data) => { props.sendMessage(data[`message${props.userId}`], props.userId) }} />\r\n        </div>\r\n    </div>\r\n    \r\n}\r\nconst DialogSessionWithOutHistory = ({getUserForMessages, setUserForMessages, ...props}) => {\r\n    useEffect(()=>{\r\n        getUserForMessages(props.userId)\r\n        return ()=>{\r\n            setUserForMessages(null)\r\n        }\r\n    },[props.userId,getUserForMessages, setUserForMessages ])\r\n     \r\n    return props.isFetching ?\r\n           <Preloader />\r\n           : !props.userForMessage \r\n                ? <EmptyDialogMessages />\r\n                : <div className={styles.dialog}>\r\n                    <div className={styles.dialogHead}>\r\n                        <div className={styles.avatarContainer}>\r\n                            <NavLink to={`/profile/${props.userId}`}>\r\n                                <img className={styles.avatar} src={props.userForMessage.photo || avatar}  alt=\"avatar\" />\r\n                            </NavLink>\r\n                        </div>\r\n                        <span className={styles.name}>\r\n                            <NavLink to={`/profile/${props.userId}`}>\r\n                                {props.userForMessage.name}\r\n                            </NavLink>\r\n                        </span>\r\n                        <NavLink className={styles.arrowBack} to={`/messages/`}/>\r\n                    </div>\r\n                    <div className={styles.newChat}><div className={styles.emptyChatText}>\r\n                        Yet no messages with {props.userForMessage.name}\r\n                    </div> </div>\r\n\r\n                    <div className={styles.formContainer}>\r\n                        <AddMessageFormWithConnect userId={props.userId} name={props.userForMessage.name} onSubmit={(data) => { props.setNewDialog(data[`message${props.userId}`], props.userId,\r\n                        props.userForMessage.photo, props.userForMessage.name) }} />\r\n                    </div>\r\n                </div>\r\n}\r\n\r\n\r\nexport default DialogSession;","import React, { useState, useRef, useEffect } from 'react'\r\nimport styles from './Messages.module.css'\r\nimport DialogWithUser from './DialogsList/DialogWithUser'\r\nimport DialogSession from './DialogSession'\r\nimport ScrollbarHOC from '../../common/HOCScrollBar/HOCScrollbarCusctom'\r\nimport { Switch } from 'react-router'\r\nimport { Route } from 'react-router-dom'\r\nimport EmptyDialogMessages from './EmpyDialogSession'\r\n\r\n\r\n\r\n\r\n\r\nconst Messages = ({ dialogItemsData, setSearch, dialogsFromSearch, ...props }) => {\r\n\r\n    const [searchWord, setSearchWord] = useState('');\r\n    const [isSearchMode, setSearchMode] = useState(false);\r\n    const breakpoint = 790;\r\n\r\n    useEffect(() => {\r\n        const outSearhCheck = (e) => {\r\n            if (e.target !== searchInput.current && e.target !== dialogRef.current) {\r\n                outSearch()\r\n            }\r\n\r\n        }\r\n        if (isSearchMode) {\r\n            document.addEventListener('click', outSearhCheck)\r\n        }\r\n        else {\r\n            document.removeEventListener('click', outSearhCheck)\r\n        }\r\n        return () => {\r\n            document.removeEventListener('click', outSearhCheck)\r\n        }\r\n    }, [isSearchMode])\r\n\r\n    const searchInput = useRef();\r\n    const dialogRef = useRef();\r\n\r\n    const handleSearch = (e) => {\r\n        const word = e.currentTarget.value;\r\n        setSearchWord(word);\r\n        if (word && word.trim() !== '') {\r\n            setSearch(word)\r\n            setSearchMode(true)\r\n        }\r\n    }\r\n    const outSearch = () => {\r\n        setSearchMode(false)\r\n        setSearchWord('')\r\n    }\r\n\r\n    const currentDialogId = +props.match.params.userId ? +props.match.params.userId : 0;\r\n    const currentDialog = currentDialogId && dialogItemsData[dialogItemsData.findIndex((i) => { return i.userId === currentDialogId })];\r\n\r\n    const dialogItems = dialogItemsData.map((item, index) => <DialogWithUser avatar={item.avatar} currentDialogId={currentDialogId}\r\n        date={item.messages[item.messages.length - 1].date} isYoursMessage={item.messages[item.messages.length - 1].right}\r\n        lastMessage={item.messages[item.messages.length - 1].message} key={index + 1} name={item.name} id={item.userId} />)\r\n\r\n    const dialogItemsSearch = isSearchMode && dialogsFromSearch.map((item, index) => <DialogWithUser dialogRef={dialogRef} isSearchMode={isSearchMode}\r\n        avatar={item.avatar} outSearch={outSearch} lastMessage={item.messages[item.messages.length - 1].message}\r\n        date={item.messages[item.messages.length - 1].date} isYoursMessage={item.messages[item.messages.length - 1].right}\r\n        key={index + 1} name={item.name} id={item.userId} currentDialogId={currentDialogId} />)\r\n\r\n\r\n\r\n    return ResponsiveLayout(breakpoint, renderDesktop, renderMobile, { currentDialogId, currentDialog, dialogItemsSearch, dialogItems, handleSearch, isSearchMode, searchInput, searchWord, ...props })\r\n}\r\n\r\n\r\nconst ResponsiveLayout = (breakpoint, renderDesktop, renderMobile, props ) => {\r\n    const [width, setWidth] = useState(window.innerWidth)\r\n    useEffect(() => {\r\n        const handleResize = () => {\r\n            setWidth(window.innerWidth)\r\n        }\r\n        window.addEventListener('resize', handleResize)\r\n        return () => { window.removeEventListener('resize', handleResize) }\r\n    }, [])\r\n    return (width > breakpoint ? renderDesktop(props) : renderMobile(props))\r\n}\r\n\r\nconst renderDesktop = (props) => {\r\n    return <MessagesDesktop {...props} />\r\n}\r\nconst renderMobile = (props) => {\r\n    return <MessagesMobile {...props} />\r\n}\r\n\r\nconst MessagesMobile = ({ currentDialogId, isSearchMode, currentDialog, searchInput, searchWord, dialogItemsSearch, dialogItems, handleSearch, ...props }) => {\r\n\r\n    return <div className={styles.messagesMobile} >\r\n\r\n        {!!currentDialogId &&\r\n            <Switch>\r\n                <Route exact path={`/messages/`} render={() => <EmptyDialogMessages />} />\r\n                <Route path={`/:userId`} render={() => <DialogSession historyChatHeight='65%' valueMessage={props.valueMessage} isSearchMode={isSearchMode} userId={currentDialogId}\r\n                    sendMessage={props.sendMessage} currentDialog={currentDialog} isFetching={props.isFetching} getUserForMessages={props.getUserForMessages}\r\n                    userForMessage={props.userForMessage} setNewDialog={props.setNewDialog} setUserForMessages={props.setUserForMessages} />} />\r\n\r\n            </Switch>\r\n\r\n        }\r\n\r\n        {!currentDialogId && <div className={styles.dialogItems}>\r\n            <div className={styles.dialogSearch}>\r\n                <input ref={searchInput} placeholder='Search' className={styles.searchInput} value={searchWord} onChange={e => handleSearch(e)} type=\"text\" name=\"\" id=\"\" />\r\n            </div>\r\n            <div className={styles.dialogsList}>\r\n                <ScrollbarHOC children={isSearchMode ? dialogItemsSearch : dialogItems} removeTrackYWhenNotUsed={true} style={{ width: \"100%\", height: \"88vh\" }} />\r\n            </div>\r\n        </div>}\r\n\r\n    </div>\r\n\r\n}\r\nconst MessagesDesktop = ({ currentDialogId, isSearchMode, currentDialog, searchInput, searchWord, dialogItemsSearch, dialogItems, handleSearch, ...props }) => {\r\n    return <div className={styles.messages} >\r\n\r\n        <Switch>\r\n            <Route exact path={`/messages/`} render={() => <EmptyDialogMessages />} />\r\n            <Route path={`/:userId`} render={() => <DialogSession historyChatHeight='75%' valueMessage={props.valueMessage} isSearchMode={isSearchMode} userId={currentDialogId}\r\n                sendMessage={props.sendMessage} currentDialog={currentDialog} isFetching={props.isFetching} getUserForMessages={props.getUserForMessages}\r\n                userForMessage={props.userForMessage} setNewDialog={props.setNewDialog} setUserForMessages={props.setUserForMessages} />} />\r\n\r\n        </Switch>\r\n\r\n\r\n\r\n\r\n\r\n\r\n        <div className={styles.dialogItems}>\r\n            <div className={styles.dialogSearch}>\r\n                <input ref={searchInput} placeholder='Search' className={styles.searchInput} value={searchWord} onChange={e => handleSearch(e)} type=\"text\" name=\"\" id=\"\" />\r\n            </div>\r\n            <div className={styles.dialogsList}>\r\n                <ScrollbarHOC children={isSearchMode ? dialogItemsSearch : dialogItems} removeTrackYWhenNotUsed={true} style={{ width: \"100%\", height: \"85vh\" }} />\r\n            </div>\r\n        </div>\r\n\r\n    </div>\r\n\r\n}\r\n\r\nexport default Messages;","\r\nimport withAuthRedirect from '../../hoc/withAuthRedirect'\r\nimport {sendMessage,  setSearch, getUserForMessages,setUserForMessages, setNewDialog} from '../../redux/messages-reducer'\r\nimport Messages from './Messages/Messages.jsx'\r\nimport {connect} from 'react-redux'\r\nimport { compose } from 'redux'\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        dialogItemsData: state.messages.dialogItemsData,\r\n        dialogsFromSearch: state.messages.dialogsFromSearch,\r\n        isFetching: state.messages.isFetching,\r\n        userForMessage: state.messages.userForMessage\r\n      \r\n     }\r\n}\r\n\r\n  const MessagerContainer = compose(\r\n    connect(mapStateToProps,{sendMessage,getUserForMessages,setUserForMessages, setSearch, setNewDialog}),\r\n    withAuthRedirect\r\n)(Messages)\r\n\r\n\r\nexport default MessagerContainer"],"sourceRoot":""}